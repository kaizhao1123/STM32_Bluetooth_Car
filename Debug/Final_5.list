
Final_5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003bb8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .init_array   00000004  08003d48  08003d48  00013d48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .fini_array   00000004  08003d4c  08003d4c  00013d4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000003c  20000000  08003d50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .ccmram       00000000  10000000  10000000  0002003c  2**0
                  CONTENTS
  6 .bss          00001e38  2000003c  2000003c  0002003c  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  20001e74  20001e74  0002003c  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000ee25  00000000  00000000  0002006a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000029fb  00000000  00000000  0002ee8f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000db0  00000000  00000000  00031890  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000c28  00000000  00000000  00032640  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000063dc  00000000  00000000  00033268  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000049a5  00000000  00000000  00039644  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0003dfe9  2**0
                  CONTENTS, READONLY
 16 .debug_frame  0000364c  00000000  00000000  0003e068  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  000416b4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000003c 	.word	0x2000003c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003d30 	.word	0x08003d30

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000040 	.word	0x20000040
 80001cc:	08003d30 	.word	0x08003d30

080001d0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80001d0:	b480      	push	{r7}
 80001d2:	b083      	sub	sp, #12
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	f103 0208 	add.w	r2, r3, #8
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	f04f 32ff 	mov.w	r2, #4294967295
 80001e8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	f103 0208 	add.w	r2, r3, #8
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	f103 0208 	add.w	r2, r3, #8
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	2200      	movs	r2, #0
 8000202:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000204:	bf00      	nop
 8000206:	370c      	adds	r7, #12
 8000208:	46bd      	mov	sp, r7
 800020a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020e:	4770      	bx	lr

08000210 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000210:	b480      	push	{r7}
 8000212:	b083      	sub	sp, #12
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	2200      	movs	r2, #0
 800021c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800021e:	bf00      	nop
 8000220:	370c      	adds	r7, #12
 8000222:	46bd      	mov	sp, r7
 8000224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000228:	4770      	bx	lr

0800022a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800022a:	b480      	push	{r7}
 800022c:	b085      	sub	sp, #20
 800022e:	af00      	add	r7, sp, #0
 8000230:	6078      	str	r0, [r7, #4]
 8000232:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	685b      	ldr	r3, [r3, #4]
 8000238:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800023a:	683b      	ldr	r3, [r7, #0]
 800023c:	68fa      	ldr	r2, [r7, #12]
 800023e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000240:	68fb      	ldr	r3, [r7, #12]
 8000242:	689a      	ldr	r2, [r3, #8]
 8000244:	683b      	ldr	r3, [r7, #0]
 8000246:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000248:	68fb      	ldr	r3, [r7, #12]
 800024a:	689b      	ldr	r3, [r3, #8]
 800024c:	683a      	ldr	r2, [r7, #0]
 800024e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8000250:	68fb      	ldr	r3, [r7, #12]
 8000252:	683a      	ldr	r2, [r7, #0]
 8000254:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8000256:	683b      	ldr	r3, [r7, #0]
 8000258:	687a      	ldr	r2, [r7, #4]
 800025a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	1c5a      	adds	r2, r3, #1
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	601a      	str	r2, [r3, #0]
}
 8000266:	bf00      	nop
 8000268:	3714      	adds	r7, #20
 800026a:	46bd      	mov	sp, r7
 800026c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000270:	4770      	bx	lr

08000272 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000272:	b480      	push	{r7}
 8000274:	b085      	sub	sp, #20
 8000276:	af00      	add	r7, sp, #0
 8000278:	6078      	str	r0, [r7, #4]
 800027a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800027c:	683b      	ldr	r3, [r7, #0]
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8000282:	68bb      	ldr	r3, [r7, #8]
 8000284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000288:	d103      	bne.n	8000292 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	691b      	ldr	r3, [r3, #16]
 800028e:	60fb      	str	r3, [r7, #12]
 8000290:	e00c      	b.n	80002ac <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	3308      	adds	r3, #8
 8000296:	60fb      	str	r3, [r7, #12]
 8000298:	e002      	b.n	80002a0 <vListInsert+0x2e>
 800029a:	68fb      	ldr	r3, [r7, #12]
 800029c:	685b      	ldr	r3, [r3, #4]
 800029e:	60fb      	str	r3, [r7, #12]
 80002a0:	68fb      	ldr	r3, [r7, #12]
 80002a2:	685b      	ldr	r3, [r3, #4]
 80002a4:	681a      	ldr	r2, [r3, #0]
 80002a6:	68bb      	ldr	r3, [r7, #8]
 80002a8:	429a      	cmp	r2, r3
 80002aa:	d9f6      	bls.n	800029a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80002ac:	68fb      	ldr	r3, [r7, #12]
 80002ae:	685a      	ldr	r2, [r3, #4]
 80002b0:	683b      	ldr	r3, [r7, #0]
 80002b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80002b4:	683b      	ldr	r3, [r7, #0]
 80002b6:	685b      	ldr	r3, [r3, #4]
 80002b8:	683a      	ldr	r2, [r7, #0]
 80002ba:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80002bc:	683b      	ldr	r3, [r7, #0]
 80002be:	68fa      	ldr	r2, [r7, #12]
 80002c0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80002c2:	68fb      	ldr	r3, [r7, #12]
 80002c4:	683a      	ldr	r2, [r7, #0]
 80002c6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80002c8:	683b      	ldr	r3, [r7, #0]
 80002ca:	687a      	ldr	r2, [r7, #4]
 80002cc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	1c5a      	adds	r2, r3, #1
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	601a      	str	r2, [r3, #0]
}
 80002d8:	bf00      	nop
 80002da:	3714      	adds	r7, #20
 80002dc:	46bd      	mov	sp, r7
 80002de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e2:	4770      	bx	lr

080002e4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80002e4:	b480      	push	{r7}
 80002e6:	b085      	sub	sp, #20
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	691b      	ldr	r3, [r3, #16]
 80002f0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	685b      	ldr	r3, [r3, #4]
 80002f6:	687a      	ldr	r2, [r7, #4]
 80002f8:	6892      	ldr	r2, [r2, #8]
 80002fa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	689b      	ldr	r3, [r3, #8]
 8000300:	687a      	ldr	r2, [r7, #4]
 8000302:	6852      	ldr	r2, [r2, #4]
 8000304:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8000306:	68fb      	ldr	r3, [r7, #12]
 8000308:	685a      	ldr	r2, [r3, #4]
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	429a      	cmp	r2, r3
 800030e:	d103      	bne.n	8000318 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	689a      	ldr	r2, [r3, #8]
 8000314:	68fb      	ldr	r3, [r7, #12]
 8000316:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	2200      	movs	r2, #0
 800031c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800031e:	68fb      	ldr	r3, [r7, #12]
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	1e5a      	subs	r2, r3, #1
 8000324:	68fb      	ldr	r3, [r7, #12]
 8000326:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8000328:	68fb      	ldr	r3, [r7, #12]
 800032a:	681b      	ldr	r3, [r3, #0]
}
 800032c:	4618      	mov	r0, r3
 800032e:	3714      	adds	r7, #20
 8000330:	46bd      	mov	sp, r7
 8000332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000336:	4770      	bx	lr

08000338 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8000338:	b480      	push	{r7}
 800033a:	b085      	sub	sp, #20
 800033c:	af00      	add	r7, sp, #0
 800033e:	60f8      	str	r0, [r7, #12]
 8000340:	60b9      	str	r1, [r7, #8]
 8000342:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8000344:	68fb      	ldr	r3, [r7, #12]
 8000346:	3b04      	subs	r3, #4
 8000348:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800034a:	68fb      	ldr	r3, [r7, #12]
 800034c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000350:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8000352:	68fb      	ldr	r3, [r7, #12]
 8000354:	3b04      	subs	r3, #4
 8000356:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8000358:	68bb      	ldr	r3, [r7, #8]
 800035a:	f023 0201 	bic.w	r2, r3, #1
 800035e:	68fb      	ldr	r3, [r7, #12]
 8000360:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8000362:	68fb      	ldr	r3, [r7, #12]
 8000364:	3b04      	subs	r3, #4
 8000366:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8000368:	4a0c      	ldr	r2, [pc, #48]	; (800039c <pxPortInitialiseStack+0x64>)
 800036a:	68fb      	ldr	r3, [r7, #12]
 800036c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800036e:	68fb      	ldr	r3, [r7, #12]
 8000370:	3b14      	subs	r3, #20
 8000372:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8000374:	687a      	ldr	r2, [r7, #4]
 8000376:	68fb      	ldr	r3, [r7, #12]
 8000378:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800037a:	68fb      	ldr	r3, [r7, #12]
 800037c:	3b04      	subs	r3, #4
 800037e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8000380:	68fb      	ldr	r3, [r7, #12]
 8000382:	f06f 0202 	mvn.w	r2, #2
 8000386:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8000388:	68fb      	ldr	r3, [r7, #12]
 800038a:	3b20      	subs	r3, #32
 800038c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800038e:	68fb      	ldr	r3, [r7, #12]
}
 8000390:	4618      	mov	r0, r3
 8000392:	3714      	adds	r7, #20
 8000394:	46bd      	mov	sp, r7
 8000396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039a:	4770      	bx	lr
 800039c:	080003a1 	.word	0x080003a1

080003a0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80003a0:	b480      	push	{r7}
 80003a2:	b083      	sub	sp, #12
 80003a4:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80003a6:	4b0c      	ldr	r3, [pc, #48]	; (80003d8 <prvTaskExitError+0x38>)
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80003ae:	d009      	beq.n	80003c4 <prvTaskExitError+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80003b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80003b4:	f383 8811 	msr	BASEPRI, r3
 80003b8:	f3bf 8f6f 	isb	sy
 80003bc:	f3bf 8f4f 	dsb	sy
 80003c0:	607b      	str	r3, [r7, #4]
 80003c2:	e7fe      	b.n	80003c2 <prvTaskExitError+0x22>
 80003c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80003c8:	f383 8811 	msr	BASEPRI, r3
 80003cc:	f3bf 8f6f 	isb	sy
 80003d0:	f3bf 8f4f 	dsb	sy
 80003d4:	603b      	str	r3, [r7, #0]
	portDISABLE_INTERRUPTS();
	for( ;; );
 80003d6:	e7fe      	b.n	80003d6 <prvTaskExitError+0x36>
 80003d8:	20000000 	.word	0x20000000
 80003dc:	00000000 	.word	0x00000000

080003e0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80003e0:	4b07      	ldr	r3, [pc, #28]	; (8000400 <pxCurrentTCBConst2>)
 80003e2:	6819      	ldr	r1, [r3, #0]
 80003e4:	6808      	ldr	r0, [r1, #0]
 80003e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80003ea:	f380 8809 	msr	PSP, r0
 80003ee:	f3bf 8f6f 	isb	sy
 80003f2:	f04f 0000 	mov.w	r0, #0
 80003f6:	f380 8811 	msr	BASEPRI, r0
 80003fa:	4770      	bx	lr
 80003fc:	f3af 8000 	nop.w

08000400 <pxCurrentTCBConst2>:
 8000400:	20001c68 	.word	0x20001c68
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8000404:	bf00      	nop
 8000406:	bf00      	nop

08000408 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8000408:	4806      	ldr	r0, [pc, #24]	; (8000424 <prvPortStartFirstTask+0x1c>)
 800040a:	6800      	ldr	r0, [r0, #0]
 800040c:	6800      	ldr	r0, [r0, #0]
 800040e:	f380 8808 	msr	MSP, r0
 8000412:	b662      	cpsie	i
 8000414:	b661      	cpsie	f
 8000416:	f3bf 8f4f 	dsb	sy
 800041a:	f3bf 8f6f 	isb	sy
 800041e:	df00      	svc	0
 8000420:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8000422:	bf00      	nop
 8000424:	e000ed08 	.word	0xe000ed08

08000428 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b086      	sub	sp, #24
 800042c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800042e:	4b3b      	ldr	r3, [pc, #236]	; (800051c <xPortStartScheduler+0xf4>)
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	4a3b      	ldr	r2, [pc, #236]	; (8000520 <xPortStartScheduler+0xf8>)
 8000434:	4293      	cmp	r3, r2
 8000436:	d109      	bne.n	800044c <xPortStartScheduler+0x24>
 8000438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800043c:	f383 8811 	msr	BASEPRI, r3
 8000440:	f3bf 8f6f 	isb	sy
 8000444:	f3bf 8f4f 	dsb	sy
 8000448:	613b      	str	r3, [r7, #16]
 800044a:	e7fe      	b.n	800044a <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800044c:	4b33      	ldr	r3, [pc, #204]	; (800051c <xPortStartScheduler+0xf4>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	4a34      	ldr	r2, [pc, #208]	; (8000524 <xPortStartScheduler+0xfc>)
 8000452:	4293      	cmp	r3, r2
 8000454:	d109      	bne.n	800046a <xPortStartScheduler+0x42>
 8000456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800045a:	f383 8811 	msr	BASEPRI, r3
 800045e:	f3bf 8f6f 	isb	sy
 8000462:	f3bf 8f4f 	dsb	sy
 8000466:	60fb      	str	r3, [r7, #12]
 8000468:	e7fe      	b.n	8000468 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800046a:	4b2f      	ldr	r3, [pc, #188]	; (8000528 <xPortStartScheduler+0x100>)
 800046c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800046e:	697b      	ldr	r3, [r7, #20]
 8000470:	781b      	ldrb	r3, [r3, #0]
 8000472:	b2db      	uxtb	r3, r3
 8000474:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8000476:	697b      	ldr	r3, [r7, #20]
 8000478:	22ff      	movs	r2, #255	; 0xff
 800047a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800047c:	697b      	ldr	r3, [r7, #20]
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	b2db      	uxtb	r3, r3
 8000482:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8000484:	79fb      	ldrb	r3, [r7, #7]
 8000486:	b2db      	uxtb	r3, r3
 8000488:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800048c:	b2da      	uxtb	r2, r3
 800048e:	4b27      	ldr	r3, [pc, #156]	; (800052c <xPortStartScheduler+0x104>)
 8000490:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8000492:	4b27      	ldr	r3, [pc, #156]	; (8000530 <xPortStartScheduler+0x108>)
 8000494:	2207      	movs	r2, #7
 8000496:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8000498:	e009      	b.n	80004ae <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800049a:	4b25      	ldr	r3, [pc, #148]	; (8000530 <xPortStartScheduler+0x108>)
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	3b01      	subs	r3, #1
 80004a0:	4a23      	ldr	r2, [pc, #140]	; (8000530 <xPortStartScheduler+0x108>)
 80004a2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80004a4:	79fb      	ldrb	r3, [r7, #7]
 80004a6:	b2db      	uxtb	r3, r3
 80004a8:	005b      	lsls	r3, r3, #1
 80004aa:	b2db      	uxtb	r3, r3
 80004ac:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80004ae:	79fb      	ldrb	r3, [r7, #7]
 80004b0:	b2db      	uxtb	r3, r3
 80004b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004b6:	2b80      	cmp	r3, #128	; 0x80
 80004b8:	d0ef      	beq.n	800049a <xPortStartScheduler+0x72>
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80004ba:	4b1d      	ldr	r3, [pc, #116]	; (8000530 <xPortStartScheduler+0x108>)
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	021b      	lsls	r3, r3, #8
 80004c0:	4a1b      	ldr	r2, [pc, #108]	; (8000530 <xPortStartScheduler+0x108>)
 80004c2:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80004c4:	4b1a      	ldr	r3, [pc, #104]	; (8000530 <xPortStartScheduler+0x108>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80004cc:	4a18      	ldr	r2, [pc, #96]	; (8000530 <xPortStartScheduler+0x108>)
 80004ce:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80004d0:	68bb      	ldr	r3, [r7, #8]
 80004d2:	b2da      	uxtb	r2, r3
 80004d4:	697b      	ldr	r3, [r7, #20]
 80004d6:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80004d8:	4a16      	ldr	r2, [pc, #88]	; (8000534 <xPortStartScheduler+0x10c>)
 80004da:	4b16      	ldr	r3, [pc, #88]	; (8000534 <xPortStartScheduler+0x10c>)
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80004e2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80004e4:	4a13      	ldr	r2, [pc, #76]	; (8000534 <xPortStartScheduler+0x10c>)
 80004e6:	4b13      	ldr	r3, [pc, #76]	; (8000534 <xPortStartScheduler+0x10c>)
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80004ee:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80004f0:	f000 f8d2 	bl	8000698 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80004f4:	4b10      	ldr	r3, [pc, #64]	; (8000538 <xPortStartScheduler+0x110>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80004fa:	f000 f8e9 	bl	80006d0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80004fe:	4a0f      	ldr	r2, [pc, #60]	; (800053c <xPortStartScheduler+0x114>)
 8000500:	4b0e      	ldr	r3, [pc, #56]	; (800053c <xPortStartScheduler+0x114>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8000508:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800050a:	f7ff ff7d 	bl	8000408 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 800050e:	f7ff ff47 	bl	80003a0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8000512:	2300      	movs	r3, #0
}
 8000514:	4618      	mov	r0, r3
 8000516:	3718      	adds	r7, #24
 8000518:	46bd      	mov	sp, r7
 800051a:	bd80      	pop	{r7, pc}
 800051c:	e000ed00 	.word	0xe000ed00
 8000520:	410fc271 	.word	0x410fc271
 8000524:	410fc270 	.word	0x410fc270
 8000528:	e000e400 	.word	0xe000e400
 800052c:	20000058 	.word	0x20000058
 8000530:	2000005c 	.word	0x2000005c
 8000534:	e000ed20 	.word	0xe000ed20
 8000538:	20000000 	.word	0x20000000
 800053c:	e000ef34 	.word	0xe000ef34

08000540 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8000540:	b480      	push	{r7}
 8000542:	b083      	sub	sp, #12
 8000544:	af00      	add	r7, sp, #0
 8000546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800054a:	f383 8811 	msr	BASEPRI, r3
 800054e:	f3bf 8f6f 	isb	sy
 8000552:	f3bf 8f4f 	dsb	sy
 8000556:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8000558:	4b0e      	ldr	r3, [pc, #56]	; (8000594 <vPortEnterCritical+0x54>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	3301      	adds	r3, #1
 800055e:	4a0d      	ldr	r2, [pc, #52]	; (8000594 <vPortEnterCritical+0x54>)
 8000560:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8000562:	4b0c      	ldr	r3, [pc, #48]	; (8000594 <vPortEnterCritical+0x54>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	2b01      	cmp	r3, #1
 8000568:	d10e      	bne.n	8000588 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800056a:	4b0b      	ldr	r3, [pc, #44]	; (8000598 <vPortEnterCritical+0x58>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	b2db      	uxtb	r3, r3
 8000570:	2b00      	cmp	r3, #0
 8000572:	d009      	beq.n	8000588 <vPortEnterCritical+0x48>
 8000574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000578:	f383 8811 	msr	BASEPRI, r3
 800057c:	f3bf 8f6f 	isb	sy
 8000580:	f3bf 8f4f 	dsb	sy
 8000584:	603b      	str	r3, [r7, #0]
 8000586:	e7fe      	b.n	8000586 <vPortEnterCritical+0x46>
	}
}
 8000588:	bf00      	nop
 800058a:	370c      	adds	r7, #12
 800058c:	46bd      	mov	sp, r7
 800058e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000592:	4770      	bx	lr
 8000594:	20000000 	.word	0x20000000
 8000598:	e000ed04 	.word	0xe000ed04

0800059c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800059c:	b480      	push	{r7}
 800059e:	b083      	sub	sp, #12
 80005a0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80005a2:	4b11      	ldr	r3, [pc, #68]	; (80005e8 <vPortExitCritical+0x4c>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d109      	bne.n	80005be <vPortExitCritical+0x22>
 80005aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005ae:	f383 8811 	msr	BASEPRI, r3
 80005b2:	f3bf 8f6f 	isb	sy
 80005b6:	f3bf 8f4f 	dsb	sy
 80005ba:	607b      	str	r3, [r7, #4]
 80005bc:	e7fe      	b.n	80005bc <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80005be:	4b0a      	ldr	r3, [pc, #40]	; (80005e8 <vPortExitCritical+0x4c>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	3b01      	subs	r3, #1
 80005c4:	4a08      	ldr	r2, [pc, #32]	; (80005e8 <vPortExitCritical+0x4c>)
 80005c6:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80005c8:	4b07      	ldr	r3, [pc, #28]	; (80005e8 <vPortExitCritical+0x4c>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d104      	bne.n	80005da <vPortExitCritical+0x3e>
 80005d0:	2300      	movs	r3, #0
 80005d2:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80005d4:	683b      	ldr	r3, [r7, #0]
 80005d6:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80005da:	bf00      	nop
 80005dc:	370c      	adds	r7, #12
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	20000000 	.word	0x20000000
 80005ec:	00000000 	.word	0x00000000

080005f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80005f0:	f3ef 8009 	mrs	r0, PSP
 80005f4:	f3bf 8f6f 	isb	sy
 80005f8:	4b15      	ldr	r3, [pc, #84]	; (8000650 <pxCurrentTCBConst>)
 80005fa:	681a      	ldr	r2, [r3, #0]
 80005fc:	f01e 0f10 	tst.w	lr, #16
 8000600:	bf08      	it	eq
 8000602:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8000606:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800060a:	6010      	str	r0, [r2, #0]
 800060c:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8000610:	f04f 0050 	mov.w	r0, #80	; 0x50
 8000614:	f380 8811 	msr	BASEPRI, r0
 8000618:	f3bf 8f4f 	dsb	sy
 800061c:	f3bf 8f6f 	isb	sy
 8000620:	f001 f960 	bl	80018e4 <vTaskSwitchContext>
 8000624:	f04f 0000 	mov.w	r0, #0
 8000628:	f380 8811 	msr	BASEPRI, r0
 800062c:	bc08      	pop	{r3}
 800062e:	6819      	ldr	r1, [r3, #0]
 8000630:	6808      	ldr	r0, [r1, #0]
 8000632:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000636:	f01e 0f10 	tst.w	lr, #16
 800063a:	bf08      	it	eq
 800063c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8000640:	f380 8809 	msr	PSP, r0
 8000644:	f3bf 8f6f 	isb	sy
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	f3af 8000 	nop.w

08000650 <pxCurrentTCBConst>:
 8000650:	20001c68 	.word	0x20001c68
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8000654:	bf00      	nop
 8000656:	bf00      	nop

08000658 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
	__asm volatile
 800065e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000662:	f383 8811 	msr	BASEPRI, r3
 8000666:	f3bf 8f6f 	isb	sy
 800066a:	f3bf 8f4f 	dsb	sy
 800066e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8000670:	f001 f874 	bl	800175c <xTaskIncrementTick>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d003      	beq.n	8000682 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800067a:	4b06      	ldr	r3, [pc, #24]	; (8000694 <SysTick_Handler+0x3c>)
 800067c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000680:	601a      	str	r2, [r3, #0]
 8000682:	2300      	movs	r3, #0
 8000684:	603b      	str	r3, [r7, #0]
	__asm volatile
 8000686:	683b      	ldr	r3, [r7, #0]
 8000688:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800068c:	bf00      	nop
 800068e:	3708      	adds	r7, #8
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	e000ed04 	.word	0xe000ed04

08000698 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800069c:	4a08      	ldr	r2, [pc, #32]	; (80006c0 <vPortSetupTimerInterrupt+0x28>)
 800069e:	4b09      	ldr	r3, [pc, #36]	; (80006c4 <vPortSetupTimerInterrupt+0x2c>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	4909      	ldr	r1, [pc, #36]	; (80006c8 <vPortSetupTimerInterrupt+0x30>)
 80006a4:	fba1 1303 	umull	r1, r3, r1, r3
 80006a8:	099b      	lsrs	r3, r3, #6
 80006aa:	3b01      	subs	r3, #1
 80006ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80006ae:	4b07      	ldr	r3, [pc, #28]	; (80006cc <vPortSetupTimerInterrupt+0x34>)
 80006b0:	2207      	movs	r2, #7
 80006b2:	601a      	str	r2, [r3, #0]
}
 80006b4:	bf00      	nop
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr
 80006be:	bf00      	nop
 80006c0:	e000e014 	.word	0xe000e014
 80006c4:	20000038 	.word	0x20000038
 80006c8:	10624dd3 	.word	0x10624dd3
 80006cc:	e000e010 	.word	0xe000e010

080006d0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80006d0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80006e0 <vPortEnableVFP+0x10>
 80006d4:	6801      	ldr	r1, [r0, #0]
 80006d6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006da:	6001      	str	r1, [r0, #0]
 80006dc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80006de:	bf00      	nop
 80006e0:	e000ed88 	.word	0xe000ed88

080006e4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80006e4:	b480      	push	{r7}
 80006e6:	b085      	sub	sp, #20
 80006e8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 80006ea:	f3ef 8305 	mrs	r3, IPSR
 80006ee:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	2b0f      	cmp	r3, #15
 80006f4:	d913      	bls.n	800071e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80006f6:	4a16      	ldr	r2, [pc, #88]	; (8000750 <vPortValidateInterruptPriority+0x6c>)
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	4413      	add	r3, r2
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8000700:	4b14      	ldr	r3, [pc, #80]	; (8000754 <vPortValidateInterruptPriority+0x70>)
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	7afa      	ldrb	r2, [r7, #11]
 8000706:	429a      	cmp	r2, r3
 8000708:	d209      	bcs.n	800071e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800070a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800070e:	f383 8811 	msr	BASEPRI, r3
 8000712:	f3bf 8f6f 	isb	sy
 8000716:	f3bf 8f4f 	dsb	sy
 800071a:	607b      	str	r3, [r7, #4]
 800071c:	e7fe      	b.n	800071c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800071e:	4b0e      	ldr	r3, [pc, #56]	; (8000758 <vPortValidateInterruptPriority+0x74>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8000726:	4b0d      	ldr	r3, [pc, #52]	; (800075c <vPortValidateInterruptPriority+0x78>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	429a      	cmp	r2, r3
 800072c:	d909      	bls.n	8000742 <vPortValidateInterruptPriority+0x5e>
 800072e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000732:	f383 8811 	msr	BASEPRI, r3
 8000736:	f3bf 8f6f 	isb	sy
 800073a:	f3bf 8f4f 	dsb	sy
 800073e:	603b      	str	r3, [r7, #0]
 8000740:	e7fe      	b.n	8000740 <vPortValidateInterruptPriority+0x5c>
	}
 8000742:	bf00      	nop
 8000744:	3714      	adds	r7, #20
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop
 8000750:	e000e3f0 	.word	0xe000e3f0
 8000754:	20000058 	.word	0x20000058
 8000758:	e000ed0c 	.word	0xe000ed0c
 800075c:	2000005c 	.word	0x2000005c

08000760 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b084      	sub	sp, #16
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
 8000768:	2300      	movs	r3, #0
 800076a:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	f003 0307 	and.w	r3, r3, #7
 8000772:	2b00      	cmp	r3, #0
 8000774:	d004      	beq.n	8000780 <pvPortMalloc+0x20>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	f023 0307 	bic.w	r3, r3, #7
 800077c:	3308      	adds	r3, #8
 800077e:	607b      	str	r3, [r7, #4]
		}
	}
	#endif

	vTaskSuspendAll();
 8000780:	f000 ff32 	bl	80015e8 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
 8000784:	4b18      	ldr	r3, [pc, #96]	; (80007e8 <pvPortMalloc+0x88>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	2b00      	cmp	r3, #0
 800078a:	d105      	bne.n	8000798 <pvPortMalloc+0x38>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 800078c:	4b17      	ldr	r3, [pc, #92]	; (80007ec <pvPortMalloc+0x8c>)
 800078e:	f023 0307 	bic.w	r3, r3, #7
 8000792:	461a      	mov	r2, r3
 8000794:	4b14      	ldr	r3, [pc, #80]	; (80007e8 <pvPortMalloc+0x88>)
 8000796:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8000798:	4b15      	ldr	r3, [pc, #84]	; (80007f0 <pvPortMalloc+0x90>)
 800079a:	681a      	ldr	r2, [r3, #0]
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	4413      	add	r3, r2
 80007a0:	f641 32f7 	movw	r2, #7159	; 0x1bf7
 80007a4:	4293      	cmp	r3, r2
 80007a6:	d813      	bhi.n	80007d0 <pvPortMalloc+0x70>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
 80007a8:	4b11      	ldr	r3, [pc, #68]	; (80007f0 <pvPortMalloc+0x90>)
 80007aa:	681a      	ldr	r2, [r3, #0]
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	441a      	add	r2, r3
 80007b0:	4b0f      	ldr	r3, [pc, #60]	; (80007f0 <pvPortMalloc+0x90>)
 80007b2:	681b      	ldr	r3, [r3, #0]
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 80007b4:	429a      	cmp	r2, r3
 80007b6:	d90b      	bls.n	80007d0 <pvPortMalloc+0x70>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
 80007b8:	4b0b      	ldr	r3, [pc, #44]	; (80007e8 <pvPortMalloc+0x88>)
 80007ba:	681a      	ldr	r2, [r3, #0]
 80007bc:	4b0c      	ldr	r3, [pc, #48]	; (80007f0 <pvPortMalloc+0x90>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4413      	add	r3, r2
 80007c2:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
 80007c4:	4b0a      	ldr	r3, [pc, #40]	; (80007f0 <pvPortMalloc+0x90>)
 80007c6:	681a      	ldr	r2, [r3, #0]
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	4413      	add	r3, r2
 80007cc:	4a08      	ldr	r2, [pc, #32]	; (80007f0 <pvPortMalloc+0x90>)
 80007ce:	6013      	str	r3, [r2, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80007d0:	f000 ff18 	bl	8001604 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d101      	bne.n	80007de <pvPortMalloc+0x7e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 80007da:	f003 f931 	bl	8003a40 <vApplicationMallocFailedHook>
		}
	}
	#endif

	return pvReturn;
 80007de:	68fb      	ldr	r3, [r7, #12]
}
 80007e0:	4618      	mov	r0, r3
 80007e2:	3710      	adds	r7, #16
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	20001c64 	.word	0x20001c64
 80007ec:	20000068 	.word	0x20000068
 80007f0:	20001c60 	.word	0x20001c60

080007f4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80007f4:	b480      	push	{r7}
 80007f6:	b085      	sub	sp, #20
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d009      	beq.n	8000816 <vPortFree+0x22>
 8000802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000806:	f383 8811 	msr	BASEPRI, r3
 800080a:	f3bf 8f6f 	isb	sy
 800080e:	f3bf 8f4f 	dsb	sy
 8000812:	60fb      	str	r3, [r7, #12]
 8000814:	e7fe      	b.n	8000814 <vPortFree+0x20>
}
 8000816:	bf00      	nop
 8000818:	3714      	adds	r7, #20
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr
	...

08000824 <xPortGetFreeHeapSize>:
	xNextFreeByte = ( size_t ) 0;
}
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
	return ( configADJUSTED_HEAP_SIZE - xNextFreeByte );
 8000828:	4b04      	ldr	r3, [pc, #16]	; (800083c <xPortGetFreeHeapSize+0x18>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	f5c3 53df 	rsb	r3, r3, #7136	; 0x1be0
 8000830:	3318      	adds	r3, #24
}
 8000832:	4618      	mov	r0, r3
 8000834:	46bd      	mov	sp, r7
 8000836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083a:	4770      	bx	lr
 800083c:	20001c60 	.word	0x20001c60

08000840 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b084      	sub	sp, #16
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
 8000848:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800084e:	68fb      	ldr	r3, [r7, #12]
 8000850:	2b00      	cmp	r3, #0
 8000852:	d109      	bne.n	8000868 <xQueueGenericReset+0x28>
 8000854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000858:	f383 8811 	msr	BASEPRI, r3
 800085c:	f3bf 8f6f 	isb	sy
 8000860:	f3bf 8f4f 	dsb	sy
 8000864:	60bb      	str	r3, [r7, #8]
 8000866:	e7fe      	b.n	8000866 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8000868:	f7ff fe6a 	bl	8000540 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	681a      	ldr	r2, [r3, #0]
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000874:	68f9      	ldr	r1, [r7, #12]
 8000876:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000878:	fb01 f303 	mul.w	r3, r1, r3
 800087c:	441a      	add	r2, r3
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	2200      	movs	r2, #0
 8000886:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	681a      	ldr	r2, [r3, #0]
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	681a      	ldr	r2, [r3, #0]
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000898:	3b01      	subs	r3, #1
 800089a:	68f9      	ldr	r1, [r7, #12]
 800089c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800089e:	fb01 f303 	mul.w	r3, r1, r3
 80008a2:	441a      	add	r2, r3
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	22ff      	movs	r2, #255	; 0xff
 80008ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	22ff      	movs	r2, #255	; 0xff
 80008b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80008b8:	683b      	ldr	r3, [r7, #0]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d114      	bne.n	80008e8 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	691b      	ldr	r3, [r3, #16]
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d01a      	beq.n	80008fc <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80008c6:	68fb      	ldr	r3, [r7, #12]
 80008c8:	3310      	adds	r3, #16
 80008ca:	4618      	mov	r0, r3
 80008cc:	f001 f8d8 	bl	8001a80 <xTaskRemoveFromEventList>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d012      	beq.n	80008fc <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80008d6:	4b0d      	ldr	r3, [pc, #52]	; (800090c <xQueueGenericReset+0xcc>)
 80008d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80008dc:	601a      	str	r2, [r3, #0]
 80008de:	f3bf 8f4f 	dsb	sy
 80008e2:	f3bf 8f6f 	isb	sy
 80008e6:	e009      	b.n	80008fc <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	3310      	adds	r3, #16
 80008ec:	4618      	mov	r0, r3
 80008ee:	f7ff fc6f 	bl	80001d0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	3324      	adds	r3, #36	; 0x24
 80008f6:	4618      	mov	r0, r3
 80008f8:	f7ff fc6a 	bl	80001d0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80008fc:	f7ff fe4e 	bl	800059c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8000900:	2301      	movs	r3, #1
}
 8000902:	4618      	mov	r0, r3
 8000904:	3710      	adds	r7, #16
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	e000ed04 	.word	0xe000ed04

08000910 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8000910:	b580      	push	{r7, lr}
 8000912:	b08a      	sub	sp, #40	; 0x28
 8000914:	af02      	add	r7, sp, #8
 8000916:	60f8      	str	r0, [r7, #12]
 8000918:	60b9      	str	r1, [r7, #8]
 800091a:	4613      	mov	r3, r2
 800091c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	2b00      	cmp	r3, #0
 8000922:	d109      	bne.n	8000938 <xQueueGenericCreate+0x28>
 8000924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000928:	f383 8811 	msr	BASEPRI, r3
 800092c:	f3bf 8f6f 	isb	sy
 8000930:	f3bf 8f4f 	dsb	sy
 8000934:	613b      	str	r3, [r7, #16]
 8000936:	e7fe      	b.n	8000936 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8000938:	68bb      	ldr	r3, [r7, #8]
 800093a:	2b00      	cmp	r3, #0
 800093c:	d102      	bne.n	8000944 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800093e:	2300      	movs	r3, #0
 8000940:	61fb      	str	r3, [r7, #28]
 8000942:	e004      	b.n	800094e <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	68ba      	ldr	r2, [r7, #8]
 8000948:	fb02 f303 	mul.w	r3, r2, r3
 800094c:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800094e:	69fb      	ldr	r3, [r7, #28]
 8000950:	3348      	adds	r3, #72	; 0x48
 8000952:	4618      	mov	r0, r3
 8000954:	f7ff ff04 	bl	8000760 <pvPortMalloc>
 8000958:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800095a:	69bb      	ldr	r3, [r7, #24]
 800095c:	2b00      	cmp	r3, #0
 800095e:	d00b      	beq.n	8000978 <xQueueGenericCreate+0x68>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8000960:	69bb      	ldr	r3, [r7, #24]
 8000962:	3348      	adds	r3, #72	; 0x48
 8000964:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000966:	79fa      	ldrb	r2, [r7, #7]
 8000968:	69bb      	ldr	r3, [r7, #24]
 800096a:	9300      	str	r3, [sp, #0]
 800096c:	4613      	mov	r3, r2
 800096e:	697a      	ldr	r2, [r7, #20]
 8000970:	68b9      	ldr	r1, [r7, #8]
 8000972:	68f8      	ldr	r0, [r7, #12]
 8000974:	f000 f805 	bl	8000982 <prvInitialiseNewQueue>
		}

		return pxNewQueue;
 8000978:	69bb      	ldr	r3, [r7, #24]
	}
 800097a:	4618      	mov	r0, r3
 800097c:	3720      	adds	r7, #32
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}

08000982 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8000982:	b580      	push	{r7, lr}
 8000984:	b084      	sub	sp, #16
 8000986:	af00      	add	r7, sp, #0
 8000988:	60f8      	str	r0, [r7, #12]
 800098a:	60b9      	str	r1, [r7, #8]
 800098c:	607a      	str	r2, [r7, #4]
 800098e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8000990:	68bb      	ldr	r3, [r7, #8]
 8000992:	2b00      	cmp	r3, #0
 8000994:	d103      	bne.n	800099e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000996:	69bb      	ldr	r3, [r7, #24]
 8000998:	69ba      	ldr	r2, [r7, #24]
 800099a:	601a      	str	r2, [r3, #0]
 800099c:	e002      	b.n	80009a4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800099e:	69bb      	ldr	r3, [r7, #24]
 80009a0:	687a      	ldr	r2, [r7, #4]
 80009a2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80009a4:	69bb      	ldr	r3, [r7, #24]
 80009a6:	68fa      	ldr	r2, [r7, #12]
 80009a8:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80009aa:	69bb      	ldr	r3, [r7, #24]
 80009ac:	68ba      	ldr	r2, [r7, #8]
 80009ae:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80009b0:	2101      	movs	r1, #1
 80009b2:	69b8      	ldr	r0, [r7, #24]
 80009b4:	f7ff ff44 	bl	8000840 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80009b8:	bf00      	nop
 80009ba:	3710      	adds	r7, #16
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}

080009c0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b08e      	sub	sp, #56	; 0x38
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	60f8      	str	r0, [r7, #12]
 80009c8:	60b9      	str	r1, [r7, #8]
 80009ca:	607a      	str	r2, [r7, #4]
 80009cc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80009ce:	2300      	movs	r3, #0
 80009d0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80009d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d109      	bne.n	80009f0 <xQueueGenericSend+0x30>
 80009dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80009e0:	f383 8811 	msr	BASEPRI, r3
 80009e4:	f3bf 8f6f 	isb	sy
 80009e8:	f3bf 8f4f 	dsb	sy
 80009ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80009ee:	e7fe      	b.n	80009ee <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80009f0:	68bb      	ldr	r3, [r7, #8]
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d103      	bne.n	80009fe <xQueueGenericSend+0x3e>
 80009f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d101      	bne.n	8000a02 <xQueueGenericSend+0x42>
 80009fe:	2301      	movs	r3, #1
 8000a00:	e000      	b.n	8000a04 <xQueueGenericSend+0x44>
 8000a02:	2300      	movs	r3, #0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d109      	bne.n	8000a1c <xQueueGenericSend+0x5c>
 8000a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a0c:	f383 8811 	msr	BASEPRI, r3
 8000a10:	f3bf 8f6f 	isb	sy
 8000a14:	f3bf 8f4f 	dsb	sy
 8000a18:	627b      	str	r3, [r7, #36]	; 0x24
 8000a1a:	e7fe      	b.n	8000a1a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	2b02      	cmp	r3, #2
 8000a20:	d103      	bne.n	8000a2a <xQueueGenericSend+0x6a>
 8000a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a26:	2b01      	cmp	r3, #1
 8000a28:	d101      	bne.n	8000a2e <xQueueGenericSend+0x6e>
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	e000      	b.n	8000a30 <xQueueGenericSend+0x70>
 8000a2e:	2300      	movs	r3, #0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d109      	bne.n	8000a48 <xQueueGenericSend+0x88>
 8000a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a38:	f383 8811 	msr	BASEPRI, r3
 8000a3c:	f3bf 8f6f 	isb	sy
 8000a40:	f3bf 8f4f 	dsb	sy
 8000a44:	623b      	str	r3, [r7, #32]
 8000a46:	e7fe      	b.n	8000a46 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000a48:	f001 f9d6 	bl	8001df8 <xTaskGetSchedulerState>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d102      	bne.n	8000a58 <xQueueGenericSend+0x98>
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d101      	bne.n	8000a5c <xQueueGenericSend+0x9c>
 8000a58:	2301      	movs	r3, #1
 8000a5a:	e000      	b.n	8000a5e <xQueueGenericSend+0x9e>
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d109      	bne.n	8000a76 <xQueueGenericSend+0xb6>
 8000a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a66:	f383 8811 	msr	BASEPRI, r3
 8000a6a:	f3bf 8f6f 	isb	sy
 8000a6e:	f3bf 8f4f 	dsb	sy
 8000a72:	61fb      	str	r3, [r7, #28]
 8000a74:	e7fe      	b.n	8000a74 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8000a76:	f7ff fd63 	bl	8000540 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a82:	429a      	cmp	r2, r3
 8000a84:	d302      	bcc.n	8000a8c <xQueueGenericSend+0xcc>
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	2b02      	cmp	r3, #2
 8000a8a:	d129      	bne.n	8000ae0 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000a8c:	683a      	ldr	r2, [r7, #0]
 8000a8e:	68b9      	ldr	r1, [r7, #8]
 8000a90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000a92:	f000 fabf 	bl	8001014 <prvCopyDataToQueue>
 8000a96:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d010      	beq.n	8000ac2 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000aa2:	3324      	adds	r3, #36	; 0x24
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f000 ffeb 	bl	8001a80 <xTaskRemoveFromEventList>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d013      	beq.n	8000ad8 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8000ab0:	4b3f      	ldr	r3, [pc, #252]	; (8000bb0 <xQueueGenericSend+0x1f0>)
 8000ab2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000ab6:	601a      	str	r2, [r3, #0]
 8000ab8:	f3bf 8f4f 	dsb	sy
 8000abc:	f3bf 8f6f 	isb	sy
 8000ac0:	e00a      	b.n	8000ad8 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8000ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d007      	beq.n	8000ad8 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8000ac8:	4b39      	ldr	r3, [pc, #228]	; (8000bb0 <xQueueGenericSend+0x1f0>)
 8000aca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000ace:	601a      	str	r2, [r3, #0]
 8000ad0:	f3bf 8f4f 	dsb	sy
 8000ad4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8000ad8:	f7ff fd60 	bl	800059c <vPortExitCritical>
				return pdPASS;
 8000adc:	2301      	movs	r3, #1
 8000ade:	e063      	b.n	8000ba8 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d103      	bne.n	8000aee <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8000ae6:	f7ff fd59 	bl	800059c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8000aea:	2300      	movs	r3, #0
 8000aec:	e05c      	b.n	8000ba8 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8000aee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d106      	bne.n	8000b02 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8000af4:	f107 0314 	add.w	r3, r7, #20
 8000af8:	4618      	mov	r0, r3
 8000afa:	f001 f823 	bl	8001b44 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8000afe:	2301      	movs	r3, #1
 8000b00:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8000b02:	f7ff fd4b 	bl	800059c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8000b06:	f000 fd6f 	bl	80015e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8000b0a:	f7ff fd19 	bl	8000540 <vPortEnterCritical>
 8000b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b10:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000b14:	b25b      	sxtb	r3, r3
 8000b16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b1a:	d103      	bne.n	8000b24 <xQueueGenericSend+0x164>
 8000b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b1e:	2200      	movs	r2, #0
 8000b20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b26:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000b2a:	b25b      	sxtb	r3, r3
 8000b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b30:	d103      	bne.n	8000b3a <xQueueGenericSend+0x17a>
 8000b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b34:	2200      	movs	r2, #0
 8000b36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000b3a:	f7ff fd2f 	bl	800059c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000b3e:	1d3a      	adds	r2, r7, #4
 8000b40:	f107 0314 	add.w	r3, r7, #20
 8000b44:	4611      	mov	r1, r2
 8000b46:	4618      	mov	r0, r3
 8000b48:	f001 f820 	bl	8001b8c <xTaskCheckForTimeOut>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d124      	bne.n	8000b9c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8000b52:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000b54:	f000 fb56 	bl	8001204 <prvIsQueueFull>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d018      	beq.n	8000b90 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8000b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b60:	3310      	adds	r3, #16
 8000b62:	687a      	ldr	r2, [r7, #4]
 8000b64:	4611      	mov	r1, r2
 8000b66:	4618      	mov	r0, r3
 8000b68:	f000 ff3c 	bl	80019e4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8000b6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000b6e:	f000 fae1 	bl	8001134 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8000b72:	f000 fd47 	bl	8001604 <xTaskResumeAll>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	f47f af7c 	bne.w	8000a76 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8000b7e:	4b0c      	ldr	r3, [pc, #48]	; (8000bb0 <xQueueGenericSend+0x1f0>)
 8000b80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000b84:	601a      	str	r2, [r3, #0]
 8000b86:	f3bf 8f4f 	dsb	sy
 8000b8a:	f3bf 8f6f 	isb	sy
 8000b8e:	e772      	b.n	8000a76 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8000b90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000b92:	f000 facf 	bl	8001134 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8000b96:	f000 fd35 	bl	8001604 <xTaskResumeAll>
 8000b9a:	e76c      	b.n	8000a76 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8000b9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000b9e:	f000 fac9 	bl	8001134 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8000ba2:	f000 fd2f 	bl	8001604 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8000ba6:	2300      	movs	r3, #0
		}
	}
}
 8000ba8:	4618      	mov	r0, r3
 8000baa:	3738      	adds	r7, #56	; 0x38
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	e000ed04 	.word	0xe000ed04

08000bb4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b08e      	sub	sp, #56	; 0x38
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	60f8      	str	r0, [r7, #12]
 8000bbc:	60b9      	str	r1, [r7, #8]
 8000bbe:	607a      	str	r2, [r7, #4]
 8000bc0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8000bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d109      	bne.n	8000be0 <xQueueGenericSendFromISR+0x2c>
 8000bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000bd0:	f383 8811 	msr	BASEPRI, r3
 8000bd4:	f3bf 8f6f 	isb	sy
 8000bd8:	f3bf 8f4f 	dsb	sy
 8000bdc:	627b      	str	r3, [r7, #36]	; 0x24
 8000bde:	e7fe      	b.n	8000bde <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000be0:	68bb      	ldr	r3, [r7, #8]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d103      	bne.n	8000bee <xQueueGenericSendFromISR+0x3a>
 8000be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d101      	bne.n	8000bf2 <xQueueGenericSendFromISR+0x3e>
 8000bee:	2301      	movs	r3, #1
 8000bf0:	e000      	b.n	8000bf4 <xQueueGenericSendFromISR+0x40>
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d109      	bne.n	8000c0c <xQueueGenericSendFromISR+0x58>
 8000bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000bfc:	f383 8811 	msr	BASEPRI, r3
 8000c00:	f3bf 8f6f 	isb	sy
 8000c04:	f3bf 8f4f 	dsb	sy
 8000c08:	623b      	str	r3, [r7, #32]
 8000c0a:	e7fe      	b.n	8000c0a <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	2b02      	cmp	r3, #2
 8000c10:	d103      	bne.n	8000c1a <xQueueGenericSendFromISR+0x66>
 8000c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c16:	2b01      	cmp	r3, #1
 8000c18:	d101      	bne.n	8000c1e <xQueueGenericSendFromISR+0x6a>
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	e000      	b.n	8000c20 <xQueueGenericSendFromISR+0x6c>
 8000c1e:	2300      	movs	r3, #0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d109      	bne.n	8000c38 <xQueueGenericSendFromISR+0x84>
 8000c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c28:	f383 8811 	msr	BASEPRI, r3
 8000c2c:	f3bf 8f6f 	isb	sy
 8000c30:	f3bf 8f4f 	dsb	sy
 8000c34:	61fb      	str	r3, [r7, #28]
 8000c36:	e7fe      	b.n	8000c36 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8000c38:	f7ff fd54 	bl	80006e4 <vPortValidateInterruptPriority>
	__asm volatile
 8000c3c:	f3ef 8211 	mrs	r2, BASEPRI
 8000c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c44:	f383 8811 	msr	BASEPRI, r3
 8000c48:	f3bf 8f6f 	isb	sy
 8000c4c:	f3bf 8f4f 	dsb	sy
 8000c50:	61ba      	str	r2, [r7, #24]
 8000c52:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8000c54:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8000c56:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c60:	429a      	cmp	r2, r3
 8000c62:	d302      	bcc.n	8000c6a <xQueueGenericSendFromISR+0xb6>
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	2b02      	cmp	r3, #2
 8000c68:	d12c      	bne.n	8000cc4 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8000c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c6c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000c70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000c74:	683a      	ldr	r2, [r7, #0]
 8000c76:	68b9      	ldr	r1, [r7, #8]
 8000c78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000c7a:	f000 f9cb 	bl	8001014 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8000c7e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8000c82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c86:	d112      	bne.n	8000cae <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d016      	beq.n	8000cbe <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c92:	3324      	adds	r3, #36	; 0x24
 8000c94:	4618      	mov	r0, r3
 8000c96:	f000 fef3 	bl	8001a80 <xTaskRemoveFromEventList>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d00e      	beq.n	8000cbe <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d00b      	beq.n	8000cbe <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	2201      	movs	r2, #1
 8000caa:	601a      	str	r2, [r3, #0]
 8000cac:	e007      	b.n	8000cbe <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8000cae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000cb2:	3301      	adds	r3, #1
 8000cb4:	b2db      	uxtb	r3, r3
 8000cb6:	b25a      	sxtb	r2, r3
 8000cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8000cc2:	e001      	b.n	8000cc8 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	637b      	str	r3, [r7, #52]	; 0x34
 8000cc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cca:	613b      	str	r3, [r7, #16]
	__asm volatile
 8000ccc:	693b      	ldr	r3, [r7, #16]
 8000cce:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8000cd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	3738      	adds	r7, #56	; 0x38
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}

08000cdc <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b08e      	sub	sp, #56	; 0x38
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
 8000ce4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8000cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d109      	bne.n	8000d04 <xQueueGiveFromISR+0x28>
	__asm volatile
 8000cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000cf4:	f383 8811 	msr	BASEPRI, r3
 8000cf8:	f3bf 8f6f 	isb	sy
 8000cfc:	f3bf 8f4f 	dsb	sy
 8000d00:	623b      	str	r3, [r7, #32]
 8000d02:	e7fe      	b.n	8000d02 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8000d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d009      	beq.n	8000d20 <xQueueGiveFromISR+0x44>
 8000d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d10:	f383 8811 	msr	BASEPRI, r3
 8000d14:	f3bf 8f6f 	isb	sy
 8000d18:	f3bf 8f4f 	dsb	sy
 8000d1c:	61fb      	str	r3, [r7, #28]
 8000d1e:	e7fe      	b.n	8000d1e <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8000d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d103      	bne.n	8000d30 <xQueueGiveFromISR+0x54>
 8000d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d101      	bne.n	8000d34 <xQueueGiveFromISR+0x58>
 8000d30:	2301      	movs	r3, #1
 8000d32:	e000      	b.n	8000d36 <xQueueGiveFromISR+0x5a>
 8000d34:	2300      	movs	r3, #0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d109      	bne.n	8000d4e <xQueueGiveFromISR+0x72>
 8000d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d3e:	f383 8811 	msr	BASEPRI, r3
 8000d42:	f3bf 8f6f 	isb	sy
 8000d46:	f3bf 8f4f 	dsb	sy
 8000d4a:	61bb      	str	r3, [r7, #24]
 8000d4c:	e7fe      	b.n	8000d4c <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8000d4e:	f7ff fcc9 	bl	80006e4 <vPortValidateInterruptPriority>
	__asm volatile
 8000d52:	f3ef 8211 	mrs	r2, BASEPRI
 8000d56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d5a:	f383 8811 	msr	BASEPRI, r3
 8000d5e:	f3bf 8f6f 	isb	sy
 8000d62:	f3bf 8f4f 	dsb	sy
 8000d66:	617a      	str	r2, [r7, #20]
 8000d68:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8000d6a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8000d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d72:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8000d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d7a:	429a      	cmp	r2, r3
 8000d7c:	d92b      	bls.n	8000dd6 <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8000d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d80:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000d84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8000d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d8a:	1c5a      	adds	r2, r3, #1
 8000d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d8e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8000d90:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8000d94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d98:	d112      	bne.n	8000dc0 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d016      	beq.n	8000dd0 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000da4:	3324      	adds	r3, #36	; 0x24
 8000da6:	4618      	mov	r0, r3
 8000da8:	f000 fe6a 	bl	8001a80 <xTaskRemoveFromEventList>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d00e      	beq.n	8000dd0 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d00b      	beq.n	8000dd0 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	2201      	movs	r2, #1
 8000dbc:	601a      	str	r2, [r3, #0]
 8000dbe:	e007      	b.n	8000dd0 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8000dc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000dc4:	3301      	adds	r3, #1
 8000dc6:	b2db      	uxtb	r3, r3
 8000dc8:	b25a      	sxtb	r2, r3
 8000dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000dcc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	637b      	str	r3, [r7, #52]	; 0x34
 8000dd4:	e001      	b.n	8000dda <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	637b      	str	r3, [r7, #52]	; 0x34
 8000dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ddc:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8000de4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3738      	adds	r7, #56	; 0x38
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
	...

08000df0 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b08e      	sub	sp, #56	; 0x38
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	60f8      	str	r0, [r7, #12]
 8000df8:	60b9      	str	r1, [r7, #8]
 8000dfa:	607a      	str	r2, [r7, #4]
 8000dfc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8000e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d109      	bne.n	8000e20 <xQueueGenericReceive+0x30>
	__asm volatile
 8000e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e10:	f383 8811 	msr	BASEPRI, r3
 8000e14:	f3bf 8f6f 	isb	sy
 8000e18:	f3bf 8f4f 	dsb	sy
 8000e1c:	627b      	str	r3, [r7, #36]	; 0x24
 8000e1e:	e7fe      	b.n	8000e1e <xQueueGenericReceive+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000e20:	68bb      	ldr	r3, [r7, #8]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d103      	bne.n	8000e2e <xQueueGenericReceive+0x3e>
 8000e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d101      	bne.n	8000e32 <xQueueGenericReceive+0x42>
 8000e2e:	2301      	movs	r3, #1
 8000e30:	e000      	b.n	8000e34 <xQueueGenericReceive+0x44>
 8000e32:	2300      	movs	r3, #0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d109      	bne.n	8000e4c <xQueueGenericReceive+0x5c>
 8000e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e3c:	f383 8811 	msr	BASEPRI, r3
 8000e40:	f3bf 8f6f 	isb	sy
 8000e44:	f3bf 8f4f 	dsb	sy
 8000e48:	623b      	str	r3, [r7, #32]
 8000e4a:	e7fe      	b.n	8000e4a <xQueueGenericReceive+0x5a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000e4c:	f000 ffd4 	bl	8001df8 <xTaskGetSchedulerState>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d102      	bne.n	8000e5c <xQueueGenericReceive+0x6c>
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d101      	bne.n	8000e60 <xQueueGenericReceive+0x70>
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	e000      	b.n	8000e62 <xQueueGenericReceive+0x72>
 8000e60:	2300      	movs	r3, #0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d109      	bne.n	8000e7a <xQueueGenericReceive+0x8a>
 8000e66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e6a:	f383 8811 	msr	BASEPRI, r3
 8000e6e:	f3bf 8f6f 	isb	sy
 8000e72:	f3bf 8f4f 	dsb	sy
 8000e76:	61fb      	str	r3, [r7, #28]
 8000e78:	e7fe      	b.n	8000e78 <xQueueGenericReceive+0x88>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8000e7a:	f7ff fb61 	bl	8000540 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e82:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d046      	beq.n	8000f18 <xQueueGenericReceive+0x128>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 8000e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e8c:	68db      	ldr	r3, [r3, #12]
 8000e8e:	62bb      	str	r3, [r7, #40]	; 0x28

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8000e90:	68b9      	ldr	r1, [r7, #8]
 8000e92:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000e94:	f000 f928 	bl	80010e8 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d121      	bne.n	8000ee2 <xQueueGenericReceive+0xf2>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8000e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ea0:	1e5a      	subs	r2, r3, #1
 8000ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ea4:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d104      	bne.n	8000eb8 <xQueueGenericReceive+0xc8>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8000eae:	f001 f8bb 	bl	8002028 <pvTaskIncrementMutexHeldCount>
 8000eb2:	4602      	mov	r2, r0
 8000eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000eb6:	605a      	str	r2, [r3, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000eba:	691b      	ldr	r3, [r3, #16]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d027      	beq.n	8000f10 <xQueueGenericReceive+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ec2:	3310      	adds	r3, #16
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f000 fddb 	bl	8001a80 <xTaskRemoveFromEventList>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d01f      	beq.n	8000f10 <xQueueGenericReceive+0x120>
						{
							queueYIELD_IF_USING_PREEMPTION();
 8000ed0:	4b4f      	ldr	r3, [pc, #316]	; (8001010 <xQueueGenericReceive+0x220>)
 8000ed2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000ed6:	601a      	str	r2, [r3, #0]
 8000ed8:	f3bf 8f4f 	dsb	sy
 8000edc:	f3bf 8f6f 	isb	sy
 8000ee0:	e016      	b.n	8000f10 <xQueueGenericReceive+0x120>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 8000ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ee4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000ee6:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d00f      	beq.n	8000f10 <xQueueGenericReceive+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ef2:	3324      	adds	r3, #36	; 0x24
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f000 fdc3 	bl	8001a80 <xTaskRemoveFromEventList>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d007      	beq.n	8000f10 <xQueueGenericReceive+0x120>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
 8000f00:	4b43      	ldr	r3, [pc, #268]	; (8001010 <xQueueGenericReceive+0x220>)
 8000f02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000f06:	601a      	str	r2, [r3, #0]
 8000f08:	f3bf 8f4f 	dsb	sy
 8000f0c:	f3bf 8f6f 	isb	sy
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
 8000f10:	f7ff fb44 	bl	800059c <vPortExitCritical>
				return pdPASS;
 8000f14:	2301      	movs	r3, #1
 8000f16:	e077      	b.n	8001008 <xQueueGenericReceive+0x218>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d103      	bne.n	8000f26 <xQueueGenericReceive+0x136>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8000f1e:	f7ff fb3d 	bl	800059c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8000f22:	2300      	movs	r3, #0
 8000f24:	e070      	b.n	8001008 <xQueueGenericReceive+0x218>
				}
				else if( xEntryTimeSet == pdFALSE )
 8000f26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d106      	bne.n	8000f3a <xQueueGenericReceive+0x14a>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8000f2c:	f107 0314 	add.w	r3, r7, #20
 8000f30:	4618      	mov	r0, r3
 8000f32:	f000 fe07 	bl	8001b44 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8000f36:	2301      	movs	r3, #1
 8000f38:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8000f3a:	f7ff fb2f 	bl	800059c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8000f3e:	f000 fb53 	bl	80015e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8000f42:	f7ff fafd 	bl	8000540 <vPortEnterCritical>
 8000f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f48:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000f4c:	b25b      	sxtb	r3, r3
 8000f4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f52:	d103      	bne.n	8000f5c <xQueueGenericReceive+0x16c>
 8000f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f56:	2200      	movs	r2, #0
 8000f58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f5e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000f62:	b25b      	sxtb	r3, r3
 8000f64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f68:	d103      	bne.n	8000f72 <xQueueGenericReceive+0x182>
 8000f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000f72:	f7ff fb13 	bl	800059c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000f76:	1d3a      	adds	r2, r7, #4
 8000f78:	f107 0314 	add.w	r3, r7, #20
 8000f7c:	4611      	mov	r1, r2
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f000 fe04 	bl	8001b8c <xTaskCheckForTimeOut>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d131      	bne.n	8000fee <xQueueGenericReceive+0x1fe>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000f8a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000f8c:	f000 f924 	bl	80011d8 <prvIsQueueEmpty>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d025      	beq.n	8000fe2 <xQueueGenericReceive+0x1f2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d108      	bne.n	8000fb0 <xQueueGenericReceive+0x1c0>
					{
						taskENTER_CRITICAL();
 8000f9e:	f7ff facf 	bl	8000540 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8000fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f000 ff44 	bl	8001e34 <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
 8000fac:	f7ff faf6 	bl	800059c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fb2:	3324      	adds	r3, #36	; 0x24
 8000fb4:	687a      	ldr	r2, [r7, #4]
 8000fb6:	4611      	mov	r1, r2
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f000 fd13 	bl	80019e4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8000fbe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000fc0:	f000 f8b8 	bl	8001134 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8000fc4:	f000 fb1e 	bl	8001604 <xTaskResumeAll>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	f47f af55 	bne.w	8000e7a <xQueueGenericReceive+0x8a>
				{
					portYIELD_WITHIN_API();
 8000fd0:	4b0f      	ldr	r3, [pc, #60]	; (8001010 <xQueueGenericReceive+0x220>)
 8000fd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000fd6:	601a      	str	r2, [r3, #0]
 8000fd8:	f3bf 8f4f 	dsb	sy
 8000fdc:	f3bf 8f6f 	isb	sy
 8000fe0:	e74b      	b.n	8000e7a <xQueueGenericReceive+0x8a>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8000fe2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000fe4:	f000 f8a6 	bl	8001134 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8000fe8:	f000 fb0c 	bl	8001604 <xTaskResumeAll>
 8000fec:	e745      	b.n	8000e7a <xQueueGenericReceive+0x8a>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 8000fee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000ff0:	f000 f8a0 	bl	8001134 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8000ff4:	f000 fb06 	bl	8001604 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000ff8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000ffa:	f000 f8ed 	bl	80011d8 <prvIsQueueEmpty>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	f43f af3a 	beq.w	8000e7a <xQueueGenericReceive+0x8a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8001006:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8001008:	4618      	mov	r0, r3
 800100a:	3738      	adds	r7, #56	; 0x38
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	e000ed04 	.word	0xe000ed04

08001014 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b086      	sub	sp, #24
 8001018:	af00      	add	r7, sp, #0
 800101a:	60f8      	str	r0, [r7, #12]
 800101c:	60b9      	str	r1, [r7, #8]
 800101e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8001020:	2300      	movs	r3, #0
 8001022:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001028:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102e:	2b00      	cmp	r3, #0
 8001030:	d10d      	bne.n	800104e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d14d      	bne.n	80010d6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	4618      	mov	r0, r3
 8001040:	f000 ff6e 	bl	8001f20 <xTaskPriorityDisinherit>
 8001044:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	2200      	movs	r2, #0
 800104a:	605a      	str	r2, [r3, #4]
 800104c:	e043      	b.n	80010d6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d119      	bne.n	8001088 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	6898      	ldr	r0, [r3, #8]
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105c:	461a      	mov	r2, r3
 800105e:	68b9      	ldr	r1, [r7, #8]
 8001060:	f002 fe20 	bl	8003ca4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	689a      	ldr	r2, [r3, #8]
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106c:	441a      	add	r2, r3
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	689a      	ldr	r2, [r3, #8]
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	429a      	cmp	r2, r3
 800107c:	d32b      	bcc.n	80010d6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	681a      	ldr	r2, [r3, #0]
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	609a      	str	r2, [r3, #8]
 8001086:	e026      	b.n	80010d6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	68d8      	ldr	r0, [r3, #12]
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001090:	461a      	mov	r2, r3
 8001092:	68b9      	ldr	r1, [r7, #8]
 8001094:	f002 fe06 	bl	8003ca4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	68da      	ldr	r2, [r3, #12]
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a0:	425b      	negs	r3, r3
 80010a2:	441a      	add	r2, r3
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	68da      	ldr	r2, [r3, #12]
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	429a      	cmp	r2, r3
 80010b2:	d207      	bcs.n	80010c4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	685a      	ldr	r2, [r3, #4]
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010bc:	425b      	negs	r3, r3
 80010be:	441a      	add	r2, r3
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2b02      	cmp	r3, #2
 80010c8:	d105      	bne.n	80010d6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80010ca:	693b      	ldr	r3, [r7, #16]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d002      	beq.n	80010d6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80010d0:	693b      	ldr	r3, [r7, #16]
 80010d2:	3b01      	subs	r3, #1
 80010d4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 80010d6:	693b      	ldr	r3, [r7, #16]
 80010d8:	1c5a      	adds	r2, r3, #1
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80010de:	697b      	ldr	r3, [r7, #20]
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	3718      	adds	r7, #24
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}

080010e8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d018      	beq.n	800112c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	68da      	ldr	r2, [r3, #12]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001102:	441a      	add	r2, r3
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	68da      	ldr	r2, [r3, #12]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	429a      	cmp	r2, r3
 8001112:	d303      	bcc.n	800111c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	68d9      	ldr	r1, [r3, #12]
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001124:	461a      	mov	r2, r3
 8001126:	6838      	ldr	r0, [r7, #0]
 8001128:	f002 fdbc 	bl	8003ca4 <memcpy>
	}
}
 800112c:	bf00      	nop
 800112e:	3708      	adds	r7, #8
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}

08001134 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800113c:	f7ff fa00 	bl	8000540 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001146:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001148:	e011      	b.n	800116e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800114e:	2b00      	cmp	r3, #0
 8001150:	d012      	beq.n	8001178 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	3324      	adds	r3, #36	; 0x24
 8001156:	4618      	mov	r0, r3
 8001158:	f000 fc92 	bl	8001a80 <xTaskRemoveFromEventList>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8001162:	f000 fd71 	bl	8001c48 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8001166:	7bfb      	ldrb	r3, [r7, #15]
 8001168:	3b01      	subs	r3, #1
 800116a:	b2db      	uxtb	r3, r3
 800116c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800116e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001172:	2b00      	cmp	r3, #0
 8001174:	dce9      	bgt.n	800114a <prvUnlockQueue+0x16>
 8001176:	e000      	b.n	800117a <prvUnlockQueue+0x46>
					break;
 8001178:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	22ff      	movs	r2, #255	; 0xff
 800117e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8001182:	f7ff fa0b 	bl	800059c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8001186:	f7ff f9db 	bl	8000540 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001190:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001192:	e011      	b.n	80011b8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	691b      	ldr	r3, [r3, #16]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d012      	beq.n	80011c2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	3310      	adds	r3, #16
 80011a0:	4618      	mov	r0, r3
 80011a2:	f000 fc6d 	bl	8001a80 <xTaskRemoveFromEventList>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80011ac:	f000 fd4c 	bl	8001c48 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80011b0:	7bbb      	ldrb	r3, [r7, #14]
 80011b2:	3b01      	subs	r3, #1
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80011b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	dce9      	bgt.n	8001194 <prvUnlockQueue+0x60>
 80011c0:	e000      	b.n	80011c4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80011c2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	22ff      	movs	r2, #255	; 0xff
 80011c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80011cc:	f7ff f9e6 	bl	800059c <vPortExitCritical>
}
 80011d0:	bf00      	nop
 80011d2:	3710      	adds	r7, #16
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}

080011d8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b084      	sub	sp, #16
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80011e0:	f7ff f9ae 	bl	8000540 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d102      	bne.n	80011f2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80011ec:	2301      	movs	r3, #1
 80011ee:	60fb      	str	r3, [r7, #12]
 80011f0:	e001      	b.n	80011f6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80011f2:	2300      	movs	r3, #0
 80011f4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80011f6:	f7ff f9d1 	bl	800059c <vPortExitCritical>

	return xReturn;
 80011fa:	68fb      	ldr	r3, [r7, #12]
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	3710      	adds	r7, #16
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}

08001204 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b084      	sub	sp, #16
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800120c:	f7ff f998 	bl	8000540 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001218:	429a      	cmp	r2, r3
 800121a:	d102      	bne.n	8001222 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800121c:	2301      	movs	r3, #1
 800121e:	60fb      	str	r3, [r7, #12]
 8001220:	e001      	b.n	8001226 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8001222:	2300      	movs	r3, #0
 8001224:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8001226:	f7ff f9b9 	bl	800059c <vPortExitCritical>

	return xReturn;
 800122a:	68fb      	ldr	r3, [r7, #12]
}
 800122c:	4618      	mov	r0, r3
 800122e:	3710      	adds	r7, #16
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}

08001234 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8001234:	b480      	push	{r7}
 8001236:	b085      	sub	sp, #20
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
 800123c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800123e:	2300      	movs	r3, #0
 8001240:	60fb      	str	r3, [r7, #12]
 8001242:	e014      	b.n	800126e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8001244:	4a0e      	ldr	r2, [pc, #56]	; (8001280 <vQueueAddToRegistry+0x4c>)
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d10b      	bne.n	8001268 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8001250:	490b      	ldr	r1, [pc, #44]	; (8001280 <vQueueAddToRegistry+0x4c>)
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	683a      	ldr	r2, [r7, #0]
 8001256:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800125a:	4a09      	ldr	r2, [pc, #36]	; (8001280 <vQueueAddToRegistry+0x4c>)
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	00db      	lsls	r3, r3, #3
 8001260:	4413      	add	r3, r2
 8001262:	687a      	ldr	r2, [r7, #4]
 8001264:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8001266:	e005      	b.n	8001274 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	3301      	adds	r3, #1
 800126c:	60fb      	str	r3, [r7, #12]
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	2b07      	cmp	r3, #7
 8001272:	d9e7      	bls.n	8001244 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8001274:	bf00      	nop
 8001276:	3714      	adds	r7, #20
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr
 8001280:	20001db8 	.word	0x20001db8

08001284 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8001284:	b580      	push	{r7, lr}
 8001286:	b086      	sub	sp, #24
 8001288:	af00      	add	r7, sp, #0
 800128a:	60f8      	str	r0, [r7, #12]
 800128c:	60b9      	str	r1, [r7, #8]
 800128e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8001294:	f7ff f954 	bl	8000540 <vPortEnterCritical>
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800129e:	b25b      	sxtb	r3, r3
 80012a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012a4:	d103      	bne.n	80012ae <vQueueWaitForMessageRestricted+0x2a>
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	2200      	movs	r2, #0
 80012aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80012b4:	b25b      	sxtb	r3, r3
 80012b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012ba:	d103      	bne.n	80012c4 <vQueueWaitForMessageRestricted+0x40>
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	2200      	movs	r2, #0
 80012c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80012c4:	f7ff f96a 	bl	800059c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d106      	bne.n	80012de <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	3324      	adds	r3, #36	; 0x24
 80012d4:	687a      	ldr	r2, [r7, #4]
 80012d6:	68b9      	ldr	r1, [r7, #8]
 80012d8:	4618      	mov	r0, r3
 80012da:	f000 fba7 	bl	8001a2c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80012de:	6978      	ldr	r0, [r7, #20]
 80012e0:	f7ff ff28 	bl	8001134 <prvUnlockQueue>
	}
 80012e4:	bf00      	nop
 80012e6:	3718      	adds	r7, #24
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}

080012ec <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b08c      	sub	sp, #48	; 0x30
 80012f0:	af04      	add	r7, sp, #16
 80012f2:	60f8      	str	r0, [r7, #12]
 80012f4:	60b9      	str	r1, [r7, #8]
 80012f6:	603b      	str	r3, [r7, #0]
 80012f8:	4613      	mov	r3, r2
 80012fa:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80012fc:	88fb      	ldrh	r3, [r7, #6]
 80012fe:	009b      	lsls	r3, r3, #2
 8001300:	4618      	mov	r0, r3
 8001302:	f7ff fa2d 	bl	8000760 <pvPortMalloc>
 8001306:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d00e      	beq.n	800132c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800130e:	2050      	movs	r0, #80	; 0x50
 8001310:	f7ff fa26 	bl	8000760 <pvPortMalloc>
 8001314:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d003      	beq.n	8001324 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800131c:	69fb      	ldr	r3, [r7, #28]
 800131e:	697a      	ldr	r2, [r7, #20]
 8001320:	631a      	str	r2, [r3, #48]	; 0x30
 8001322:	e005      	b.n	8001330 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8001324:	6978      	ldr	r0, [r7, #20]
 8001326:	f7ff fa65 	bl	80007f4 <vPortFree>
 800132a:	e001      	b.n	8001330 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800132c:	2300      	movs	r3, #0
 800132e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d013      	beq.n	800135e <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001336:	88fa      	ldrh	r2, [r7, #6]
 8001338:	2300      	movs	r3, #0
 800133a:	9303      	str	r3, [sp, #12]
 800133c:	69fb      	ldr	r3, [r7, #28]
 800133e:	9302      	str	r3, [sp, #8]
 8001340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001342:	9301      	str	r3, [sp, #4]
 8001344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001346:	9300      	str	r3, [sp, #0]
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	68b9      	ldr	r1, [r7, #8]
 800134c:	68f8      	ldr	r0, [r7, #12]
 800134e:	f000 f80e 	bl	800136e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001352:	69f8      	ldr	r0, [r7, #28]
 8001354:	f000 f892 	bl	800147c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8001358:	2301      	movs	r3, #1
 800135a:	61bb      	str	r3, [r7, #24]
 800135c:	e002      	b.n	8001364 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800135e:	f04f 33ff 	mov.w	r3, #4294967295
 8001362:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8001364:	69bb      	ldr	r3, [r7, #24]
	}
 8001366:	4618      	mov	r0, r3
 8001368:	3720      	adds	r7, #32
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}

0800136e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 800136e:	b580      	push	{r7, lr}
 8001370:	b088      	sub	sp, #32
 8001372:	af00      	add	r7, sp, #0
 8001374:	60f8      	str	r0, [r7, #12]
 8001376:	60b9      	str	r1, [r7, #8]
 8001378:	607a      	str	r2, [r7, #4]
 800137a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800137c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800137e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	009b      	lsls	r3, r3, #2
 8001384:	461a      	mov	r2, r3
 8001386:	21a5      	movs	r1, #165	; 0xa5
 8001388:	f002 fc97 	bl	8003cba <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800138c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800138e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001396:	3b01      	subs	r3, #1
 8001398:	009b      	lsls	r3, r3, #2
 800139a:	4413      	add	r3, r2
 800139c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800139e:	69bb      	ldr	r3, [r7, #24]
 80013a0:	f023 0307 	bic.w	r3, r3, #7
 80013a4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80013a6:	69bb      	ldr	r3, [r7, #24]
 80013a8:	f003 0307 	and.w	r3, r3, #7
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d009      	beq.n	80013c4 <prvInitialiseNewTask+0x56>
 80013b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80013b4:	f383 8811 	msr	BASEPRI, r3
 80013b8:	f3bf 8f6f 	isb	sy
 80013bc:	f3bf 8f4f 	dsb	sy
 80013c0:	617b      	str	r3, [r7, #20]
 80013c2:	e7fe      	b.n	80013c2 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80013c4:	2300      	movs	r3, #0
 80013c6:	61fb      	str	r3, [r7, #28]
 80013c8:	e012      	b.n	80013f0 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80013ca:	68ba      	ldr	r2, [r7, #8]
 80013cc:	69fb      	ldr	r3, [r7, #28]
 80013ce:	4413      	add	r3, r2
 80013d0:	7819      	ldrb	r1, [r3, #0]
 80013d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80013d4:	69fb      	ldr	r3, [r7, #28]
 80013d6:	4413      	add	r3, r2
 80013d8:	3334      	adds	r3, #52	; 0x34
 80013da:	460a      	mov	r2, r1
 80013dc:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80013de:	68ba      	ldr	r2, [r7, #8]
 80013e0:	69fb      	ldr	r3, [r7, #28]
 80013e2:	4413      	add	r3, r2
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d006      	beq.n	80013f8 <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	3301      	adds	r3, #1
 80013ee:	61fb      	str	r3, [r7, #28]
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	2b09      	cmp	r3, #9
 80013f4:	d9e9      	bls.n	80013ca <prvInitialiseNewTask+0x5c>
 80013f6:	e000      	b.n	80013fa <prvInitialiseNewTask+0x8c>
		{
			break;
 80013f8:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80013fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013fc:	2200      	movs	r2, #0
 80013fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001404:	2b04      	cmp	r3, #4
 8001406:	d901      	bls.n	800140c <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001408:	2304      	movs	r3, #4
 800140a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800140c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800140e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001410:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8001412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001414:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001416:	641a      	str	r2, [r3, #64]	; 0x40
		pxNewTCB->uxMutexesHeld = 0;
 8001418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800141a:	2200      	movs	r2, #0
 800141c:	645a      	str	r2, [r3, #68]	; 0x44
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800141e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001420:	3304      	adds	r3, #4
 8001422:	4618      	mov	r0, r3
 8001424:	f7fe fef4 	bl	8000210 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800142a:	3318      	adds	r3, #24
 800142c:	4618      	mov	r0, r3
 800142e:	f7fe feef 	bl	8000210 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001434:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001436:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800143a:	f1c3 0205 	rsb	r2, r3, #5
 800143e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001440:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001444:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001446:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8001448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800144a:	2200      	movs	r2, #0
 800144c:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800144e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001450:	2200      	movs	r2, #0
 8001452:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001456:	683a      	ldr	r2, [r7, #0]
 8001458:	68f9      	ldr	r1, [r7, #12]
 800145a:	69b8      	ldr	r0, [r7, #24]
 800145c:	f7fe ff6c 	bl	8000338 <pxPortInitialiseStack>
 8001460:	4602      	mov	r2, r0
 8001462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001464:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8001466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001468:	2b00      	cmp	r3, #0
 800146a:	d002      	beq.n	8001472 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800146c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800146e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001470:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001472:	bf00      	nop
 8001474:	3720      	adds	r7, #32
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
	...

0800147c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8001484:	f7ff f85c 	bl	8000540 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8001488:	4b2a      	ldr	r3, [pc, #168]	; (8001534 <prvAddNewTaskToReadyList+0xb8>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	3301      	adds	r3, #1
 800148e:	4a29      	ldr	r2, [pc, #164]	; (8001534 <prvAddNewTaskToReadyList+0xb8>)
 8001490:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8001492:	4b29      	ldr	r3, [pc, #164]	; (8001538 <prvAddNewTaskToReadyList+0xbc>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d109      	bne.n	80014ae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800149a:	4a27      	ldr	r2, [pc, #156]	; (8001538 <prvAddNewTaskToReadyList+0xbc>)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80014a0:	4b24      	ldr	r3, [pc, #144]	; (8001534 <prvAddNewTaskToReadyList+0xb8>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	2b01      	cmp	r3, #1
 80014a6:	d110      	bne.n	80014ca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80014a8:	f000 fbf4 	bl	8001c94 <prvInitialiseTaskLists>
 80014ac:	e00d      	b.n	80014ca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80014ae:	4b23      	ldr	r3, [pc, #140]	; (800153c <prvAddNewTaskToReadyList+0xc0>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d109      	bne.n	80014ca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80014b6:	4b20      	ldr	r3, [pc, #128]	; (8001538 <prvAddNewTaskToReadyList+0xbc>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014c0:	429a      	cmp	r2, r3
 80014c2:	d802      	bhi.n	80014ca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80014c4:	4a1c      	ldr	r2, [pc, #112]	; (8001538 <prvAddNewTaskToReadyList+0xbc>)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80014ca:	4b1d      	ldr	r3, [pc, #116]	; (8001540 <prvAddNewTaskToReadyList+0xc4>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	3301      	adds	r3, #1
 80014d0:	4a1b      	ldr	r2, [pc, #108]	; (8001540 <prvAddNewTaskToReadyList+0xc4>)
 80014d2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014d8:	2201      	movs	r2, #1
 80014da:	409a      	lsls	r2, r3
 80014dc:	4b19      	ldr	r3, [pc, #100]	; (8001544 <prvAddNewTaskToReadyList+0xc8>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4313      	orrs	r3, r2
 80014e2:	4a18      	ldr	r2, [pc, #96]	; (8001544 <prvAddNewTaskToReadyList+0xc8>)
 80014e4:	6013      	str	r3, [r2, #0]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014ea:	4613      	mov	r3, r2
 80014ec:	009b      	lsls	r3, r3, #2
 80014ee:	4413      	add	r3, r2
 80014f0:	009b      	lsls	r3, r3, #2
 80014f2:	4a15      	ldr	r2, [pc, #84]	; (8001548 <prvAddNewTaskToReadyList+0xcc>)
 80014f4:	441a      	add	r2, r3
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	3304      	adds	r3, #4
 80014fa:	4619      	mov	r1, r3
 80014fc:	4610      	mov	r0, r2
 80014fe:	f7fe fe94 	bl	800022a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8001502:	f7ff f84b 	bl	800059c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8001506:	4b0d      	ldr	r3, [pc, #52]	; (800153c <prvAddNewTaskToReadyList+0xc0>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d00e      	beq.n	800152c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800150e:	4b0a      	ldr	r3, [pc, #40]	; (8001538 <prvAddNewTaskToReadyList+0xbc>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001518:	429a      	cmp	r2, r3
 800151a:	d207      	bcs.n	800152c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800151c:	4b0b      	ldr	r3, [pc, #44]	; (800154c <prvAddNewTaskToReadyList+0xd0>)
 800151e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001522:	601a      	str	r2, [r3, #0]
 8001524:	f3bf 8f4f 	dsb	sy
 8001528:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800152c:	bf00      	nop
 800152e:	3708      	adds	r7, #8
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	20001d40 	.word	0x20001d40
 8001538:	20001c68 	.word	0x20001c68
 800153c:	20001d4c 	.word	0x20001d4c
 8001540:	20001d5c 	.word	0x20001d5c
 8001544:	20001d48 	.word	0x20001d48
 8001548:	20001c6c 	.word	0x20001c6c
 800154c:	e000ed04 	.word	0xe000ed04

08001550 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b086      	sub	sp, #24
 8001554:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8001556:	4b1e      	ldr	r3, [pc, #120]	; (80015d0 <vTaskStartScheduler+0x80>)
 8001558:	9301      	str	r3, [sp, #4]
 800155a:	2300      	movs	r3, #0
 800155c:	9300      	str	r3, [sp, #0]
 800155e:	2300      	movs	r3, #0
 8001560:	2282      	movs	r2, #130	; 0x82
 8001562:	491c      	ldr	r1, [pc, #112]	; (80015d4 <vTaskStartScheduler+0x84>)
 8001564:	481c      	ldr	r0, [pc, #112]	; (80015d8 <vTaskStartScheduler+0x88>)
 8001566:	f7ff fec1 	bl	80012ec <xTaskCreate>
 800156a:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	2b01      	cmp	r3, #1
 8001570:	d102      	bne.n	8001578 <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 8001572:	f000 fdd3 	bl	800211c <xTimerCreateTimerTask>
 8001576:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	2b01      	cmp	r3, #1
 800157c:	d115      	bne.n	80015aa <vTaskStartScheduler+0x5a>
 800157e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001582:	f383 8811 	msr	BASEPRI, r3
 8001586:	f3bf 8f6f 	isb	sy
 800158a:	f3bf 8f4f 	dsb	sy
 800158e:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8001590:	4b12      	ldr	r3, [pc, #72]	; (80015dc <vTaskStartScheduler+0x8c>)
 8001592:	f04f 32ff 	mov.w	r2, #4294967295
 8001596:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8001598:	4b11      	ldr	r3, [pc, #68]	; (80015e0 <vTaskStartScheduler+0x90>)
 800159a:	2201      	movs	r2, #1
 800159c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800159e:	4b11      	ldr	r3, [pc, #68]	; (80015e4 <vTaskStartScheduler+0x94>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80015a4:	f7fe ff40 	bl	8000428 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80015a8:	e00d      	b.n	80015c6 <vTaskStartScheduler+0x76>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015b0:	d109      	bne.n	80015c6 <vTaskStartScheduler+0x76>
 80015b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015b6:	f383 8811 	msr	BASEPRI, r3
 80015ba:	f3bf 8f6f 	isb	sy
 80015be:	f3bf 8f4f 	dsb	sy
 80015c2:	607b      	str	r3, [r7, #4]
 80015c4:	e7fe      	b.n	80015c4 <vTaskStartScheduler+0x74>
}
 80015c6:	bf00      	nop
 80015c8:	3710      	adds	r7, #16
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	20001d64 	.word	0x20001d64
 80015d4:	08003ccc 	.word	0x08003ccc
 80015d8:	08001c61 	.word	0x08001c61
 80015dc:	20001d60 	.word	0x20001d60
 80015e0:	20001d4c 	.word	0x20001d4c
 80015e4:	20001d44 	.word	0x20001d44

080015e8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80015ec:	4b04      	ldr	r3, [pc, #16]	; (8001600 <vTaskSuspendAll+0x18>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	3301      	adds	r3, #1
 80015f2:	4a03      	ldr	r2, [pc, #12]	; (8001600 <vTaskSuspendAll+0x18>)
 80015f4:	6013      	str	r3, [r2, #0]
}
 80015f6:	bf00      	nop
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr
 8001600:	20001d68 	.word	0x20001d68

08001604 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b084      	sub	sp, #16
 8001608:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800160a:	2300      	movs	r3, #0
 800160c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800160e:	2300      	movs	r3, #0
 8001610:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8001612:	4b41      	ldr	r3, [pc, #260]	; (8001718 <xTaskResumeAll+0x114>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d109      	bne.n	800162e <xTaskResumeAll+0x2a>
 800161a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800161e:	f383 8811 	msr	BASEPRI, r3
 8001622:	f3bf 8f6f 	isb	sy
 8001626:	f3bf 8f4f 	dsb	sy
 800162a:	603b      	str	r3, [r7, #0]
 800162c:	e7fe      	b.n	800162c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800162e:	f7fe ff87 	bl	8000540 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8001632:	4b39      	ldr	r3, [pc, #228]	; (8001718 <xTaskResumeAll+0x114>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	3b01      	subs	r3, #1
 8001638:	4a37      	ldr	r2, [pc, #220]	; (8001718 <xTaskResumeAll+0x114>)
 800163a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800163c:	4b36      	ldr	r3, [pc, #216]	; (8001718 <xTaskResumeAll+0x114>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d161      	bne.n	8001708 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001644:	4b35      	ldr	r3, [pc, #212]	; (800171c <xTaskResumeAll+0x118>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d05d      	beq.n	8001708 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800164c:	e02e      	b.n	80016ac <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800164e:	4b34      	ldr	r3, [pc, #208]	; (8001720 <xTaskResumeAll+0x11c>)
 8001650:	68db      	ldr	r3, [r3, #12]
 8001652:	68db      	ldr	r3, [r3, #12]
 8001654:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	3318      	adds	r3, #24
 800165a:	4618      	mov	r0, r3
 800165c:	f7fe fe42 	bl	80002e4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	3304      	adds	r3, #4
 8001664:	4618      	mov	r0, r3
 8001666:	f7fe fe3d 	bl	80002e4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800166e:	2201      	movs	r2, #1
 8001670:	409a      	lsls	r2, r3
 8001672:	4b2c      	ldr	r3, [pc, #176]	; (8001724 <xTaskResumeAll+0x120>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4313      	orrs	r3, r2
 8001678:	4a2a      	ldr	r2, [pc, #168]	; (8001724 <xTaskResumeAll+0x120>)
 800167a:	6013      	str	r3, [r2, #0]
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001680:	4613      	mov	r3, r2
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	4413      	add	r3, r2
 8001686:	009b      	lsls	r3, r3, #2
 8001688:	4a27      	ldr	r2, [pc, #156]	; (8001728 <xTaskResumeAll+0x124>)
 800168a:	441a      	add	r2, r3
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	3304      	adds	r3, #4
 8001690:	4619      	mov	r1, r3
 8001692:	4610      	mov	r0, r2
 8001694:	f7fe fdc9 	bl	800022a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800169c:	4b23      	ldr	r3, [pc, #140]	; (800172c <xTaskResumeAll+0x128>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016a2:	429a      	cmp	r2, r3
 80016a4:	d302      	bcc.n	80016ac <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80016a6:	4b22      	ldr	r3, [pc, #136]	; (8001730 <xTaskResumeAll+0x12c>)
 80016a8:	2201      	movs	r2, #1
 80016aa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80016ac:	4b1c      	ldr	r3, [pc, #112]	; (8001720 <xTaskResumeAll+0x11c>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d1cc      	bne.n	800164e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80016ba:	f000 fb77 	bl	8001dac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80016be:	4b1d      	ldr	r3, [pc, #116]	; (8001734 <xTaskResumeAll+0x130>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d010      	beq.n	80016ec <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80016ca:	f000 f847 	bl	800175c <xTaskIncrementTick>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d002      	beq.n	80016da <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80016d4:	4b16      	ldr	r3, [pc, #88]	; (8001730 <xTaskResumeAll+0x12c>)
 80016d6:	2201      	movs	r2, #1
 80016d8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	3b01      	subs	r3, #1
 80016de:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d1f1      	bne.n	80016ca <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 80016e6:	4b13      	ldr	r3, [pc, #76]	; (8001734 <xTaskResumeAll+0x130>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80016ec:	4b10      	ldr	r3, [pc, #64]	; (8001730 <xTaskResumeAll+0x12c>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d009      	beq.n	8001708 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80016f4:	2301      	movs	r3, #1
 80016f6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80016f8:	4b0f      	ldr	r3, [pc, #60]	; (8001738 <xTaskResumeAll+0x134>)
 80016fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80016fe:	601a      	str	r2, [r3, #0]
 8001700:	f3bf 8f4f 	dsb	sy
 8001704:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8001708:	f7fe ff48 	bl	800059c <vPortExitCritical>

	return xAlreadyYielded;
 800170c:	68bb      	ldr	r3, [r7, #8]
}
 800170e:	4618      	mov	r0, r3
 8001710:	3710      	adds	r7, #16
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	20001d68 	.word	0x20001d68
 800171c:	20001d40 	.word	0x20001d40
 8001720:	20001d00 	.word	0x20001d00
 8001724:	20001d48 	.word	0x20001d48
 8001728:	20001c6c 	.word	0x20001c6c
 800172c:	20001c68 	.word	0x20001c68
 8001730:	20001d54 	.word	0x20001d54
 8001734:	20001d50 	.word	0x20001d50
 8001738:	e000ed04 	.word	0xe000ed04

0800173c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8001742:	4b05      	ldr	r3, [pc, #20]	; (8001758 <xTaskGetTickCount+0x1c>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8001748:	687b      	ldr	r3, [r7, #4]
}
 800174a:	4618      	mov	r0, r3
 800174c:	370c      	adds	r7, #12
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	20001d44 	.word	0x20001d44

0800175c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b086      	sub	sp, #24
 8001760:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8001762:	2300      	movs	r3, #0
 8001764:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001766:	4b54      	ldr	r3, [pc, #336]	; (80018b8 <xTaskIncrementTick+0x15c>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	2b00      	cmp	r3, #0
 800176c:	f040 8092 	bne.w	8001894 <xTaskIncrementTick+0x138>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 8001770:	4b52      	ldr	r3, [pc, #328]	; (80018bc <xTaskIncrementTick+0x160>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	3301      	adds	r3, #1
 8001776:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8001778:	4a50      	ldr	r2, [pc, #320]	; (80018bc <xTaskIncrementTick+0x160>)
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d11f      	bne.n	80017c4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8001784:	4b4e      	ldr	r3, [pc, #312]	; (80018c0 <xTaskIncrementTick+0x164>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d009      	beq.n	80017a2 <xTaskIncrementTick+0x46>
 800178e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001792:	f383 8811 	msr	BASEPRI, r3
 8001796:	f3bf 8f6f 	isb	sy
 800179a:	f3bf 8f4f 	dsb	sy
 800179e:	603b      	str	r3, [r7, #0]
 80017a0:	e7fe      	b.n	80017a0 <xTaskIncrementTick+0x44>
 80017a2:	4b47      	ldr	r3, [pc, #284]	; (80018c0 <xTaskIncrementTick+0x164>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	60fb      	str	r3, [r7, #12]
 80017a8:	4b46      	ldr	r3, [pc, #280]	; (80018c4 <xTaskIncrementTick+0x168>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a44      	ldr	r2, [pc, #272]	; (80018c0 <xTaskIncrementTick+0x164>)
 80017ae:	6013      	str	r3, [r2, #0]
 80017b0:	4a44      	ldr	r2, [pc, #272]	; (80018c4 <xTaskIncrementTick+0x168>)
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	6013      	str	r3, [r2, #0]
 80017b6:	4b44      	ldr	r3, [pc, #272]	; (80018c8 <xTaskIncrementTick+0x16c>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	3301      	adds	r3, #1
 80017bc:	4a42      	ldr	r2, [pc, #264]	; (80018c8 <xTaskIncrementTick+0x16c>)
 80017be:	6013      	str	r3, [r2, #0]
 80017c0:	f000 faf4 	bl	8001dac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80017c4:	4b41      	ldr	r3, [pc, #260]	; (80018cc <xTaskIncrementTick+0x170>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	693a      	ldr	r2, [r7, #16]
 80017ca:	429a      	cmp	r2, r3
 80017cc:	d34d      	bcc.n	800186a <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80017ce:	4b3c      	ldr	r3, [pc, #240]	; (80018c0 <xTaskIncrementTick+0x164>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d101      	bne.n	80017dc <xTaskIncrementTick+0x80>
 80017d8:	2301      	movs	r3, #1
 80017da:	e000      	b.n	80017de <xTaskIncrementTick+0x82>
 80017dc:	2300      	movs	r3, #0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d004      	beq.n	80017ec <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80017e2:	4b3a      	ldr	r3, [pc, #232]	; (80018cc <xTaskIncrementTick+0x170>)
 80017e4:	f04f 32ff 	mov.w	r2, #4294967295
 80017e8:	601a      	str	r2, [r3, #0]
					break;
 80017ea:	e03e      	b.n	800186a <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80017ec:	4b34      	ldr	r3, [pc, #208]	; (80018c0 <xTaskIncrementTick+0x164>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	68db      	ldr	r3, [r3, #12]
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80017fc:	693a      	ldr	r2, [r7, #16]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	429a      	cmp	r2, r3
 8001802:	d203      	bcs.n	800180c <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8001804:	4a31      	ldr	r2, [pc, #196]	; (80018cc <xTaskIncrementTick+0x170>)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6013      	str	r3, [r2, #0]
						break;
 800180a:	e02e      	b.n	800186a <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	3304      	adds	r3, #4
 8001810:	4618      	mov	r0, r3
 8001812:	f7fe fd67 	bl	80002e4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001816:	68bb      	ldr	r3, [r7, #8]
 8001818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800181a:	2b00      	cmp	r3, #0
 800181c:	d004      	beq.n	8001828 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800181e:	68bb      	ldr	r3, [r7, #8]
 8001820:	3318      	adds	r3, #24
 8001822:	4618      	mov	r0, r3
 8001824:	f7fe fd5e 	bl	80002e4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800182c:	2201      	movs	r2, #1
 800182e:	409a      	lsls	r2, r3
 8001830:	4b27      	ldr	r3, [pc, #156]	; (80018d0 <xTaskIncrementTick+0x174>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4313      	orrs	r3, r2
 8001836:	4a26      	ldr	r2, [pc, #152]	; (80018d0 <xTaskIncrementTick+0x174>)
 8001838:	6013      	str	r3, [r2, #0]
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800183e:	4613      	mov	r3, r2
 8001840:	009b      	lsls	r3, r3, #2
 8001842:	4413      	add	r3, r2
 8001844:	009b      	lsls	r3, r3, #2
 8001846:	4a23      	ldr	r2, [pc, #140]	; (80018d4 <xTaskIncrementTick+0x178>)
 8001848:	441a      	add	r2, r3
 800184a:	68bb      	ldr	r3, [r7, #8]
 800184c:	3304      	adds	r3, #4
 800184e:	4619      	mov	r1, r3
 8001850:	4610      	mov	r0, r2
 8001852:	f7fe fcea 	bl	800022a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001856:	68bb      	ldr	r3, [r7, #8]
 8001858:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800185a:	4b1f      	ldr	r3, [pc, #124]	; (80018d8 <xTaskIncrementTick+0x17c>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001860:	429a      	cmp	r2, r3
 8001862:	d3b4      	bcc.n	80017ce <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8001864:	2301      	movs	r3, #1
 8001866:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001868:	e7b1      	b.n	80017ce <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800186a:	4b1b      	ldr	r3, [pc, #108]	; (80018d8 <xTaskIncrementTick+0x17c>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001870:	4918      	ldr	r1, [pc, #96]	; (80018d4 <xTaskIncrementTick+0x178>)
 8001872:	4613      	mov	r3, r2
 8001874:	009b      	lsls	r3, r3, #2
 8001876:	4413      	add	r3, r2
 8001878:	009b      	lsls	r3, r3, #2
 800187a:	440b      	add	r3, r1
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	2b01      	cmp	r3, #1
 8001880:	d901      	bls.n	8001886 <xTaskIncrementTick+0x12a>
			{
				xSwitchRequired = pdTRUE;
 8001882:	2301      	movs	r3, #1
 8001884:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( uxPendedTicks == ( UBaseType_t ) 0U )
 8001886:	4b15      	ldr	r3, [pc, #84]	; (80018dc <xTaskIncrementTick+0x180>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d109      	bne.n	80018a2 <xTaskIncrementTick+0x146>
			{
				vApplicationTickHook();
 800188e:	f002 f8b5 	bl	80039fc <vApplicationTickHook>
 8001892:	e006      	b.n	80018a2 <xTaskIncrementTick+0x146>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8001894:	4b11      	ldr	r3, [pc, #68]	; (80018dc <xTaskIncrementTick+0x180>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	3301      	adds	r3, #1
 800189a:	4a10      	ldr	r2, [pc, #64]	; (80018dc <xTaskIncrementTick+0x180>)
 800189c:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 800189e:	f002 f8ad 	bl	80039fc <vApplicationTickHook>
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80018a2:	4b0f      	ldr	r3, [pc, #60]	; (80018e0 <xTaskIncrementTick+0x184>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <xTaskIncrementTick+0x152>
		{
			xSwitchRequired = pdTRUE;
 80018aa:	2301      	movs	r3, #1
 80018ac:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80018ae:	697b      	ldr	r3, [r7, #20]
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	3718      	adds	r7, #24
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	20001d68 	.word	0x20001d68
 80018bc:	20001d44 	.word	0x20001d44
 80018c0:	20001cf8 	.word	0x20001cf8
 80018c4:	20001cfc 	.word	0x20001cfc
 80018c8:	20001d58 	.word	0x20001d58
 80018cc:	20001d60 	.word	0x20001d60
 80018d0:	20001d48 	.word	0x20001d48
 80018d4:	20001c6c 	.word	0x20001c6c
 80018d8:	20001c68 	.word	0x20001c68
 80018dc:	20001d50 	.word	0x20001d50
 80018e0:	20001d54 	.word	0x20001d54

080018e4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b088      	sub	sp, #32
 80018e8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80018ea:	4b39      	ldr	r3, [pc, #228]	; (80019d0 <vTaskSwitchContext+0xec>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d003      	beq.n	80018fa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80018f2:	4b38      	ldr	r3, [pc, #224]	; (80019d4 <vTaskSwitchContext+0xf0>)
 80018f4:	2201      	movs	r2, #1
 80018f6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80018f8:	e065      	b.n	80019c6 <vTaskSwitchContext+0xe2>
		xYieldPending = pdFALSE;
 80018fa:	4b36      	ldr	r3, [pc, #216]	; (80019d4 <vTaskSwitchContext+0xf0>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8001900:	4b35      	ldr	r3, [pc, #212]	; (80019d8 <vTaskSwitchContext+0xf4>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001906:	61fb      	str	r3, [r7, #28]
 8001908:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800190c:	61bb      	str	r3, [r7, #24]
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	69bb      	ldr	r3, [r7, #24]
 8001914:	429a      	cmp	r2, r3
 8001916:	d111      	bne.n	800193c <vTaskSwitchContext+0x58>
 8001918:	69fb      	ldr	r3, [r7, #28]
 800191a:	3304      	adds	r3, #4
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	69bb      	ldr	r3, [r7, #24]
 8001920:	429a      	cmp	r2, r3
 8001922:	d10b      	bne.n	800193c <vTaskSwitchContext+0x58>
 8001924:	69fb      	ldr	r3, [r7, #28]
 8001926:	3308      	adds	r3, #8
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	69bb      	ldr	r3, [r7, #24]
 800192c:	429a      	cmp	r2, r3
 800192e:	d105      	bne.n	800193c <vTaskSwitchContext+0x58>
 8001930:	69fb      	ldr	r3, [r7, #28]
 8001932:	330c      	adds	r3, #12
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	69bb      	ldr	r3, [r7, #24]
 8001938:	429a      	cmp	r2, r3
 800193a:	d008      	beq.n	800194e <vTaskSwitchContext+0x6a>
 800193c:	4b26      	ldr	r3, [pc, #152]	; (80019d8 <vTaskSwitchContext+0xf4>)
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	4b25      	ldr	r3, [pc, #148]	; (80019d8 <vTaskSwitchContext+0xf4>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	3334      	adds	r3, #52	; 0x34
 8001946:	4619      	mov	r1, r3
 8001948:	4610      	mov	r0, r2
 800194a:	f002 f87c 	bl	8003a46 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800194e:	4b23      	ldr	r3, [pc, #140]	; (80019dc <vTaskSwitchContext+0xf8>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	fab3 f383 	clz	r3, r3
 800195a:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800195c:	7afb      	ldrb	r3, [r7, #11]
 800195e:	f1c3 031f 	rsb	r3, r3, #31
 8001962:	617b      	str	r3, [r7, #20]
 8001964:	491e      	ldr	r1, [pc, #120]	; (80019e0 <vTaskSwitchContext+0xfc>)
 8001966:	697a      	ldr	r2, [r7, #20]
 8001968:	4613      	mov	r3, r2
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	4413      	add	r3, r2
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	440b      	add	r3, r1
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d109      	bne.n	800198c <vTaskSwitchContext+0xa8>
	__asm volatile
 8001978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800197c:	f383 8811 	msr	BASEPRI, r3
 8001980:	f3bf 8f6f 	isb	sy
 8001984:	f3bf 8f4f 	dsb	sy
 8001988:	607b      	str	r3, [r7, #4]
 800198a:	e7fe      	b.n	800198a <vTaskSwitchContext+0xa6>
 800198c:	697a      	ldr	r2, [r7, #20]
 800198e:	4613      	mov	r3, r2
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	4413      	add	r3, r2
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	4a12      	ldr	r2, [pc, #72]	; (80019e0 <vTaskSwitchContext+0xfc>)
 8001998:	4413      	add	r3, r2
 800199a:	613b      	str	r3, [r7, #16]
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	685a      	ldr	r2, [r3, #4]
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	605a      	str	r2, [r3, #4]
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	685a      	ldr	r2, [r3, #4]
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	3308      	adds	r3, #8
 80019ae:	429a      	cmp	r2, r3
 80019b0:	d104      	bne.n	80019bc <vTaskSwitchContext+0xd8>
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	685a      	ldr	r2, [r3, #4]
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	605a      	str	r2, [r3, #4]
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	68db      	ldr	r3, [r3, #12]
 80019c2:	4a05      	ldr	r2, [pc, #20]	; (80019d8 <vTaskSwitchContext+0xf4>)
 80019c4:	6013      	str	r3, [r2, #0]
}
 80019c6:	bf00      	nop
 80019c8:	3720      	adds	r7, #32
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	20001d68 	.word	0x20001d68
 80019d4:	20001d54 	.word	0x20001d54
 80019d8:	20001c68 	.word	0x20001c68
 80019dc:	20001d48 	.word	0x20001d48
 80019e0:	20001c6c 	.word	0x20001c6c

080019e4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b084      	sub	sp, #16
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
 80019ec:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d109      	bne.n	8001a08 <vTaskPlaceOnEventList+0x24>
 80019f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019f8:	f383 8811 	msr	BASEPRI, r3
 80019fc:	f3bf 8f6f 	isb	sy
 8001a00:	f3bf 8f4f 	dsb	sy
 8001a04:	60fb      	str	r3, [r7, #12]
 8001a06:	e7fe      	b.n	8001a06 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001a08:	4b07      	ldr	r3, [pc, #28]	; (8001a28 <vTaskPlaceOnEventList+0x44>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	3318      	adds	r3, #24
 8001a0e:	4619      	mov	r1, r3
 8001a10:	6878      	ldr	r0, [r7, #4]
 8001a12:	f7fe fc2e 	bl	8000272 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001a16:	2101      	movs	r1, #1
 8001a18:	6838      	ldr	r0, [r7, #0]
 8001a1a:	f000 fb19 	bl	8002050 <prvAddCurrentTaskToDelayedList>
}
 8001a1e:	bf00      	nop
 8001a20:	3710      	adds	r7, #16
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	20001c68 	.word	0x20001c68

08001a2c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b086      	sub	sp, #24
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	60f8      	str	r0, [r7, #12]
 8001a34:	60b9      	str	r1, [r7, #8]
 8001a36:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d109      	bne.n	8001a52 <vTaskPlaceOnEventListRestricted+0x26>
 8001a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a42:	f383 8811 	msr	BASEPRI, r3
 8001a46:	f3bf 8f6f 	isb	sy
 8001a4a:	f3bf 8f4f 	dsb	sy
 8001a4e:	617b      	str	r3, [r7, #20]
 8001a50:	e7fe      	b.n	8001a50 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001a52:	4b0a      	ldr	r3, [pc, #40]	; (8001a7c <vTaskPlaceOnEventListRestricted+0x50>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	3318      	adds	r3, #24
 8001a58:	4619      	mov	r1, r3
 8001a5a:	68f8      	ldr	r0, [r7, #12]
 8001a5c:	f7fe fbe5 	bl	800022a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d002      	beq.n	8001a6c <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8001a66:	f04f 33ff 	mov.w	r3, #4294967295
 8001a6a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8001a6c:	6879      	ldr	r1, [r7, #4]
 8001a6e:	68b8      	ldr	r0, [r7, #8]
 8001a70:	f000 faee 	bl	8002050 <prvAddCurrentTaskToDelayedList>
	}
 8001a74:	bf00      	nop
 8001a76:	3718      	adds	r7, #24
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	20001c68 	.word	0x20001c68

08001a80 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b086      	sub	sp, #24
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	68db      	ldr	r3, [r3, #12]
 8001a8e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d109      	bne.n	8001aaa <xTaskRemoveFromEventList+0x2a>
 8001a96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a9a:	f383 8811 	msr	BASEPRI, r3
 8001a9e:	f3bf 8f6f 	isb	sy
 8001aa2:	f3bf 8f4f 	dsb	sy
 8001aa6:	60fb      	str	r3, [r7, #12]
 8001aa8:	e7fe      	b.n	8001aa8 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	3318      	adds	r3, #24
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f7fe fc18 	bl	80002e4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001ab4:	4b1d      	ldr	r3, [pc, #116]	; (8001b2c <xTaskRemoveFromEventList+0xac>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d11c      	bne.n	8001af6 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	3304      	adds	r3, #4
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f7fe fc0f 	bl	80002e4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aca:	2201      	movs	r2, #1
 8001acc:	409a      	lsls	r2, r3
 8001ace:	4b18      	ldr	r3, [pc, #96]	; (8001b30 <xTaskRemoveFromEventList+0xb0>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	4a16      	ldr	r2, [pc, #88]	; (8001b30 <xTaskRemoveFromEventList+0xb0>)
 8001ad6:	6013      	str	r3, [r2, #0]
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001adc:	4613      	mov	r3, r2
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	4413      	add	r3, r2
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	4a13      	ldr	r2, [pc, #76]	; (8001b34 <xTaskRemoveFromEventList+0xb4>)
 8001ae6:	441a      	add	r2, r3
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	3304      	adds	r3, #4
 8001aec:	4619      	mov	r1, r3
 8001aee:	4610      	mov	r0, r2
 8001af0:	f7fe fb9b 	bl	800022a <vListInsertEnd>
 8001af4:	e005      	b.n	8001b02 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	3318      	adds	r3, #24
 8001afa:	4619      	mov	r1, r3
 8001afc:	480e      	ldr	r0, [pc, #56]	; (8001b38 <xTaskRemoveFromEventList+0xb8>)
 8001afe:	f7fe fb94 	bl	800022a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b06:	4b0d      	ldr	r3, [pc, #52]	; (8001b3c <xTaskRemoveFromEventList+0xbc>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	d905      	bls.n	8001b1c <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8001b10:	2301      	movs	r3, #1
 8001b12:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8001b14:	4b0a      	ldr	r3, [pc, #40]	; (8001b40 <xTaskRemoveFromEventList+0xc0>)
 8001b16:	2201      	movs	r2, #1
 8001b18:	601a      	str	r2, [r3, #0]
 8001b1a:	e001      	b.n	8001b20 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8001b20:	697b      	ldr	r3, [r7, #20]
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3718      	adds	r7, #24
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	20001d68 	.word	0x20001d68
 8001b30:	20001d48 	.word	0x20001d48
 8001b34:	20001c6c 	.word	0x20001c6c
 8001b38:	20001d00 	.word	0x20001d00
 8001b3c:	20001c68 	.word	0x20001c68
 8001b40:	20001d54 	.word	0x20001d54

08001b44 <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8001b44:	b480      	push	{r7}
 8001b46:	b085      	sub	sp, #20
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d109      	bne.n	8001b66 <vTaskSetTimeOutState+0x22>
 8001b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b56:	f383 8811 	msr	BASEPRI, r3
 8001b5a:	f3bf 8f6f 	isb	sy
 8001b5e:	f3bf 8f4f 	dsb	sy
 8001b62:	60fb      	str	r3, [r7, #12]
 8001b64:	e7fe      	b.n	8001b64 <vTaskSetTimeOutState+0x20>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001b66:	4b07      	ldr	r3, [pc, #28]	; (8001b84 <vTaskSetTimeOutState+0x40>)
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8001b6e:	4b06      	ldr	r3, [pc, #24]	; (8001b88 <vTaskSetTimeOutState+0x44>)
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	605a      	str	r2, [r3, #4]
}
 8001b76:	bf00      	nop
 8001b78:	3714      	adds	r7, #20
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr
 8001b82:	bf00      	nop
 8001b84:	20001d58 	.word	0x20001d58
 8001b88:	20001d44 	.word	0x20001d44

08001b8c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b086      	sub	sp, #24
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
 8001b94:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d109      	bne.n	8001bb0 <xTaskCheckForTimeOut+0x24>
 8001b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ba0:	f383 8811 	msr	BASEPRI, r3
 8001ba4:	f3bf 8f6f 	isb	sy
 8001ba8:	f3bf 8f4f 	dsb	sy
 8001bac:	60fb      	str	r3, [r7, #12]
 8001bae:	e7fe      	b.n	8001bae <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d109      	bne.n	8001bca <xTaskCheckForTimeOut+0x3e>
 8001bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bba:	f383 8811 	msr	BASEPRI, r3
 8001bbe:	f3bf 8f6f 	isb	sy
 8001bc2:	f3bf 8f4f 	dsb	sy
 8001bc6:	60bb      	str	r3, [r7, #8]
 8001bc8:	e7fe      	b.n	8001bc8 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8001bca:	f7fe fcb9 	bl	8000540 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8001bce:	4b1c      	ldr	r3, [pc, #112]	; (8001c40 <xTaskCheckForTimeOut+0xb4>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	613b      	str	r3, [r7, #16]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bdc:	d102      	bne.n	8001be4 <xTaskCheckForTimeOut+0x58>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8001bde:	2300      	movs	r3, #0
 8001be0:	617b      	str	r3, [r7, #20]
 8001be2:	e026      	b.n	8001c32 <xTaskCheckForTimeOut+0xa6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	4b16      	ldr	r3, [pc, #88]	; (8001c44 <xTaskCheckForTimeOut+0xb8>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d007      	beq.n	8001c00 <xTaskCheckForTimeOut+0x74>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	685a      	ldr	r2, [r3, #4]
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	429a      	cmp	r2, r3
 8001bf8:	d802      	bhi.n	8001c00 <xTaskCheckForTimeOut+0x74>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	617b      	str	r3, [r7, #20]
 8001bfe:	e018      	b.n	8001c32 <xTaskCheckForTimeOut+0xa6>
		}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	693a      	ldr	r2, [r7, #16]
 8001c06:	1ad2      	subs	r2, r2, r3
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d20e      	bcs.n	8001c2e <xTaskCheckForTimeOut+0xa2>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6859      	ldr	r1, [r3, #4]
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	1acb      	subs	r3, r1, r3
 8001c1c:	441a      	add	r2, r3
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f7ff ff8e 	bl	8001b44 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	617b      	str	r3, [r7, #20]
 8001c2c:	e001      	b.n	8001c32 <xTaskCheckForTimeOut+0xa6>
		}
		else
		{
			xReturn = pdTRUE;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8001c32:	f7fe fcb3 	bl	800059c <vPortExitCritical>

	return xReturn;
 8001c36:	697b      	ldr	r3, [r7, #20]
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3718      	adds	r7, #24
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	20001d44 	.word	0x20001d44
 8001c44:	20001d58 	.word	0x20001d58

08001c48 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8001c4c:	4b03      	ldr	r3, [pc, #12]	; (8001c5c <vTaskMissedYield+0x14>)
 8001c4e:	2201      	movs	r2, #1
 8001c50:	601a      	str	r2, [r3, #0]
}
 8001c52:	bf00      	nop
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr
 8001c5c:	20001d54 	.word	0x20001d54

08001c60 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8001c68:	f000 f854 	bl	8001d14 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001c6c:	4b07      	ldr	r3, [pc, #28]	; (8001c8c <prvIdleTask+0x2c>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d907      	bls.n	8001c84 <prvIdleTask+0x24>
			{
				taskYIELD();
 8001c74:	4b06      	ldr	r3, [pc, #24]	; (8001c90 <prvIdleTask+0x30>)
 8001c76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001c7a:	601a      	str	r2, [r3, #0]
 8001c7c:	f3bf 8f4f 	dsb	sy
 8001c80:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8001c84:	f001 fee5 	bl	8003a52 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8001c88:	e7ee      	b.n	8001c68 <prvIdleTask+0x8>
 8001c8a:	bf00      	nop
 8001c8c:	20001c6c 	.word	0x20001c6c
 8001c90:	e000ed04 	.word	0xe000ed04

08001c94 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	607b      	str	r3, [r7, #4]
 8001c9e:	e00c      	b.n	8001cba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001ca0:	687a      	ldr	r2, [r7, #4]
 8001ca2:	4613      	mov	r3, r2
 8001ca4:	009b      	lsls	r3, r3, #2
 8001ca6:	4413      	add	r3, r2
 8001ca8:	009b      	lsls	r3, r3, #2
 8001caa:	4a12      	ldr	r2, [pc, #72]	; (8001cf4 <prvInitialiseTaskLists+0x60>)
 8001cac:	4413      	add	r3, r2
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f7fe fa8e 	bl	80001d0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	3301      	adds	r3, #1
 8001cb8:	607b      	str	r3, [r7, #4]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2b04      	cmp	r3, #4
 8001cbe:	d9ef      	bls.n	8001ca0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8001cc0:	480d      	ldr	r0, [pc, #52]	; (8001cf8 <prvInitialiseTaskLists+0x64>)
 8001cc2:	f7fe fa85 	bl	80001d0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8001cc6:	480d      	ldr	r0, [pc, #52]	; (8001cfc <prvInitialiseTaskLists+0x68>)
 8001cc8:	f7fe fa82 	bl	80001d0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8001ccc:	480c      	ldr	r0, [pc, #48]	; (8001d00 <prvInitialiseTaskLists+0x6c>)
 8001cce:	f7fe fa7f 	bl	80001d0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8001cd2:	480c      	ldr	r0, [pc, #48]	; (8001d04 <prvInitialiseTaskLists+0x70>)
 8001cd4:	f7fe fa7c 	bl	80001d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8001cd8:	480b      	ldr	r0, [pc, #44]	; (8001d08 <prvInitialiseTaskLists+0x74>)
 8001cda:	f7fe fa79 	bl	80001d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8001cde:	4b0b      	ldr	r3, [pc, #44]	; (8001d0c <prvInitialiseTaskLists+0x78>)
 8001ce0:	4a05      	ldr	r2, [pc, #20]	; (8001cf8 <prvInitialiseTaskLists+0x64>)
 8001ce2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001ce4:	4b0a      	ldr	r3, [pc, #40]	; (8001d10 <prvInitialiseTaskLists+0x7c>)
 8001ce6:	4a05      	ldr	r2, [pc, #20]	; (8001cfc <prvInitialiseTaskLists+0x68>)
 8001ce8:	601a      	str	r2, [r3, #0]
}
 8001cea:	bf00      	nop
 8001cec:	3708      	adds	r7, #8
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	20001c6c 	.word	0x20001c6c
 8001cf8:	20001cd0 	.word	0x20001cd0
 8001cfc:	20001ce4 	.word	0x20001ce4
 8001d00:	20001d00 	.word	0x20001d00
 8001d04:	20001d14 	.word	0x20001d14
 8001d08:	20001d2c 	.word	0x20001d2c
 8001d0c:	20001cf8 	.word	0x20001cf8
 8001d10:	20001cfc 	.word	0x20001cfc

08001d14 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b082      	sub	sp, #8
 8001d18:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001d1a:	e028      	b.n	8001d6e <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
 8001d1c:	f7ff fc64 	bl	80015e8 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8001d20:	4b17      	ldr	r3, [pc, #92]	; (8001d80 <prvCheckTasksWaitingTermination+0x6c>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	bf0c      	ite	eq
 8001d28:	2301      	moveq	r3, #1
 8001d2a:	2300      	movne	r3, #0
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
 8001d30:	f7ff fc68 	bl	8001604 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d119      	bne.n	8001d6e <prvCheckTasksWaitingTermination+0x5a>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 8001d3a:	f7fe fc01 	bl	8000540 <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8001d3e:	4b10      	ldr	r3, [pc, #64]	; (8001d80 <prvCheckTasksWaitingTermination+0x6c>)
 8001d40:	68db      	ldr	r3, [r3, #12]
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	3304      	adds	r3, #4
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f7fe faca 	bl	80002e4 <uxListRemove>
					--uxCurrentNumberOfTasks;
 8001d50:	4b0c      	ldr	r3, [pc, #48]	; (8001d84 <prvCheckTasksWaitingTermination+0x70>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	3b01      	subs	r3, #1
 8001d56:	4a0b      	ldr	r2, [pc, #44]	; (8001d84 <prvCheckTasksWaitingTermination+0x70>)
 8001d58:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 8001d5a:	4b0b      	ldr	r3, [pc, #44]	; (8001d88 <prvCheckTasksWaitingTermination+0x74>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	3b01      	subs	r3, #1
 8001d60:	4a09      	ldr	r2, [pc, #36]	; (8001d88 <prvCheckTasksWaitingTermination+0x74>)
 8001d62:	6013      	str	r3, [r2, #0]
				}
				taskEXIT_CRITICAL();
 8001d64:	f7fe fc1a 	bl	800059c <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 8001d68:	6838      	ldr	r0, [r7, #0]
 8001d6a:	f000 f80f 	bl	8001d8c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001d6e:	4b06      	ldr	r3, [pc, #24]	; (8001d88 <prvCheckTasksWaitingTermination+0x74>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d1d2      	bne.n	8001d1c <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8001d76:	bf00      	nop
 8001d78:	3708      	adds	r7, #8
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	20001d14 	.word	0x20001d14
 8001d84:	20001d40 	.word	0x20001d40
 8001d88:	20001d28 	.word	0x20001d28

08001d8c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f7fe fd2b 	bl	80007f4 <vPortFree>
			vPortFree( pxTCB );
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	f7fe fd28 	bl	80007f4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8001da4:	bf00      	nop
 8001da6:	3708      	adds	r7, #8
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}

08001dac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001db2:	4b0f      	ldr	r3, [pc, #60]	; (8001df0 <prvResetNextTaskUnblockTime+0x44>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d101      	bne.n	8001dc0 <prvResetNextTaskUnblockTime+0x14>
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e000      	b.n	8001dc2 <prvResetNextTaskUnblockTime+0x16>
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d004      	beq.n	8001dd0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8001dc6:	4b0b      	ldr	r3, [pc, #44]	; (8001df4 <prvResetNextTaskUnblockTime+0x48>)
 8001dc8:	f04f 32ff 	mov.w	r2, #4294967295
 8001dcc:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8001dce:	e008      	b.n	8001de2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001dd0:	4b07      	ldr	r3, [pc, #28]	; (8001df0 <prvResetNextTaskUnblockTime+0x44>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	68db      	ldr	r3, [r3, #12]
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	4a05      	ldr	r2, [pc, #20]	; (8001df4 <prvResetNextTaskUnblockTime+0x48>)
 8001de0:	6013      	str	r3, [r2, #0]
}
 8001de2:	bf00      	nop
 8001de4:	370c      	adds	r7, #12
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop
 8001df0:	20001cf8 	.word	0x20001cf8
 8001df4:	20001d60 	.word	0x20001d60

08001df8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8001df8:	b480      	push	{r7}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8001dfe:	4b0b      	ldr	r3, [pc, #44]	; (8001e2c <xTaskGetSchedulerState+0x34>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d102      	bne.n	8001e0c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8001e06:	2301      	movs	r3, #1
 8001e08:	607b      	str	r3, [r7, #4]
 8001e0a:	e008      	b.n	8001e1e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001e0c:	4b08      	ldr	r3, [pc, #32]	; (8001e30 <xTaskGetSchedulerState+0x38>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d102      	bne.n	8001e1a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8001e14:	2302      	movs	r3, #2
 8001e16:	607b      	str	r3, [r7, #4]
 8001e18:	e001      	b.n	8001e1e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8001e1e:	687b      	ldr	r3, [r7, #4]
	}
 8001e20:	4618      	mov	r0, r3
 8001e22:	370c      	adds	r7, #12
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr
 8001e2c:	20001d4c 	.word	0x20001d4c
 8001e30:	20001d68 	.word	0x20001d68

08001e34 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d062      	beq.n	8001f0c <vTaskPriorityInherit+0xd8>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e4a:	4b32      	ldr	r3, [pc, #200]	; (8001f14 <vTaskPriorityInherit+0xe0>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d25b      	bcs.n	8001f0c <vTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	699b      	ldr	r3, [r3, #24]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	db06      	blt.n	8001e6a <vTaskPriorityInherit+0x36>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001e5c:	4b2d      	ldr	r3, [pc, #180]	; (8001f14 <vTaskPriorityInherit+0xe0>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e62:	f1c3 0205 	rsb	r2, r3, #5
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	6959      	ldr	r1, [r3, #20]
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e72:	4613      	mov	r3, r2
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	4413      	add	r3, r2
 8001e78:	009b      	lsls	r3, r3, #2
 8001e7a:	4a27      	ldr	r2, [pc, #156]	; (8001f18 <vTaskPriorityInherit+0xe4>)
 8001e7c:	4413      	add	r3, r2
 8001e7e:	4299      	cmp	r1, r3
 8001e80:	d101      	bne.n	8001e86 <vTaskPriorityInherit+0x52>
 8001e82:	2301      	movs	r3, #1
 8001e84:	e000      	b.n	8001e88 <vTaskPriorityInherit+0x54>
 8001e86:	2300      	movs	r3, #0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d03a      	beq.n	8001f02 <vTaskPriorityInherit+0xce>
				{
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	3304      	adds	r3, #4
 8001e90:	4618      	mov	r0, r3
 8001e92:	f7fe fa27 	bl	80002e4 <uxListRemove>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d115      	bne.n	8001ec8 <vTaskPriorityInherit+0x94>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ea0:	491d      	ldr	r1, [pc, #116]	; (8001f18 <vTaskPriorityInherit+0xe4>)
 8001ea2:	4613      	mov	r3, r2
 8001ea4:	009b      	lsls	r3, r3, #2
 8001ea6:	4413      	add	r3, r2
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	440b      	add	r3, r1
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d10a      	bne.n	8001ec8 <vTaskPriorityInherit+0x94>
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebc:	43da      	mvns	r2, r3
 8001ebe:	4b17      	ldr	r3, [pc, #92]	; (8001f1c <vTaskPriorityInherit+0xe8>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	4a15      	ldr	r2, [pc, #84]	; (8001f1c <vTaskPriorityInherit+0xe8>)
 8001ec6:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8001ec8:	4b12      	ldr	r3, [pc, #72]	; (8001f14 <vTaskPriorityInherit+0xe0>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	409a      	lsls	r2, r3
 8001eda:	4b10      	ldr	r3, [pc, #64]	; (8001f1c <vTaskPriorityInherit+0xe8>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	4a0e      	ldr	r2, [pc, #56]	; (8001f1c <vTaskPriorityInherit+0xe8>)
 8001ee2:	6013      	str	r3, [r2, #0]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ee8:	4613      	mov	r3, r2
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	4413      	add	r3, r2
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	4a09      	ldr	r2, [pc, #36]	; (8001f18 <vTaskPriorityInherit+0xe4>)
 8001ef2:	441a      	add	r2, r3
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	3304      	adds	r3, #4
 8001ef8:	4619      	mov	r1, r3
 8001efa:	4610      	mov	r0, r2
 8001efc:	f7fe f995 	bl	800022a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8001f00:	e004      	b.n	8001f0c <vTaskPriorityInherit+0xd8>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8001f02:	4b04      	ldr	r3, [pc, #16]	; (8001f14 <vTaskPriorityInherit+0xe0>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	62da      	str	r2, [r3, #44]	; 0x2c
	}
 8001f0c:	bf00      	nop
 8001f0e:	3710      	adds	r7, #16
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	20001c68 	.word	0x20001c68
 8001f18:	20001c6c 	.word	0x20001c6c
 8001f1c:	20001d48 	.word	0x20001d48

08001f20 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b086      	sub	sp, #24
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d06c      	beq.n	8002010 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8001f36:	4b39      	ldr	r3, [pc, #228]	; (800201c <xTaskPriorityDisinherit+0xfc>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	693a      	ldr	r2, [r7, #16]
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d009      	beq.n	8001f54 <xTaskPriorityDisinherit+0x34>
 8001f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f44:	f383 8811 	msr	BASEPRI, r3
 8001f48:	f3bf 8f6f 	isb	sy
 8001f4c:	f3bf 8f4f 	dsb	sy
 8001f50:	60fb      	str	r3, [r7, #12]
 8001f52:	e7fe      	b.n	8001f52 <xTaskPriorityDisinherit+0x32>

			configASSERT( pxTCB->uxMutexesHeld );
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d109      	bne.n	8001f70 <xTaskPriorityDisinherit+0x50>
 8001f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f60:	f383 8811 	msr	BASEPRI, r3
 8001f64:	f3bf 8f6f 	isb	sy
 8001f68:	f3bf 8f4f 	dsb	sy
 8001f6c:	60bb      	str	r3, [r7, #8]
 8001f6e:	e7fe      	b.n	8001f6e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f74:	1e5a      	subs	r2, r3, #1
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	645a      	str	r2, [r3, #68]	; 0x44

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d044      	beq.n	8002010 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d140      	bne.n	8002010 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	3304      	adds	r3, #4
 8001f92:	4618      	mov	r0, r3
 8001f94:	f7fe f9a6 	bl	80002e4 <uxListRemove>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d115      	bne.n	8001fca <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fa2:	491f      	ldr	r1, [pc, #124]	; (8002020 <xTaskPriorityDisinherit+0x100>)
 8001fa4:	4613      	mov	r3, r2
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	4413      	add	r3, r2
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	440b      	add	r3, r1
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d10a      	bne.n	8001fca <xTaskPriorityDisinherit+0xaa>
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fb8:	2201      	movs	r2, #1
 8001fba:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbe:	43da      	mvns	r2, r3
 8001fc0:	4b18      	ldr	r3, [pc, #96]	; (8002024 <xTaskPriorityDisinherit+0x104>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	4a17      	ldr	r2, [pc, #92]	; (8002024 <xTaskPriorityDisinherit+0x104>)
 8001fc8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fd6:	f1c3 0205 	rsb	r2, r3, #5
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	409a      	lsls	r2, r3
 8001fe6:	4b0f      	ldr	r3, [pc, #60]	; (8002024 <xTaskPriorityDisinherit+0x104>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4313      	orrs	r3, r2
 8001fec:	4a0d      	ldr	r2, [pc, #52]	; (8002024 <xTaskPriorityDisinherit+0x104>)
 8001fee:	6013      	str	r3, [r2, #0]
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ff4:	4613      	mov	r3, r2
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	4413      	add	r3, r2
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	4a08      	ldr	r2, [pc, #32]	; (8002020 <xTaskPriorityDisinherit+0x100>)
 8001ffe:	441a      	add	r2, r3
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	3304      	adds	r3, #4
 8002004:	4619      	mov	r1, r3
 8002006:	4610      	mov	r0, r2
 8002008:	f7fe f90f 	bl	800022a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800200c:	2301      	movs	r3, #1
 800200e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8002010:	697b      	ldr	r3, [r7, #20]
	}
 8002012:	4618      	mov	r0, r3
 8002014:	3718      	adds	r7, #24
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	20001c68 	.word	0x20001c68
 8002020:	20001c6c 	.word	0x20001c6c
 8002024:	20001d48 	.word	0x20001d48

08002028 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800202c:	4b07      	ldr	r3, [pc, #28]	; (800204c <pvTaskIncrementMutexHeldCount+0x24>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d004      	beq.n	800203e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8002034:	4b05      	ldr	r3, [pc, #20]	; (800204c <pvTaskIncrementMutexHeldCount+0x24>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800203a:	3201      	adds	r2, #1
 800203c:	645a      	str	r2, [r3, #68]	; 0x44
		}

		return pxCurrentTCB;
 800203e:	4b03      	ldr	r3, [pc, #12]	; (800204c <pvTaskIncrementMutexHeldCount+0x24>)
 8002040:	681b      	ldr	r3, [r3, #0]
	}
 8002042:	4618      	mov	r0, r3
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr
 800204c:	20001c68 	.word	0x20001c68

08002050 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b084      	sub	sp, #16
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
 8002058:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800205a:	4b29      	ldr	r3, [pc, #164]	; (8002100 <prvAddCurrentTaskToDelayedList+0xb0>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002060:	4b28      	ldr	r3, [pc, #160]	; (8002104 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	3304      	adds	r3, #4
 8002066:	4618      	mov	r0, r3
 8002068:	f7fe f93c 	bl	80002e4 <uxListRemove>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d10b      	bne.n	800208a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8002072:	4b24      	ldr	r3, [pc, #144]	; (8002104 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002078:	2201      	movs	r2, #1
 800207a:	fa02 f303 	lsl.w	r3, r2, r3
 800207e:	43da      	mvns	r2, r3
 8002080:	4b21      	ldr	r3, [pc, #132]	; (8002108 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4013      	ands	r3, r2
 8002086:	4a20      	ldr	r2, [pc, #128]	; (8002108 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002088:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002090:	d10a      	bne.n	80020a8 <prvAddCurrentTaskToDelayedList+0x58>
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d007      	beq.n	80020a8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002098:	4b1a      	ldr	r3, [pc, #104]	; (8002104 <prvAddCurrentTaskToDelayedList+0xb4>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	3304      	adds	r3, #4
 800209e:	4619      	mov	r1, r3
 80020a0:	481a      	ldr	r0, [pc, #104]	; (800210c <prvAddCurrentTaskToDelayedList+0xbc>)
 80020a2:	f7fe f8c2 	bl	800022a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80020a6:	e026      	b.n	80020f6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80020a8:	68fa      	ldr	r2, [r7, #12]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4413      	add	r3, r2
 80020ae:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80020b0:	4b14      	ldr	r3, [pc, #80]	; (8002104 <prvAddCurrentTaskToDelayedList+0xb4>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	68ba      	ldr	r2, [r7, #8]
 80020b6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80020b8:	68ba      	ldr	r2, [r7, #8]
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	429a      	cmp	r2, r3
 80020be:	d209      	bcs.n	80020d4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80020c0:	4b13      	ldr	r3, [pc, #76]	; (8002110 <prvAddCurrentTaskToDelayedList+0xc0>)
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	4b0f      	ldr	r3, [pc, #60]	; (8002104 <prvAddCurrentTaskToDelayedList+0xb4>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	3304      	adds	r3, #4
 80020ca:	4619      	mov	r1, r3
 80020cc:	4610      	mov	r0, r2
 80020ce:	f7fe f8d0 	bl	8000272 <vListInsert>
}
 80020d2:	e010      	b.n	80020f6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80020d4:	4b0f      	ldr	r3, [pc, #60]	; (8002114 <prvAddCurrentTaskToDelayedList+0xc4>)
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	4b0a      	ldr	r3, [pc, #40]	; (8002104 <prvAddCurrentTaskToDelayedList+0xb4>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	3304      	adds	r3, #4
 80020de:	4619      	mov	r1, r3
 80020e0:	4610      	mov	r0, r2
 80020e2:	f7fe f8c6 	bl	8000272 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80020e6:	4b0c      	ldr	r3, [pc, #48]	; (8002118 <prvAddCurrentTaskToDelayedList+0xc8>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	68ba      	ldr	r2, [r7, #8]
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d202      	bcs.n	80020f6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80020f0:	4a09      	ldr	r2, [pc, #36]	; (8002118 <prvAddCurrentTaskToDelayedList+0xc8>)
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	6013      	str	r3, [r2, #0]
}
 80020f6:	bf00      	nop
 80020f8:	3710      	adds	r7, #16
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	20001d44 	.word	0x20001d44
 8002104:	20001c68 	.word	0x20001c68
 8002108:	20001d48 	.word	0x20001d48
 800210c:	20001d2c 	.word	0x20001d2c
 8002110:	20001cfc 	.word	0x20001cfc
 8002114:	20001cf8 	.word	0x20001cf8
 8002118:	20001d60 	.word	0x20001d60

0800211c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION; /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b084      	sub	sp, #16
 8002120:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 8002122:	2300      	movs	r3, #0
 8002124:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8002126:	f000 fadd 	bl	80026e4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800212a:	4b11      	ldr	r3, [pc, #68]	; (8002170 <xTimerCreateTimerTask+0x54>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d00b      	beq.n	800214a <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 8002132:	4b10      	ldr	r3, [pc, #64]	; (8002174 <xTimerCreateTimerTask+0x58>)
 8002134:	9301      	str	r3, [sp, #4]
 8002136:	2303      	movs	r3, #3
 8002138:	9300      	str	r3, [sp, #0]
 800213a:	2300      	movs	r3, #0
 800213c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002140:	490d      	ldr	r1, [pc, #52]	; (8002178 <xTimerCreateTimerTask+0x5c>)
 8002142:	480e      	ldr	r0, [pc, #56]	; (800217c <xTimerCreateTimerTask+0x60>)
 8002144:	f7ff f8d2 	bl	80012ec <xTaskCreate>
 8002148:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d109      	bne.n	8002164 <xTimerCreateTimerTask+0x48>
 8002150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002154:	f383 8811 	msr	BASEPRI, r3
 8002158:	f3bf 8f6f 	isb	sy
 800215c:	f3bf 8f4f 	dsb	sy
 8002160:	603b      	str	r3, [r7, #0]
 8002162:	e7fe      	b.n	8002162 <xTimerCreateTimerTask+0x46>
	return xReturn;
 8002164:	687b      	ldr	r3, [r7, #4]
}
 8002166:	4618      	mov	r0, r3
 8002168:	3708      	adds	r7, #8
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	20001d9c 	.word	0x20001d9c
 8002174:	20001da0 	.word	0x20001da0
 8002178:	08003cd4 	.word	0x08003cd4
 800217c:	08002335 	.word	0x08002335

08002180 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002180:	b580      	push	{r7, lr}
 8002182:	b088      	sub	sp, #32
 8002184:	af02      	add	r7, sp, #8
 8002186:	60f8      	str	r0, [r7, #12]
 8002188:	60b9      	str	r1, [r7, #8]
 800218a:	607a      	str	r2, [r7, #4]
 800218c:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 800218e:	2028      	movs	r0, #40	; 0x28
 8002190:	f7fe fae6 	bl	8000760 <pvPortMalloc>
 8002194:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d009      	beq.n	80021b0 <xTimerCreate+0x30>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	9301      	str	r3, [sp, #4]
 80021a0:	6a3b      	ldr	r3, [r7, #32]
 80021a2:	9300      	str	r3, [sp, #0]
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	68b9      	ldr	r1, [r7, #8]
 80021aa:	68f8      	ldr	r0, [r7, #12]
 80021ac:	f000 f805 	bl	80021ba <prvInitialiseNewTimer>
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 80021b0:	697b      	ldr	r3, [r7, #20]
	}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3718      	adds	r7, #24
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}

080021ba <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 80021ba:	b580      	push	{r7, lr}
 80021bc:	b086      	sub	sp, #24
 80021be:	af00      	add	r7, sp, #0
 80021c0:	60f8      	str	r0, [r7, #12]
 80021c2:	60b9      	str	r1, [r7, #8]
 80021c4:	607a      	str	r2, [r7, #4]
 80021c6:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d109      	bne.n	80021e2 <prvInitialiseNewTimer+0x28>
 80021ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021d2:	f383 8811 	msr	BASEPRI, r3
 80021d6:	f3bf 8f6f 	isb	sy
 80021da:	f3bf 8f4f 	dsb	sy
 80021de:	617b      	str	r3, [r7, #20]
 80021e0:	e7fe      	b.n	80021e0 <prvInitialiseNewTimer+0x26>

	if( pxNewTimer != NULL )
 80021e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d015      	beq.n	8002214 <prvInitialiseNewTimer+0x5a>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 80021e8:	f000 fa7c 	bl	80026e4 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 80021ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ee:	68fa      	ldr	r2, [r7, #12]
 80021f0:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80021f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f4:	68ba      	ldr	r2, [r7, #8]
 80021f6:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 80021f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 80021fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002200:	683a      	ldr	r2, [r7, #0]
 8002202:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8002204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002206:	6a3a      	ldr	r2, [r7, #32]
 8002208:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800220a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800220c:	3304      	adds	r3, #4
 800220e:	4618      	mov	r0, r3
 8002210:	f7fd fffe 	bl	8000210 <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8002214:	bf00      	nop
 8002216:	3718      	adds	r7, #24
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}

0800221c <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b08a      	sub	sp, #40	; 0x28
 8002220:	af00      	add	r7, sp, #0
 8002222:	60f8      	str	r0, [r7, #12]
 8002224:	60b9      	str	r1, [r7, #8]
 8002226:	607a      	str	r2, [r7, #4]
 8002228:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800222a:	2300      	movs	r3, #0
 800222c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d109      	bne.n	8002248 <xTimerGenericCommand+0x2c>
 8002234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002238:	f383 8811 	msr	BASEPRI, r3
 800223c:	f3bf 8f6f 	isb	sy
 8002240:	f3bf 8f4f 	dsb	sy
 8002244:	623b      	str	r3, [r7, #32]
 8002246:	e7fe      	b.n	8002246 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8002248:	4b19      	ldr	r3, [pc, #100]	; (80022b0 <xTimerGenericCommand+0x94>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d02a      	beq.n	80022a6 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	2b05      	cmp	r3, #5
 8002260:	dc18      	bgt.n	8002294 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8002262:	f7ff fdc9 	bl	8001df8 <xTaskGetSchedulerState>
 8002266:	4603      	mov	r3, r0
 8002268:	2b02      	cmp	r3, #2
 800226a:	d109      	bne.n	8002280 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800226c:	4b10      	ldr	r3, [pc, #64]	; (80022b0 <xTimerGenericCommand+0x94>)
 800226e:	6818      	ldr	r0, [r3, #0]
 8002270:	f107 0114 	add.w	r1, r7, #20
 8002274:	2300      	movs	r3, #0
 8002276:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002278:	f7fe fba2 	bl	80009c0 <xQueueGenericSend>
 800227c:	6278      	str	r0, [r7, #36]	; 0x24
 800227e:	e012      	b.n	80022a6 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8002280:	4b0b      	ldr	r3, [pc, #44]	; (80022b0 <xTimerGenericCommand+0x94>)
 8002282:	6818      	ldr	r0, [r3, #0]
 8002284:	f107 0114 	add.w	r1, r7, #20
 8002288:	2300      	movs	r3, #0
 800228a:	2200      	movs	r2, #0
 800228c:	f7fe fb98 	bl	80009c0 <xQueueGenericSend>
 8002290:	6278      	str	r0, [r7, #36]	; 0x24
 8002292:	e008      	b.n	80022a6 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8002294:	4b06      	ldr	r3, [pc, #24]	; (80022b0 <xTimerGenericCommand+0x94>)
 8002296:	6818      	ldr	r0, [r3, #0]
 8002298:	f107 0114 	add.w	r1, r7, #20
 800229c:	2300      	movs	r3, #0
 800229e:	683a      	ldr	r2, [r7, #0]
 80022a0:	f7fe fc88 	bl	8000bb4 <xQueueGenericSendFromISR>
 80022a4:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80022a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3728      	adds	r7, #40	; 0x28
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	20001d9c 	.word	0x20001d9c

080022b4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b088      	sub	sp, #32
 80022b8:	af02      	add	r7, sp, #8
 80022ba:	6078      	str	r0, [r7, #4]
 80022bc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80022be:	4b1c      	ldr	r3, [pc, #112]	; (8002330 <prvProcessExpiredTimer+0x7c>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	68db      	ldr	r3, [r3, #12]
 80022c6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	3304      	adds	r3, #4
 80022cc:	4618      	mov	r0, r3
 80022ce:	f7fe f809 	bl	80002e4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	69db      	ldr	r3, [r3, #28]
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d121      	bne.n	800231e <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	699a      	ldr	r2, [r3, #24]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	18d1      	adds	r1, r2, r3
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	683a      	ldr	r2, [r7, #0]
 80022e6:	6978      	ldr	r0, [r7, #20]
 80022e8:	f000 f8c8 	bl	800247c <prvInsertTimerInActiveList>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d015      	beq.n	800231e <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80022f2:	2300      	movs	r3, #0
 80022f4:	9300      	str	r3, [sp, #0]
 80022f6:	2300      	movs	r3, #0
 80022f8:	687a      	ldr	r2, [r7, #4]
 80022fa:	2100      	movs	r1, #0
 80022fc:	6978      	ldr	r0, [r7, #20]
 80022fe:	f7ff ff8d 	bl	800221c <xTimerGenericCommand>
 8002302:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d109      	bne.n	800231e <prvProcessExpiredTimer+0x6a>
 800230a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800230e:	f383 8811 	msr	BASEPRI, r3
 8002312:	f3bf 8f6f 	isb	sy
 8002316:	f3bf 8f4f 	dsb	sy
 800231a:	60fb      	str	r3, [r7, #12]
 800231c:	e7fe      	b.n	800231c <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002322:	6978      	ldr	r0, [r7, #20]
 8002324:	4798      	blx	r3
}
 8002326:	bf00      	nop
 8002328:	3718      	adds	r7, #24
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	20001d94 	.word	0x20001d94

08002334 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b084      	sub	sp, #16
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800233c:	f107 0308 	add.w	r3, r7, #8
 8002340:	4618      	mov	r0, r3
 8002342:	f000 f857 	bl	80023f4 <prvGetNextExpireTime>
 8002346:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	4619      	mov	r1, r3
 800234c:	68f8      	ldr	r0, [r7, #12]
 800234e:	f000 f803 	bl	8002358 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8002352:	f000 f8d5 	bl	8002500 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002356:	e7f1      	b.n	800233c <prvTimerTask+0x8>

08002358 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b084      	sub	sp, #16
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
 8002360:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8002362:	f7ff f941 	bl	80015e8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002366:	f107 0308 	add.w	r3, r7, #8
 800236a:	4618      	mov	r0, r3
 800236c:	f000 f866 	bl	800243c <prvSampleTimeNow>
 8002370:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d130      	bne.n	80023da <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d10a      	bne.n	8002394 <prvProcessTimerOrBlockTask+0x3c>
 800237e:	687a      	ldr	r2, [r7, #4]
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	429a      	cmp	r2, r3
 8002384:	d806      	bhi.n	8002394 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8002386:	f7ff f93d 	bl	8001604 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800238a:	68f9      	ldr	r1, [r7, #12]
 800238c:	6878      	ldr	r0, [r7, #4]
 800238e:	f7ff ff91 	bl	80022b4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8002392:	e024      	b.n	80023de <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d008      	beq.n	80023ac <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800239a:	4b13      	ldr	r3, [pc, #76]	; (80023e8 <prvProcessTimerOrBlockTask+0x90>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	bf0c      	ite	eq
 80023a4:	2301      	moveq	r3, #1
 80023a6:	2300      	movne	r3, #0
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80023ac:	4b0f      	ldr	r3, [pc, #60]	; (80023ec <prvProcessTimerOrBlockTask+0x94>)
 80023ae:	6818      	ldr	r0, [r3, #0]
 80023b0:	687a      	ldr	r2, [r7, #4]
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	683a      	ldr	r2, [r7, #0]
 80023b8:	4619      	mov	r1, r3
 80023ba:	f7fe ff63 	bl	8001284 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80023be:	f7ff f921 	bl	8001604 <xTaskResumeAll>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d10a      	bne.n	80023de <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80023c8:	4b09      	ldr	r3, [pc, #36]	; (80023f0 <prvProcessTimerOrBlockTask+0x98>)
 80023ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80023ce:	601a      	str	r2, [r3, #0]
 80023d0:	f3bf 8f4f 	dsb	sy
 80023d4:	f3bf 8f6f 	isb	sy
}
 80023d8:	e001      	b.n	80023de <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80023da:	f7ff f913 	bl	8001604 <xTaskResumeAll>
}
 80023de:	bf00      	nop
 80023e0:	3710      	adds	r7, #16
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	20001d98 	.word	0x20001d98
 80023ec:	20001d9c 	.word	0x20001d9c
 80023f0:	e000ed04 	.word	0xe000ed04

080023f4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80023f4:	b480      	push	{r7}
 80023f6:	b085      	sub	sp, #20
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80023fc:	4b0e      	ldr	r3, [pc, #56]	; (8002438 <prvGetNextExpireTime+0x44>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	2b00      	cmp	r3, #0
 8002404:	bf0c      	ite	eq
 8002406:	2301      	moveq	r3, #1
 8002408:	2300      	movne	r3, #0
 800240a:	b2db      	uxtb	r3, r3
 800240c:	461a      	mov	r2, r3
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d105      	bne.n	8002426 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800241a:	4b07      	ldr	r3, [pc, #28]	; (8002438 <prvGetNextExpireTime+0x44>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	60fb      	str	r3, [r7, #12]
 8002424:	e001      	b.n	800242a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8002426:	2300      	movs	r3, #0
 8002428:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800242a:	68fb      	ldr	r3, [r7, #12]
}
 800242c:	4618      	mov	r0, r3
 800242e:	3714      	adds	r7, #20
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr
 8002438:	20001d94 	.word	0x20001d94

0800243c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b084      	sub	sp, #16
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8002444:	f7ff f97a 	bl	800173c <xTaskGetTickCount>
 8002448:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800244a:	4b0b      	ldr	r3, [pc, #44]	; (8002478 <prvSampleTimeNow+0x3c>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	68fa      	ldr	r2, [r7, #12]
 8002450:	429a      	cmp	r2, r3
 8002452:	d205      	bcs.n	8002460 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8002454:	f000 f8e6 	bl	8002624 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2201      	movs	r2, #1
 800245c:	601a      	str	r2, [r3, #0]
 800245e:	e002      	b.n	8002466 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2200      	movs	r2, #0
 8002464:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8002466:	4a04      	ldr	r2, [pc, #16]	; (8002478 <prvSampleTimeNow+0x3c>)
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800246c:	68fb      	ldr	r3, [r7, #12]
}
 800246e:	4618      	mov	r0, r3
 8002470:	3710      	adds	r7, #16
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	20001da4 	.word	0x20001da4

0800247c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b086      	sub	sp, #24
 8002480:	af00      	add	r7, sp, #0
 8002482:	60f8      	str	r0, [r7, #12]
 8002484:	60b9      	str	r1, [r7, #8]
 8002486:	607a      	str	r2, [r7, #4]
 8002488:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800248a:	2300      	movs	r3, #0
 800248c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	68ba      	ldr	r2, [r7, #8]
 8002492:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	68fa      	ldr	r2, [r7, #12]
 8002498:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800249a:	68ba      	ldr	r2, [r7, #8]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	429a      	cmp	r2, r3
 80024a0:	d812      	bhi.n	80024c8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80024a2:	687a      	ldr	r2, [r7, #4]
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	1ad2      	subs	r2, r2, r3
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	699b      	ldr	r3, [r3, #24]
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d302      	bcc.n	80024b6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80024b0:	2301      	movs	r3, #1
 80024b2:	617b      	str	r3, [r7, #20]
 80024b4:	e01b      	b.n	80024ee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80024b6:	4b10      	ldr	r3, [pc, #64]	; (80024f8 <prvInsertTimerInActiveList+0x7c>)
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	3304      	adds	r3, #4
 80024be:	4619      	mov	r1, r3
 80024c0:	4610      	mov	r0, r2
 80024c2:	f7fd fed6 	bl	8000272 <vListInsert>
 80024c6:	e012      	b.n	80024ee <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80024c8:	687a      	ldr	r2, [r7, #4]
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d206      	bcs.n	80024de <prvInsertTimerInActiveList+0x62>
 80024d0:	68ba      	ldr	r2, [r7, #8]
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d302      	bcc.n	80024de <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80024d8:	2301      	movs	r3, #1
 80024da:	617b      	str	r3, [r7, #20]
 80024dc:	e007      	b.n	80024ee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80024de:	4b07      	ldr	r3, [pc, #28]	; (80024fc <prvInsertTimerInActiveList+0x80>)
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	3304      	adds	r3, #4
 80024e6:	4619      	mov	r1, r3
 80024e8:	4610      	mov	r0, r2
 80024ea:	f7fd fec2 	bl	8000272 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80024ee:	697b      	ldr	r3, [r7, #20]
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3718      	adds	r7, #24
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	20001d98 	.word	0x20001d98
 80024fc:	20001d94 	.word	0x20001d94

08002500 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b08c      	sub	sp, #48	; 0x30
 8002504:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002506:	e07a      	b.n	80025fe <prvProcessReceivedCommands+0xfe>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	2b00      	cmp	r3, #0
 800250c:	db77      	blt.n	80025fe <prvProcessReceivedCommands+0xfe>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 8002512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002514:	695b      	ldr	r3, [r3, #20]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d004      	beq.n	8002524 <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800251a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251c:	3304      	adds	r3, #4
 800251e:	4618      	mov	r0, r3
 8002520:	f7fd fee0 	bl	80002e4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002524:	1d3b      	adds	r3, r7, #4
 8002526:	4618      	mov	r0, r3
 8002528:	f7ff ff88 	bl	800243c <prvSampleTimeNow>
 800252c:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	2b09      	cmp	r3, #9
 8002532:	d863      	bhi.n	80025fc <prvProcessReceivedCommands+0xfc>
 8002534:	a201      	add	r2, pc, #4	; (adr r2, 800253c <prvProcessReceivedCommands+0x3c>)
 8002536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800253a:	bf00      	nop
 800253c:	08002565 	.word	0x08002565
 8002540:	08002565 	.word	0x08002565
 8002544:	08002565 	.word	0x08002565
 8002548:	080025ff 	.word	0x080025ff
 800254c:	080025bf 	.word	0x080025bf
 8002550:	080025f5 	.word	0x080025f5
 8002554:	08002565 	.word	0x08002565
 8002558:	08002565 	.word	0x08002565
 800255c:	080025ff 	.word	0x080025ff
 8002560:	080025bf 	.word	0x080025bf
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8002564:	68fa      	ldr	r2, [r7, #12]
 8002566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002568:	699b      	ldr	r3, [r3, #24]
 800256a:	18d1      	adds	r1, r2, r3
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	6a3a      	ldr	r2, [r7, #32]
 8002570:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002572:	f7ff ff83 	bl	800247c <prvInsertTimerInActiveList>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d040      	beq.n	80025fe <prvProcessReceivedCommands+0xfe>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800257c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002580:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002582:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8002584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002586:	69db      	ldr	r3, [r3, #28]
 8002588:	2b01      	cmp	r3, #1
 800258a:	d138      	bne.n	80025fe <prvProcessReceivedCommands+0xfe>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800258c:	68fa      	ldr	r2, [r7, #12]
 800258e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002590:	699b      	ldr	r3, [r3, #24]
 8002592:	441a      	add	r2, r3
 8002594:	2300      	movs	r3, #0
 8002596:	9300      	str	r3, [sp, #0]
 8002598:	2300      	movs	r3, #0
 800259a:	2100      	movs	r1, #0
 800259c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800259e:	f7ff fe3d 	bl	800221c <xTimerGenericCommand>
 80025a2:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 80025a4:	69fb      	ldr	r3, [r7, #28]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d129      	bne.n	80025fe <prvProcessReceivedCommands+0xfe>
 80025aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025ae:	f383 8811 	msr	BASEPRI, r3
 80025b2:	f3bf 8f6f 	isb	sy
 80025b6:	f3bf 8f4f 	dsb	sy
 80025ba:	61bb      	str	r3, [r7, #24]
 80025bc:	e7fe      	b.n	80025bc <prvProcessReceivedCommands+0xbc>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80025be:	68fa      	ldr	r2, [r7, #12]
 80025c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80025c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c6:	699b      	ldr	r3, [r3, #24]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d109      	bne.n	80025e0 <prvProcessReceivedCommands+0xe0>
 80025cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025d0:	f383 8811 	msr	BASEPRI, r3
 80025d4:	f3bf 8f6f 	isb	sy
 80025d8:	f3bf 8f4f 	dsb	sy
 80025dc:	617b      	str	r3, [r7, #20]
 80025de:	e7fe      	b.n	80025de <prvProcessReceivedCommands+0xde>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80025e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e2:	699a      	ldr	r2, [r3, #24]
 80025e4:	6a3b      	ldr	r3, [r7, #32]
 80025e6:	18d1      	adds	r1, r2, r3
 80025e8:	6a3b      	ldr	r3, [r7, #32]
 80025ea:	6a3a      	ldr	r2, [r7, #32]
 80025ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80025ee:	f7ff ff45 	bl	800247c <prvInsertTimerInActiveList>
					break;
 80025f2:	e004      	b.n	80025fe <prvProcessReceivedCommands+0xfe>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
 80025f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80025f6:	f7fe f8fd 	bl	80007f4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80025fa:	e000      	b.n	80025fe <prvProcessReceivedCommands+0xfe>

				default	:
					/* Don't expect to get here. */
					break;
 80025fc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80025fe:	4b08      	ldr	r3, [pc, #32]	; (8002620 <prvProcessReceivedCommands+0x120>)
 8002600:	6818      	ldr	r0, [r3, #0]
 8002602:	f107 0108 	add.w	r1, r7, #8
 8002606:	2300      	movs	r3, #0
 8002608:	2200      	movs	r2, #0
 800260a:	f7fe fbf1 	bl	8000df0 <xQueueGenericReceive>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	f47f af79 	bne.w	8002508 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8002616:	bf00      	nop
 8002618:	3728      	adds	r7, #40	; 0x28
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	20001d9c 	.word	0x20001d9c

08002624 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b088      	sub	sp, #32
 8002628:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800262a:	e044      	b.n	80026b6 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800262c:	4b2b      	ldr	r3, [pc, #172]	; (80026dc <prvSwitchTimerLists+0xb8>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	68db      	ldr	r3, [r3, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002636:	4b29      	ldr	r3, [pc, #164]	; (80026dc <prvSwitchTimerLists+0xb8>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	68db      	ldr	r3, [r3, #12]
 800263e:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	3304      	adds	r3, #4
 8002644:	4618      	mov	r0, r3
 8002646:	f7fd fe4d 	bl	80002e4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800264e:	6938      	ldr	r0, [r7, #16]
 8002650:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	69db      	ldr	r3, [r3, #28]
 8002656:	2b01      	cmp	r3, #1
 8002658:	d12d      	bne.n	80026b6 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	699a      	ldr	r2, [r3, #24]
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	4413      	add	r3, r2
 8002662:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
 8002664:	68fa      	ldr	r2, [r7, #12]
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	429a      	cmp	r2, r3
 800266a:	d90e      	bls.n	800268a <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	68fa      	ldr	r2, [r7, #12]
 8002670:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	693a      	ldr	r2, [r7, #16]
 8002676:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002678:	4b18      	ldr	r3, [pc, #96]	; (80026dc <prvSwitchTimerLists+0xb8>)
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	3304      	adds	r3, #4
 8002680:	4619      	mov	r1, r3
 8002682:	4610      	mov	r0, r2
 8002684:	f7fd fdf5 	bl	8000272 <vListInsert>
 8002688:	e015      	b.n	80026b6 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800268a:	2300      	movs	r3, #0
 800268c:	9300      	str	r3, [sp, #0]
 800268e:	2300      	movs	r3, #0
 8002690:	697a      	ldr	r2, [r7, #20]
 8002692:	2100      	movs	r1, #0
 8002694:	6938      	ldr	r0, [r7, #16]
 8002696:	f7ff fdc1 	bl	800221c <xTimerGenericCommand>
 800269a:	60b8      	str	r0, [r7, #8]
				configASSERT( xResult );
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d109      	bne.n	80026b6 <prvSwitchTimerLists+0x92>
 80026a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026a6:	f383 8811 	msr	BASEPRI, r3
 80026aa:	f3bf 8f6f 	isb	sy
 80026ae:	f3bf 8f4f 	dsb	sy
 80026b2:	603b      	str	r3, [r7, #0]
 80026b4:	e7fe      	b.n	80026b4 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80026b6:	4b09      	ldr	r3, [pc, #36]	; (80026dc <prvSwitchTimerLists+0xb8>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d1b5      	bne.n	800262c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80026c0:	4b06      	ldr	r3, [pc, #24]	; (80026dc <prvSwitchTimerLists+0xb8>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
 80026c6:	4b06      	ldr	r3, [pc, #24]	; (80026e0 <prvSwitchTimerLists+0xbc>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a04      	ldr	r2, [pc, #16]	; (80026dc <prvSwitchTimerLists+0xb8>)
 80026cc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80026ce:	4a04      	ldr	r2, [pc, #16]	; (80026e0 <prvSwitchTimerLists+0xbc>)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6013      	str	r3, [r2, #0]
}
 80026d4:	bf00      	nop
 80026d6:	3718      	adds	r7, #24
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	20001d94 	.word	0x20001d94
 80026e0:	20001d98 	.word	0x20001d98

080026e4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80026e8:	f7fd ff2a 	bl	8000540 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80026ec:	4b12      	ldr	r3, [pc, #72]	; (8002738 <prvCheckForValidListAndQueue+0x54>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d11d      	bne.n	8002730 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 80026f4:	4811      	ldr	r0, [pc, #68]	; (800273c <prvCheckForValidListAndQueue+0x58>)
 80026f6:	f7fd fd6b 	bl	80001d0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80026fa:	4811      	ldr	r0, [pc, #68]	; (8002740 <prvCheckForValidListAndQueue+0x5c>)
 80026fc:	f7fd fd68 	bl	80001d0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8002700:	4b10      	ldr	r3, [pc, #64]	; (8002744 <prvCheckForValidListAndQueue+0x60>)
 8002702:	4a0e      	ldr	r2, [pc, #56]	; (800273c <prvCheckForValidListAndQueue+0x58>)
 8002704:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8002706:	4b10      	ldr	r3, [pc, #64]	; (8002748 <prvCheckForValidListAndQueue+0x64>)
 8002708:	4a0d      	ldr	r2, [pc, #52]	; (8002740 <prvCheckForValidListAndQueue+0x5c>)
 800270a:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800270c:	2200      	movs	r2, #0
 800270e:	210c      	movs	r1, #12
 8002710:	2005      	movs	r0, #5
 8002712:	f7fe f8fd 	bl	8000910 <xQueueGenericCreate>
 8002716:	4602      	mov	r2, r0
 8002718:	4b07      	ldr	r3, [pc, #28]	; (8002738 <prvCheckForValidListAndQueue+0x54>)
 800271a:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800271c:	4b06      	ldr	r3, [pc, #24]	; (8002738 <prvCheckForValidListAndQueue+0x54>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d005      	beq.n	8002730 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8002724:	4b04      	ldr	r3, [pc, #16]	; (8002738 <prvCheckForValidListAndQueue+0x54>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4908      	ldr	r1, [pc, #32]	; (800274c <prvCheckForValidListAndQueue+0x68>)
 800272a:	4618      	mov	r0, r3
 800272c:	f7fe fd82 	bl	8001234 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002730:	f7fd ff34 	bl	800059c <vPortExitCritical>
}
 8002734:	bf00      	nop
 8002736:	bd80      	pop	{r7, pc}
 8002738:	20001d9c 	.word	0x20001d9c
 800273c:	20001d6c 	.word	0x20001d6c
 8002740:	20001d80 	.word	0x20001d80
 8002744:	20001d94 	.word	0x20001d94
 8002748:	20001d98 	.word	0x20001d98
 800274c:	08003cdc 	.word	0x08003cdc

08002750 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8002750:	b480      	push	{r7}
 8002752:	b085      	sub	sp, #20
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8002758:	2300      	movs	r3, #0
 800275a:	73fb      	strb	r3, [r7, #15]
 800275c:	2300      	movs	r3, #0
 800275e:	73bb      	strb	r3, [r7, #14]
 8002760:	230f      	movs	r3, #15
 8002762:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	78db      	ldrb	r3, [r3, #3]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d039      	beq.n	80027e0 <NVIC_Init+0x90>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 800276c:	4b27      	ldr	r3, [pc, #156]	; (800280c <NVIC_Init+0xbc>)
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	43db      	mvns	r3, r3
 8002772:	0a1b      	lsrs	r3, r3, #8
 8002774:	b2db      	uxtb	r3, r3
 8002776:	f003 0307 	and.w	r3, r3, #7
 800277a:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 800277c:	7bfb      	ldrb	r3, [r7, #15]
 800277e:	f1c3 0304 	rsb	r3, r3, #4
 8002782:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 8002784:	7b7a      	ldrb	r2, [r7, #13]
 8002786:	7bfb      	ldrb	r3, [r7, #15]
 8002788:	fa42 f303 	asr.w	r3, r2, r3
 800278c:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	785b      	ldrb	r3, [r3, #1]
 8002792:	461a      	mov	r2, r3
 8002794:	7bbb      	ldrb	r3, [r7, #14]
 8002796:	fa02 f303 	lsl.w	r3, r2, r3
 800279a:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	789a      	ldrb	r2, [r3, #2]
 80027a0:	7b7b      	ldrb	r3, [r7, #13]
 80027a2:	4013      	ands	r3, r2
 80027a4:	b2da      	uxtb	r2, r3
 80027a6:	7bfb      	ldrb	r3, [r7, #15]
 80027a8:	4313      	orrs	r3, r2
 80027aa:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 80027ac:	7bfb      	ldrb	r3, [r7, #15]
 80027ae:	011b      	lsls	r3, r3, #4
 80027b0:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80027b2:	4a17      	ldr	r2, [pc, #92]	; (8002810 <NVIC_Init+0xc0>)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	4413      	add	r3, r2
 80027ba:	7bfa      	ldrb	r2, [r7, #15]
 80027bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80027c0:	4a13      	ldr	r2, [pc, #76]	; (8002810 <NVIC_Init+0xc0>)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	781b      	ldrb	r3, [r3, #0]
 80027c6:	095b      	lsrs	r3, r3, #5
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	f003 031f 	and.w	r3, r3, #31
 80027d4:	2101      	movs	r1, #1
 80027d6:	fa01 f303 	lsl.w	r3, r1, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80027da:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 80027de:	e00f      	b.n	8002800 <NVIC_Init+0xb0>
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80027e0:	490b      	ldr	r1, [pc, #44]	; (8002810 <NVIC_Init+0xc0>)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	781b      	ldrb	r3, [r3, #0]
 80027e6:	095b      	lsrs	r3, r3, #5
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	781b      	ldrb	r3, [r3, #0]
 80027f0:	f003 031f 	and.w	r3, r3, #31
 80027f4:	2201      	movs	r2, #1
 80027f6:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80027f8:	f100 0320 	add.w	r3, r0, #32
 80027fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002800:	bf00      	nop
 8002802:	3714      	adds	r7, #20
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr
 800280c:	e000ed00 	.word	0xe000ed00
 8002810:	e000e100 	.word	0xe000e100

08002814 <DAC_SetChannel1Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
 8002814:	b480      	push	{r7}
 8002816:	b085      	sub	sp, #20
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
 800281c:	460b      	mov	r3, r1
 800281e:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 8002820:	2300      	movs	r3, #0
 8002822:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
 8002824:	4b08      	ldr	r3, [pc, #32]	; (8002848 <DAC_SetChannel1Data+0x34>)
 8002826:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R1_OFFSET + DAC_Align;
 8002828:	68fa      	ldr	r2, [r7, #12]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	4413      	add	r3, r2
 800282e:	3308      	adds	r3, #8
 8002830:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	461a      	mov	r2, r3
 8002836:	887b      	ldrh	r3, [r7, #2]
 8002838:	6013      	str	r3, [r2, #0]
}
 800283a:	bf00      	nop
 800283c:	3714      	adds	r7, #20
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr
 8002846:	bf00      	nop
 8002848:	40007400 	.word	0x40007400

0800284c <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 800284c:	b480      	push	{r7}
 800284e:	b085      	sub	sp, #20
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
 8002854:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8002856:	2300      	movs	r3, #0
 8002858:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002860:	68fa      	ldr	r2, [r7, #12]
 8002862:	4b25      	ldr	r3, [pc, #148]	; (80028f8 <DMA_Init+0xac>)
 8002864:	4013      	ands	r3, r2
 8002866:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	695b      	ldr	r3, [r3, #20]
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8002876:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	699b      	ldr	r3, [r3, #24]
 800287c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	69db      	ldr	r3, [r3, #28]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8002882:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	6a1b      	ldr	r3, [r3, #32]
 8002888:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800288e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002894:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 800289a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028a0:	4313      	orrs	r3, r2
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 80028a2:	68fa      	ldr	r2, [r7, #12]
 80028a4:	4313      	orrs	r3, r2
 80028a6:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	68fa      	ldr	r2, [r7, #12]
 80028ac:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	695b      	ldr	r3, [r3, #20]
 80028b2:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	f023 0307 	bic.w	r3, r3, #7
 80028ba:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c4:	4313      	orrs	r3, r2
 80028c6:	68fa      	ldr	r2, [r7, #12]
 80028c8:	4313      	orrs	r3, r2
 80028ca:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	68fa      	ldr	r2, [r7, #12]
 80028d0:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	691a      	ldr	r2, [r3, #16]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	685a      	ldr	r2, [r3, #4]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	689a      	ldr	r2, [r3, #8]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	60da      	str	r2, [r3, #12]
}
 80028ea:	bf00      	nop
 80028ec:	3714      	adds	r7, #20
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr
 80028f6:	bf00      	nop
 80028f8:	f01c803f 	.word	0xf01c803f

080028fc <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b083      	sub	sp, #12
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
 8002904:	460b      	mov	r3, r1
 8002906:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002908:	78fb      	ldrb	r3, [r7, #3]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d006      	beq.n	800291c <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f043 0201 	orr.w	r2, r3, #1
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 800291a:	e005      	b.n	8002928 <DMA_Cmd+0x2c>
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f023 0201 	bic.w	r2, r3, #1
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	601a      	str	r2, [r3, #0]
}
 8002928:	bf00      	nop
 800292a:	370c      	adds	r7, #12
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr

08002934 <DMA_GetCmdStatus>:
  *          of this single data is finished.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8002934:	b480      	push	{r7}
 8002936:	b085      	sub	sp, #20
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 800293c:	2300      	movs	r3, #0
 800293e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f003 0301 	and.w	r3, r3, #1
 8002948:	2b00      	cmp	r3, #0
 800294a:	d002      	beq.n	8002952 <DMA_GetCmdStatus+0x1e>
  {
    /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
    state = ENABLE;
 800294c:	2301      	movs	r3, #1
 800294e:	73fb      	strb	r3, [r7, #15]
 8002950:	e001      	b.n	8002956 <DMA_GetCmdStatus+0x22>
  }
  else
  {
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
 8002952:	2300      	movs	r3, #0
 8002954:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 8002956:	7bfb      	ldrb	r3, [r7, #15]
}
 8002958:	4618      	mov	r0, r3
 800295a:	3714      	adds	r7, #20
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr

08002964 <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8002964:	b480      	push	{r7}
 8002966:	b087      	sub	sp, #28
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
 800296c:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 800296e:	2300      	movs	r3, #0
 8002970:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 8002972:	2300      	movs	r3, #0
 8002974:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	4a15      	ldr	r2, [pc, #84]	; (80029d0 <DMA_GetFlagStatus+0x6c>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d802      	bhi.n	8002984 <DMA_GetFlagStatus+0x20>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 800297e:	4b15      	ldr	r3, [pc, #84]	; (80029d4 <DMA_GetFlagStatus+0x70>)
 8002980:	613b      	str	r3, [r7, #16]
 8002982:	e001      	b.n	8002988 <DMA_GetFlagStatus+0x24>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8002984:	4b14      	ldr	r3, [pc, #80]	; (80029d8 <DMA_GetFlagStatus+0x74>)
 8002986:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d003      	beq.n	800299a <DMA_GetFlagStatus+0x36>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	60fb      	str	r3, [r7, #12]
 8002998:	e002      	b.n	80029a0 <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80029a6:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80029aa:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 80029ac:	68fa      	ldr	r2, [r7, #12]
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	4013      	ands	r3, r2
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d002      	beq.n	80029bc <DMA_GetFlagStatus+0x58>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 80029b6:	2301      	movs	r3, #1
 80029b8:	75fb      	strb	r3, [r7, #23]
 80029ba:	e001      	b.n	80029c0 <DMA_GetFlagStatus+0x5c>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 80029bc:	2300      	movs	r3, #0
 80029be:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 80029c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	371c      	adds	r7, #28
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr
 80029ce:	bf00      	nop
 80029d0:	4002640f 	.word	0x4002640f
 80029d4:	40026000 	.word	0x40026000
 80029d8:	40026400 	.word	0x40026400

080029dc <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 80029dc:	b480      	push	{r7}
 80029de:	b085      	sub	sp, #20
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
 80029e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4a10      	ldr	r2, [pc, #64]	; (8002a2c <DMA_ClearFlag+0x50>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d802      	bhi.n	80029f4 <DMA_ClearFlag+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 80029ee:	4b10      	ldr	r3, [pc, #64]	; (8002a30 <DMA_ClearFlag+0x54>)
 80029f0:	60fb      	str	r3, [r7, #12]
 80029f2:	e001      	b.n	80029f8 <DMA_ClearFlag+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 80029f4:	4b0f      	ldr	r3, [pc, #60]	; (8002a34 <DMA_ClearFlag+0x58>)
 80029f6:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d007      	beq.n	8002a12 <DMA_ClearFlag+0x36>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8002a08:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8002a0c:	68fa      	ldr	r2, [r7, #12]
 8002a0e:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }    
}
 8002a10:	e006      	b.n	8002a20 <DMA_ClearFlag+0x44>
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8002a18:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8002a1c:	68fa      	ldr	r2, [r7, #12]
 8002a1e:	6093      	str	r3, [r2, #8]
}
 8002a20:	bf00      	nop
 8002a22:	3714      	adds	r7, #20
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr
 8002a2c:	4002640f 	.word	0x4002640f
 8002a30:	40026000 	.word	0x40026000
 8002a34:	40026400 	.word	0x40026400

08002a38 <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b085      	sub	sp, #20
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8002a40:	2300      	movs	r3, #0
 8002a42:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 8002a44:	4b34      	ldr	r3, [pc, #208]	; (8002b18 <EXTI_Init+0xe0>)
 8002a46:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	799b      	ldrb	r3, [r3, #6]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d04f      	beq.n	8002af0 <EXTI_Init+0xb8>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 8002a50:	4931      	ldr	r1, [pc, #196]	; (8002b18 <EXTI_Init+0xe0>)
 8002a52:	4b31      	ldr	r3, [pc, #196]	; (8002b18 <EXTI_Init+0xe0>)
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	43db      	mvns	r3, r3
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	600b      	str	r3, [r1, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 8002a60:	492d      	ldr	r1, [pc, #180]	; (8002b18 <EXTI_Init+0xe0>)
 8002a62:	4b2d      	ldr	r3, [pc, #180]	; (8002b18 <EXTI_Init+0xe0>)
 8002a64:	685a      	ldr	r2, [r3, #4]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	43db      	mvns	r3, r3
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	604b      	str	r3, [r1, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	791b      	ldrb	r3, [r3, #4]
 8002a74:	461a      	mov	r2, r3
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	4413      	add	r3, r2
 8002a7a:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	68fa      	ldr	r2, [r7, #12]
 8002a80:	6811      	ldr	r1, [r2, #0]
 8002a82:	687a      	ldr	r2, [r7, #4]
 8002a84:	6812      	ldr	r2, [r2, #0]
 8002a86:	430a      	orrs	r2, r1
 8002a88:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 8002a8a:	4923      	ldr	r1, [pc, #140]	; (8002b18 <EXTI_Init+0xe0>)
 8002a8c:	4b22      	ldr	r3, [pc, #136]	; (8002b18 <EXTI_Init+0xe0>)
 8002a8e:	689a      	ldr	r2, [r3, #8]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	43db      	mvns	r3, r3
 8002a96:	4013      	ands	r3, r2
 8002a98:	608b      	str	r3, [r1, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 8002a9a:	491f      	ldr	r1, [pc, #124]	; (8002b18 <EXTI_Init+0xe0>)
 8002a9c:	4b1e      	ldr	r3, [pc, #120]	; (8002b18 <EXTI_Init+0xe0>)
 8002a9e:	68da      	ldr	r2, [r3, #12]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	43db      	mvns	r3, r3
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	60cb      	str	r3, [r1, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	795b      	ldrb	r3, [r3, #5]
 8002aae:	2b10      	cmp	r3, #16
 8002ab0:	d10e      	bne.n	8002ad0 <EXTI_Init+0x98>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 8002ab2:	4919      	ldr	r1, [pc, #100]	; (8002b18 <EXTI_Init+0xe0>)
 8002ab4:	4b18      	ldr	r3, [pc, #96]	; (8002b18 <EXTI_Init+0xe0>)
 8002ab6:	689a      	ldr	r2, [r3, #8]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	608b      	str	r3, [r1, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 8002ac0:	4915      	ldr	r1, [pc, #84]	; (8002b18 <EXTI_Init+0xe0>)
 8002ac2:	4b15      	ldr	r3, [pc, #84]	; (8002b18 <EXTI_Init+0xe0>)
 8002ac4:	68da      	ldr	r2, [r3, #12]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4313      	orrs	r3, r2
 8002acc:	60cb      	str	r3, [r1, #12]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 8002ace:	e01d      	b.n	8002b0c <EXTI_Init+0xd4>
      tmp = (uint32_t)EXTI_BASE;
 8002ad0:	4b11      	ldr	r3, [pc, #68]	; (8002b18 <EXTI_Init+0xe0>)
 8002ad2:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	795b      	ldrb	r3, [r3, #5]
 8002ad8:	461a      	mov	r2, r3
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	4413      	add	r3, r2
 8002ade:	60fb      	str	r3, [r7, #12]
      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	68fa      	ldr	r2, [r7, #12]
 8002ae4:	6811      	ldr	r1, [r2, #0]
 8002ae6:	687a      	ldr	r2, [r7, #4]
 8002ae8:	6812      	ldr	r2, [r2, #0]
 8002aea:	430a      	orrs	r2, r1
 8002aec:	601a      	str	r2, [r3, #0]
}
 8002aee:	e00d      	b.n	8002b0c <EXTI_Init+0xd4>
    tmp += EXTI_InitStruct->EXTI_Mode;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	791b      	ldrb	r3, [r3, #4]
 8002af4:	461a      	mov	r2, r3
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	4413      	add	r3, r2
 8002afa:	60fb      	str	r3, [r7, #12]
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	68fa      	ldr	r2, [r7, #12]
 8002b00:	6811      	ldr	r1, [r2, #0]
 8002b02:	687a      	ldr	r2, [r7, #4]
 8002b04:	6812      	ldr	r2, [r2, #0]
 8002b06:	43d2      	mvns	r2, r2
 8002b08:	400a      	ands	r2, r1
 8002b0a:	601a      	str	r2, [r3, #0]
}
 8002b0c:	bf00      	nop
 8002b0e:	3714      	adds	r7, #20
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr
 8002b18:	40013c00 	.word	0x40013c00

08002b1c <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b087      	sub	sp, #28
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8002b26:	2300      	movs	r3, #0
 8002b28:	617b      	str	r3, [r7, #20]
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	613b      	str	r3, [r7, #16]
 8002b2e:	2300      	movs	r3, #0
 8002b30:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8002b32:	2300      	movs	r3, #0
 8002b34:	617b      	str	r3, [r7, #20]
 8002b36:	e076      	b.n	8002c26 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8002b38:	2201      	movs	r2, #1
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b40:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	4013      	ands	r3, r2
 8002b4a:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8002b4c:	68fa      	ldr	r2, [r7, #12]
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d165      	bne.n	8002c20 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	005b      	lsls	r3, r3, #1
 8002b5c:	2103      	movs	r1, #3
 8002b5e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b62:	43db      	mvns	r3, r3
 8002b64:	401a      	ands	r2, r3
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	791b      	ldrb	r3, [r3, #4]
 8002b72:	4619      	mov	r1, r3
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	005b      	lsls	r3, r3, #1
 8002b78:	fa01 f303 	lsl.w	r3, r1, r3
 8002b7c:	431a      	orrs	r2, r3
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	791b      	ldrb	r3, [r3, #4]
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d003      	beq.n	8002b92 <GPIO_Init+0x76>
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	791b      	ldrb	r3, [r3, #4]
 8002b8e:	2b02      	cmp	r3, #2
 8002b90:	d12e      	bne.n	8002bf0 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	689a      	ldr	r2, [r3, #8]
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	005b      	lsls	r3, r3, #1
 8002b9a:	2103      	movs	r1, #3
 8002b9c:	fa01 f303 	lsl.w	r3, r1, r3
 8002ba0:	43db      	mvns	r3, r3
 8002ba2:	401a      	ands	r2, r3
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	689a      	ldr	r2, [r3, #8]
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	795b      	ldrb	r3, [r3, #5]
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	005b      	lsls	r3, r3, #1
 8002bb6:	fa01 f303 	lsl.w	r3, r1, r3
 8002bba:	431a      	orrs	r2, r3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	685a      	ldr	r2, [r3, #4]
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	b29b      	uxth	r3, r3
 8002bc8:	4619      	mov	r1, r3
 8002bca:	2301      	movs	r3, #1
 8002bcc:	408b      	lsls	r3, r1
 8002bce:	43db      	mvns	r3, r3
 8002bd0:	401a      	ands	r2, r3
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	683a      	ldr	r2, [r7, #0]
 8002bdc:	7992      	ldrb	r2, [r2, #6]
 8002bde:	4611      	mov	r1, r2
 8002be0:	697a      	ldr	r2, [r7, #20]
 8002be2:	b292      	uxth	r2, r2
 8002be4:	fa01 f202 	lsl.w	r2, r1, r2
 8002be8:	b292      	uxth	r2, r2
 8002bea:	431a      	orrs	r2, r3
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	68da      	ldr	r2, [r3, #12]
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	b29b      	uxth	r3, r3
 8002bf8:	005b      	lsls	r3, r3, #1
 8002bfa:	2103      	movs	r1, #3
 8002bfc:	fa01 f303 	lsl.w	r3, r1, r3
 8002c00:	43db      	mvns	r3, r3
 8002c02:	401a      	ands	r2, r3
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	68da      	ldr	r2, [r3, #12]
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	79db      	ldrb	r3, [r3, #7]
 8002c10:	4619      	mov	r1, r3
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	005b      	lsls	r3, r3, #1
 8002c16:	fa01 f303 	lsl.w	r3, r1, r3
 8002c1a:	431a      	orrs	r2, r3
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	3301      	adds	r3, #1
 8002c24:	617b      	str	r3, [r7, #20]
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	2b0f      	cmp	r3, #15
 8002c2a:	d985      	bls.n	8002b38 <GPIO_Init+0x1c>
    }
  }
}
 8002c2c:	bf00      	nop
 8002c2e:	371c      	adds	r7, #28
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr

08002c38 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b083      	sub	sp, #12
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
 8002c40:	460b      	mov	r3, r1
 8002c42:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	887a      	ldrh	r2, [r7, #2]
 8002c48:	831a      	strh	r2, [r3, #24]
}
 8002c4a:	bf00      	nop
 8002c4c:	370c      	adds	r7, #12
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr

08002c56 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002c56:	b480      	push	{r7}
 8002c58:	b083      	sub	sp, #12
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	6078      	str	r0, [r7, #4]
 8002c5e:	460b      	mov	r3, r1
 8002c60:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	887a      	ldrh	r2, [r7, #2]
 8002c66:	835a      	strh	r2, [r3, #26]
}
 8002c68:	bf00      	nop
 8002c6a:	370c      	adds	r7, #12
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c72:	4770      	bx	lr

08002c74 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b085      	sub	sp, #20
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
 8002c7c:	460b      	mov	r3, r1
 8002c7e:	807b      	strh	r3, [r7, #2]
 8002c80:	4613      	mov	r3, r2
 8002c82:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8002c84:	2300      	movs	r3, #0
 8002c86:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8002c8c:	787a      	ldrb	r2, [r7, #1]
 8002c8e:	887b      	ldrh	r3, [r7, #2]
 8002c90:	f003 0307 	and.w	r3, r3, #7
 8002c94:	009b      	lsls	r3, r3, #2
 8002c96:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9a:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8002c9c:	887b      	ldrh	r3, [r7, #2]
 8002c9e:	08db      	lsrs	r3, r3, #3
 8002ca0:	b29b      	uxth	r3, r3
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	887b      	ldrh	r3, [r7, #2]
 8002ca6:	08db      	lsrs	r3, r3, #3
 8002ca8:	b29b      	uxth	r3, r3
 8002caa:	461a      	mov	r2, r3
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	3208      	adds	r2, #8
 8002cb0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002cb4:	887b      	ldrh	r3, [r7, #2]
 8002cb6:	f003 0307 	and.w	r3, r3, #7
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	210f      	movs	r1, #15
 8002cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8002cc2:	43db      	mvns	r3, r3
 8002cc4:	ea02 0103 	and.w	r1, r2, r3
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	f100 0208 	add.w	r2, r0, #8
 8002cce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8002cd2:	887b      	ldrh	r3, [r7, #2]
 8002cd4:	08db      	lsrs	r3, r3, #3
 8002cd6:	b29b      	uxth	r3, r3
 8002cd8:	461a      	mov	r2, r3
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	3208      	adds	r2, #8
 8002cde:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8002ce8:	887b      	ldrh	r3, [r7, #2]
 8002cea:	08db      	lsrs	r3, r3, #3
 8002cec:	b29b      	uxth	r3, r3
 8002cee:	461a      	mov	r2, r3
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	3208      	adds	r2, #8
 8002cf4:	68b9      	ldr	r1, [r7, #8]
 8002cf6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8002cfa:	bf00      	nop
 8002cfc:	3714      	adds	r7, #20
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d04:	4770      	bx	lr
	...

08002d08 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b089      	sub	sp, #36	; 0x24
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8002d10:	2300      	movs	r3, #0
 8002d12:	61bb      	str	r3, [r7, #24]
 8002d14:	2300      	movs	r3, #0
 8002d16:	617b      	str	r3, [r7, #20]
 8002d18:	2300      	movs	r3, #0
 8002d1a:	61fb      	str	r3, [r7, #28]
 8002d1c:	2302      	movs	r3, #2
 8002d1e:	613b      	str	r3, [r7, #16]
 8002d20:	2300      	movs	r3, #0
 8002d22:	60fb      	str	r3, [r7, #12]
 8002d24:	2302      	movs	r3, #2
 8002d26:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8002d28:	4b47      	ldr	r3, [pc, #284]	; (8002e48 <RCC_GetClocksFreq+0x140>)
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	f003 030c 	and.w	r3, r3, #12
 8002d30:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 8002d32:	69bb      	ldr	r3, [r7, #24]
 8002d34:	2b04      	cmp	r3, #4
 8002d36:	d007      	beq.n	8002d48 <RCC_GetClocksFreq+0x40>
 8002d38:	2b08      	cmp	r3, #8
 8002d3a:	d009      	beq.n	8002d50 <RCC_GetClocksFreq+0x48>
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d13d      	bne.n	8002dbc <RCC_GetClocksFreq+0xb4>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	4a42      	ldr	r2, [pc, #264]	; (8002e4c <RCC_GetClocksFreq+0x144>)
 8002d44:	601a      	str	r2, [r3, #0]
      break;
 8002d46:	e03d      	b.n	8002dc4 <RCC_GetClocksFreq+0xbc>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	4a41      	ldr	r2, [pc, #260]	; (8002e50 <RCC_GetClocksFreq+0x148>)
 8002d4c:	601a      	str	r2, [r3, #0]
      break;
 8002d4e:	e039      	b.n	8002dc4 <RCC_GetClocksFreq+0xbc>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8002d50:	4b3d      	ldr	r3, [pc, #244]	; (8002e48 <RCC_GetClocksFreq+0x140>)
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	0d9b      	lsrs	r3, r3, #22
 8002d56:	f003 0301 	and.w	r3, r3, #1
 8002d5a:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d5c:	4b3a      	ldr	r3, [pc, #232]	; (8002e48 <RCC_GetClocksFreq+0x140>)
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d64:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d00c      	beq.n	8002d86 <RCC_GetClocksFreq+0x7e>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8002d6c:	4a38      	ldr	r2, [pc, #224]	; (8002e50 <RCC_GetClocksFreq+0x148>)
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d74:	4a34      	ldr	r2, [pc, #208]	; (8002e48 <RCC_GetClocksFreq+0x140>)
 8002d76:	6852      	ldr	r2, [r2, #4]
 8002d78:	0992      	lsrs	r2, r2, #6
 8002d7a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d7e:	fb02 f303 	mul.w	r3, r2, r3
 8002d82:	61fb      	str	r3, [r7, #28]
 8002d84:	e00b      	b.n	8002d9e <RCC_GetClocksFreq+0x96>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8002d86:	4a31      	ldr	r2, [pc, #196]	; (8002e4c <RCC_GetClocksFreq+0x144>)
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d8e:	4a2e      	ldr	r2, [pc, #184]	; (8002e48 <RCC_GetClocksFreq+0x140>)
 8002d90:	6852      	ldr	r2, [r2, #4]
 8002d92:	0992      	lsrs	r2, r2, #6
 8002d94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d98:	fb02 f303 	mul.w	r3, r2, r3
 8002d9c:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8002d9e:	4b2a      	ldr	r3, [pc, #168]	; (8002e48 <RCC_GetClocksFreq+0x140>)
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	0c1b      	lsrs	r3, r3, #16
 8002da4:	f003 0303 	and.w	r3, r3, #3
 8002da8:	3301      	adds	r3, #1
 8002daa:	005b      	lsls	r3, r3, #1
 8002dac:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8002dae:	69fa      	ldr	r2, [r7, #28]
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	fbb2 f2f3 	udiv	r2, r2, r3
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	601a      	str	r2, [r3, #0]
      break;
 8002dba:	e003      	b.n	8002dc4 <RCC_GetClocksFreq+0xbc>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	4a23      	ldr	r2, [pc, #140]	; (8002e4c <RCC_GetClocksFreq+0x144>)
 8002dc0:	601a      	str	r2, [r3, #0]
      break;
 8002dc2:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8002dc4:	4b20      	ldr	r3, [pc, #128]	; (8002e48 <RCC_GetClocksFreq+0x140>)
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002dcc:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 8002dce:	69bb      	ldr	r3, [r7, #24]
 8002dd0:	091b      	lsrs	r3, r3, #4
 8002dd2:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8002dd4:	4a1f      	ldr	r2, [pc, #124]	; (8002e54 <RCC_GetClocksFreq+0x14c>)
 8002dd6:	69bb      	ldr	r3, [r7, #24]
 8002dd8:	4413      	add	r3, r2
 8002dda:	781b      	ldrb	r3, [r3, #0]
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	40da      	lsrs	r2, r3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8002dec:	4b16      	ldr	r3, [pc, #88]	; (8002e48 <RCC_GetClocksFreq+0x140>)
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8002df4:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 8002df6:	69bb      	ldr	r3, [r7, #24]
 8002df8:	0a9b      	lsrs	r3, r3, #10
 8002dfa:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8002dfc:	4a15      	ldr	r2, [pc, #84]	; (8002e54 <RCC_GetClocksFreq+0x14c>)
 8002dfe:	69bb      	ldr	r3, [r7, #24]
 8002e00:	4413      	add	r3, r2
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	685a      	ldr	r2, [r3, #4]
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	40da      	lsrs	r2, r3
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8002e14:	4b0c      	ldr	r3, [pc, #48]	; (8002e48 <RCC_GetClocksFreq+0x140>)
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8002e1c:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 8002e1e:	69bb      	ldr	r3, [r7, #24]
 8002e20:	0b5b      	lsrs	r3, r3, #13
 8002e22:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8002e24:	4a0b      	ldr	r2, [pc, #44]	; (8002e54 <RCC_GetClocksFreq+0x14c>)
 8002e26:	69bb      	ldr	r3, [r7, #24]
 8002e28:	4413      	add	r3, r2
 8002e2a:	781b      	ldrb	r3, [r3, #0]
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	685a      	ldr	r2, [r3, #4]
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	40da      	lsrs	r2, r3
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	60da      	str	r2, [r3, #12]
}
 8002e3c:	bf00      	nop
 8002e3e:	3724      	adds	r7, #36	; 0x24
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr
 8002e48:	40023800 	.word	0x40023800
 8002e4c:	00f42400 	.word	0x00f42400
 8002e50:	007a1200 	.word	0x007a1200
 8002e54:	20000004 	.word	0x20000004

08002e58 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b083      	sub	sp, #12
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
 8002e60:	460b      	mov	r3, r1
 8002e62:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002e64:	78fb      	ldrb	r3, [r7, #3]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d006      	beq.n	8002e78 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8002e6a:	490a      	ldr	r1, [pc, #40]	; (8002e94 <RCC_AHB1PeriphClockCmd+0x3c>)
 8002e6c:	4b09      	ldr	r3, [pc, #36]	; (8002e94 <RCC_AHB1PeriphClockCmd+0x3c>)
 8002e6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	4313      	orrs	r3, r2
 8002e74:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 8002e76:	e006      	b.n	8002e86 <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8002e78:	4906      	ldr	r1, [pc, #24]	; (8002e94 <RCC_AHB1PeriphClockCmd+0x3c>)
 8002e7a:	4b06      	ldr	r3, [pc, #24]	; (8002e94 <RCC_AHB1PeriphClockCmd+0x3c>)
 8002e7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	43db      	mvns	r3, r3
 8002e82:	4013      	ands	r3, r2
 8002e84:	630b      	str	r3, [r1, #48]	; 0x30
}
 8002e86:	bf00      	nop
 8002e88:	370c      	adds	r7, #12
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr
 8002e92:	bf00      	nop
 8002e94:	40023800 	.word	0x40023800

08002e98 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b083      	sub	sp, #12
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	460b      	mov	r3, r1
 8002ea2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002ea4:	78fb      	ldrb	r3, [r7, #3]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d006      	beq.n	8002eb8 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8002eaa:	490a      	ldr	r1, [pc, #40]	; (8002ed4 <RCC_APB1PeriphClockCmd+0x3c>)
 8002eac:	4b09      	ldr	r3, [pc, #36]	; (8002ed4 <RCC_APB1PeriphClockCmd+0x3c>)
 8002eae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8002eb6:	e006      	b.n	8002ec6 <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8002eb8:	4906      	ldr	r1, [pc, #24]	; (8002ed4 <RCC_APB1PeriphClockCmd+0x3c>)
 8002eba:	4b06      	ldr	r3, [pc, #24]	; (8002ed4 <RCC_APB1PeriphClockCmd+0x3c>)
 8002ebc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	43db      	mvns	r3, r3
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	640b      	str	r3, [r1, #64]	; 0x40
}
 8002ec6:	bf00      	nop
 8002ec8:	370c      	adds	r7, #12
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed0:	4770      	bx	lr
 8002ed2:	bf00      	nop
 8002ed4:	40023800 	.word	0x40023800

08002ed8 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b083      	sub	sp, #12
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
 8002ee0:	460b      	mov	r3, r1
 8002ee2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002ee4:	78fb      	ldrb	r3, [r7, #3]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d006      	beq.n	8002ef8 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8002eea:	490a      	ldr	r1, [pc, #40]	; (8002f14 <RCC_APB2PeriphClockCmd+0x3c>)
 8002eec:	4b09      	ldr	r3, [pc, #36]	; (8002f14 <RCC_APB2PeriphClockCmd+0x3c>)
 8002eee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8002ef6:	e006      	b.n	8002f06 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8002ef8:	4906      	ldr	r1, [pc, #24]	; (8002f14 <RCC_APB2PeriphClockCmd+0x3c>)
 8002efa:	4b06      	ldr	r3, [pc, #24]	; (8002f14 <RCC_APB2PeriphClockCmd+0x3c>)
 8002efc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	43db      	mvns	r3, r3
 8002f02:	4013      	ands	r3, r2
 8002f04:	644b      	str	r3, [r1, #68]	; 0x44
}
 8002f06:	bf00      	nop
 8002f08:	370c      	adds	r7, #12
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr
 8002f12:	bf00      	nop
 8002f14:	40023800 	.word	0x40023800

08002f18 <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b083      	sub	sp, #12
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
 8002f20:	460b      	mov	r3, r1
 8002f22:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	887a      	ldrh	r2, [r7, #2]
 8002f28:	819a      	strh	r2, [r3, #12]
}
 8002f2a:	bf00      	nop
 8002f2c:	370c      	adds	r7, #12
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr

08002f36 <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8002f36:	b480      	push	{r7}
 8002f38:	b085      	sub	sp, #20
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	6078      	str	r0, [r7, #4]
 8002f3e:	460b      	mov	r3, r1
 8002f40:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8002f42:	2300      	movs	r3, #0
 8002f44:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	891b      	ldrh	r3, [r3, #8]
 8002f4a:	b29a      	uxth	r2, r3
 8002f4c:	887b      	ldrh	r3, [r7, #2]
 8002f4e:	4013      	ands	r3, r2
 8002f50:	b29b      	uxth	r3, r3
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d002      	beq.n	8002f5c <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8002f56:	2301      	movs	r3, #1
 8002f58:	73fb      	strb	r3, [r7, #15]
 8002f5a:	e001      	b.n	8002f60 <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 8002f60:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3714      	adds	r7, #20
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr
	...

08002f70 <SYSCFG_EXTILineConfig>:
  *           This parameter can be EXTI_PinSourcex where x can be (0..15, except
  *           for EXTI_PortSourceGPIOI x can be (0..11).
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 8002f70:	b490      	push	{r4, r7}
 8002f72:	b084      	sub	sp, #16
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	4603      	mov	r3, r0
 8002f78:	460a      	mov	r2, r1
 8002f7a:	71fb      	strb	r3, [r7, #7]
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 8002f80:	2300      	movs	r3, #0
 8002f82:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 8002f84:	79bb      	ldrb	r3, [r7, #6]
 8002f86:	f003 0303 	and.w	r3, r3, #3
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	220f      	movs	r2, #15
 8002f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f92:	60fb      	str	r3, [r7, #12]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 8002f94:	4916      	ldr	r1, [pc, #88]	; (8002ff0 <SYSCFG_EXTILineConfig+0x80>)
 8002f96:	79bb      	ldrb	r3, [r7, #6]
 8002f98:	089b      	lsrs	r3, r3, #2
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	4a14      	ldr	r2, [pc, #80]	; (8002ff0 <SYSCFG_EXTILineConfig+0x80>)
 8002fa0:	79bb      	ldrb	r3, [r7, #6]
 8002fa2:	089b      	lsrs	r3, r3, #2
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	3302      	adds	r3, #2
 8002fa8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	43db      	mvns	r3, r3
 8002fb0:	401a      	ands	r2, r3
 8002fb2:	1c83      	adds	r3, r0, #2
 8002fb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 8002fb8:	480d      	ldr	r0, [pc, #52]	; (8002ff0 <SYSCFG_EXTILineConfig+0x80>)
 8002fba:	79bb      	ldrb	r3, [r7, #6]
 8002fbc:	089b      	lsrs	r3, r3, #2
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	461c      	mov	r4, r3
 8002fc2:	4a0b      	ldr	r2, [pc, #44]	; (8002ff0 <SYSCFG_EXTILineConfig+0x80>)
 8002fc4:	79bb      	ldrb	r3, [r7, #6]
 8002fc6:	089b      	lsrs	r3, r3, #2
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	3302      	adds	r3, #2
 8002fcc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002fd0:	79f9      	ldrb	r1, [r7, #7]
 8002fd2:	79bb      	ldrb	r3, [r7, #6]
 8002fd4:	f003 0303 	and.w	r3, r3, #3
 8002fd8:	009b      	lsls	r3, r3, #2
 8002fda:	fa01 f303 	lsl.w	r3, r1, r3
 8002fde:	431a      	orrs	r2, r3
 8002fe0:	1ca3      	adds	r3, r4, #2
 8002fe2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8002fe6:	bf00      	nop
 8002fe8:	3710      	adds	r7, #16
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bc90      	pop	{r4, r7}
 8002fee:	4770      	bx	lr
 8002ff0:	40013800 	.word	0x40013800

08002ff4 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b08a      	sub	sp, #40	; 0x28
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
 8002ffc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 8002ffe:	2300      	movs	r3, #0
 8003000:	627b      	str	r3, [r7, #36]	; 0x24
 8003002:	2300      	movs	r3, #0
 8003004:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 8003006:	2300      	movs	r3, #0
 8003008:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 800300a:	2300      	movs	r3, #0
 800300c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	8a1b      	ldrh	r3, [r3, #16]
 8003012:	b29b      	uxth	r3, r3
 8003014:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8003016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003018:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800301c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	88db      	ldrh	r3, [r3, #6]
 8003022:	461a      	mov	r2, r3
 8003024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003026:	4313      	orrs	r3, r2
 8003028:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 800302a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302c:	b29a      	uxth	r2, r3
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	899b      	ldrh	r3, [r3, #12]
 8003036:	b29b      	uxth	r3, r3
 8003038:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 800303a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800303c:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003040:	f023 030c 	bic.w	r3, r3, #12
 8003044:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	889a      	ldrh	r2, [r3, #4]
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	891b      	ldrh	r3, [r3, #8]
 800304e:	4313      	orrs	r3, r2
 8003050:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8003056:	4313      	orrs	r3, r2
 8003058:	b29b      	uxth	r3, r3
 800305a:	461a      	mov	r2, r3
 800305c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800305e:	4313      	orrs	r3, r2
 8003060:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8003062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003064:	b29a      	uxth	r2, r3
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	8a9b      	ldrh	r3, [r3, #20]
 800306e:	b29b      	uxth	r3, r3
 8003070:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 8003072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003074:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003078:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	899b      	ldrh	r3, [r3, #12]
 800307e:	461a      	mov	r2, r3
 8003080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003082:	4313      	orrs	r3, r2
 8003084:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8003086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003088:	b29a      	uxth	r2, r3
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 800308e:	f107 0308 	add.w	r3, r7, #8
 8003092:	4618      	mov	r0, r3
 8003094:	f7ff fe38 	bl	8002d08 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	4a30      	ldr	r2, [pc, #192]	; (800315c <USART_Init+0x168>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d003      	beq.n	80030a8 <USART_Init+0xb4>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	4a2f      	ldr	r2, [pc, #188]	; (8003160 <USART_Init+0x16c>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d102      	bne.n	80030ae <USART_Init+0xba>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	623b      	str	r3, [r7, #32]
 80030ac:	e001      	b.n	80030b2 <USART_Init+0xbe>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	899b      	ldrh	r3, [r3, #12]
 80030b6:	b29b      	uxth	r3, r3
 80030b8:	b21b      	sxth	r3, r3
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	da0c      	bge.n	80030d8 <USART_Init+0xe4>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 80030be:	6a3a      	ldr	r2, [r7, #32]
 80030c0:	4613      	mov	r3, r2
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	4413      	add	r3, r2
 80030c6:	009a      	lsls	r2, r3, #2
 80030c8:	441a      	add	r2, r3
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	005b      	lsls	r3, r3, #1
 80030d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80030d4:	61fb      	str	r3, [r7, #28]
 80030d6:	e00b      	b.n	80030f0 <USART_Init+0xfc>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 80030d8:	6a3a      	ldr	r2, [r7, #32]
 80030da:	4613      	mov	r3, r2
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	4413      	add	r3, r2
 80030e0:	009a      	lsls	r2, r3, #2
 80030e2:	441a      	add	r2, r3
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	009b      	lsls	r3, r3, #2
 80030ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80030ee:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 80030f0:	69fb      	ldr	r3, [r7, #28]
 80030f2:	4a1c      	ldr	r2, [pc, #112]	; (8003164 <USART_Init+0x170>)
 80030f4:	fba2 2303 	umull	r2, r3, r2, r3
 80030f8:	095b      	lsrs	r3, r3, #5
 80030fa:	011b      	lsls	r3, r3, #4
 80030fc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 80030fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003100:	091b      	lsrs	r3, r3, #4
 8003102:	2264      	movs	r2, #100	; 0x64
 8003104:	fb02 f303 	mul.w	r3, r2, r3
 8003108:	69fa      	ldr	r2, [r7, #28]
 800310a:	1ad3      	subs	r3, r2, r3
 800310c:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	899b      	ldrh	r3, [r3, #12]
 8003112:	b29b      	uxth	r3, r3
 8003114:	b21b      	sxth	r3, r3
 8003116:	2b00      	cmp	r3, #0
 8003118:	da0c      	bge.n	8003134 <USART_Init+0x140>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 800311a:	69bb      	ldr	r3, [r7, #24]
 800311c:	00db      	lsls	r3, r3, #3
 800311e:	3332      	adds	r3, #50	; 0x32
 8003120:	4a10      	ldr	r2, [pc, #64]	; (8003164 <USART_Init+0x170>)
 8003122:	fba2 2303 	umull	r2, r3, r2, r3
 8003126:	095b      	lsrs	r3, r3, #5
 8003128:	f003 0307 	and.w	r3, r3, #7
 800312c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800312e:	4313      	orrs	r3, r2
 8003130:	627b      	str	r3, [r7, #36]	; 0x24
 8003132:	e00b      	b.n	800314c <USART_Init+0x158>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8003134:	69bb      	ldr	r3, [r7, #24]
 8003136:	011b      	lsls	r3, r3, #4
 8003138:	3332      	adds	r3, #50	; 0x32
 800313a:	4a0a      	ldr	r2, [pc, #40]	; (8003164 <USART_Init+0x170>)
 800313c:	fba2 2303 	umull	r2, r3, r2, r3
 8003140:	095b      	lsrs	r3, r3, #5
 8003142:	f003 030f 	and.w	r3, r3, #15
 8003146:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003148:	4313      	orrs	r3, r2
 800314a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 800314c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800314e:	b29a      	uxth	r2, r3
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	811a      	strh	r2, [r3, #8]
}
 8003154:	bf00      	nop
 8003156:	3728      	adds	r7, #40	; 0x28
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}
 800315c:	40011000 	.word	0x40011000
 8003160:	40011400 	.word	0x40011400
 8003164:	51eb851f 	.word	0x51eb851f

08003168 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8003168:	b480      	push	{r7}
 800316a:	b083      	sub	sp, #12
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
 8003170:	460b      	mov	r3, r1
 8003172:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8003174:	78fb      	ldrb	r3, [r7, #3]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d008      	beq.n	800318c <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	899b      	ldrh	r3, [r3, #12]
 800317e:	b29b      	uxth	r3, r3
 8003180:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003184:	b29a      	uxth	r2, r3
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
  }
}
 800318a:	e007      	b.n	800319c <USART_Cmd+0x34>
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	899b      	ldrh	r3, [r3, #12]
 8003190:	b29b      	uxth	r3, r3
 8003192:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003196:	b29a      	uxth	r2, r3
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	819a      	strh	r2, [r3, #12]
}
 800319c:	bf00      	nop
 800319e:	370c      	adds	r7, #12
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr

080031a8 <USART_ReceiveData>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
  *         UART peripheral.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b083      	sub	sp, #12
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	889b      	ldrh	r3, [r3, #4]
 80031b4:	b29b      	uxth	r3, r3
 80031b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031ba:	b29b      	uxth	r3, r3
}
 80031bc:	4618      	mov	r0, r3
 80031be:	370c      	adds	r7, #12
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr

080031c8 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b087      	sub	sp, #28
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
 80031d0:	460b      	mov	r3, r1
 80031d2:	807b      	strh	r3, [r7, #2]
 80031d4:	4613      	mov	r3, r2
 80031d6:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 80031d8:	2300      	movs	r3, #0
 80031da:	613b      	str	r3, [r7, #16]
 80031dc:	2300      	movs	r3, #0
 80031de:	60fb      	str	r3, [r7, #12]
 80031e0:	2300      	movs	r3, #0
 80031e2:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 80031e4:	2300      	movs	r3, #0
 80031e6:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  usartxbase = (uint32_t)USARTx;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 80031ec:	887b      	ldrh	r3, [r7, #2]
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	095b      	lsrs	r3, r3, #5
 80031f2:	b2db      	uxtb	r3, r3
 80031f4:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 80031f6:	887b      	ldrh	r3, [r7, #2]
 80031f8:	f003 031f 	and.w	r3, r3, #31
 80031fc:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 80031fe:	2201      	movs	r2, #1
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	fa02 f303 	lsl.w	r3, r2, r3
 8003206:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	2b01      	cmp	r3, #1
 800320c:	d103      	bne.n	8003216 <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	330c      	adds	r3, #12
 8003212:	617b      	str	r3, [r7, #20]
 8003214:	e009      	b.n	800322a <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	2b02      	cmp	r3, #2
 800321a:	d103      	bne.n	8003224 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	3310      	adds	r3, #16
 8003220:	617b      	str	r3, [r7, #20]
 8003222:	e002      	b.n	800322a <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	3314      	adds	r3, #20
 8003228:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 800322a:	787b      	ldrb	r3, [r7, #1]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d006      	beq.n	800323e <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	697a      	ldr	r2, [r7, #20]
 8003234:	6811      	ldr	r1, [r2, #0]
 8003236:	68ba      	ldr	r2, [r7, #8]
 8003238:	430a      	orrs	r2, r1
 800323a:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 800323c:	e006      	b.n	800324c <USART_ITConfig+0x84>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	697a      	ldr	r2, [r7, #20]
 8003242:	6811      	ldr	r1, [r2, #0]
 8003244:	68ba      	ldr	r2, [r7, #8]
 8003246:	43d2      	mvns	r2, r2
 8003248:	400a      	ands	r2, r1
 800324a:	601a      	str	r2, [r3, #0]
}
 800324c:	bf00      	nop
 800324e:	371c      	adds	r7, #28
 8003250:	46bd      	mov	sp, r7
 8003252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003256:	4770      	bx	lr

08003258 <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8003258:	b480      	push	{r7}
 800325a:	b087      	sub	sp, #28
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
 8003260:	460b      	mov	r3, r1
 8003262:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 8003264:	2300      	movs	r3, #0
 8003266:	60fb      	str	r3, [r7, #12]
 8003268:	2300      	movs	r3, #0
 800326a:	617b      	str	r3, [r7, #20]
 800326c:	2300      	movs	r3, #0
 800326e:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8003270:	2300      	movs	r3, #0
 8003272:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8003274:	887b      	ldrh	r3, [r7, #2]
 8003276:	b2db      	uxtb	r3, r3
 8003278:	095b      	lsrs	r3, r3, #5
 800327a:	b2db      	uxtb	r3, r3
 800327c:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 800327e:	887b      	ldrh	r3, [r7, #2]
 8003280:	f003 031f 	and.w	r3, r3, #31
 8003284:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 8003286:	2201      	movs	r2, #1
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	fa02 f303 	lsl.w	r3, r2, r3
 800328e:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	2b01      	cmp	r3, #1
 8003294:	d107      	bne.n	80032a6 <USART_GetITStatus+0x4e>
  {
    itmask &= USARTx->CR1;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	899b      	ldrh	r3, [r3, #12]
 800329a:	b29b      	uxth	r3, r3
 800329c:	461a      	mov	r2, r3
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	4013      	ands	r3, r2
 80032a2:	617b      	str	r3, [r7, #20]
 80032a4:	e011      	b.n	80032ca <USART_GetITStatus+0x72>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	2b02      	cmp	r3, #2
 80032aa:	d107      	bne.n	80032bc <USART_GetITStatus+0x64>
  {
    itmask &= USARTx->CR2;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	8a1b      	ldrh	r3, [r3, #16]
 80032b0:	b29b      	uxth	r3, r3
 80032b2:	461a      	mov	r2, r3
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	4013      	ands	r3, r2
 80032b8:	617b      	str	r3, [r7, #20]
 80032ba:	e006      	b.n	80032ca <USART_GetITStatus+0x72>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	8a9b      	ldrh	r3, [r3, #20]
 80032c0:	b29b      	uxth	r3, r3
 80032c2:	461a      	mov	r2, r3
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	4013      	ands	r3, r2
 80032c8:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 80032ca:	887b      	ldrh	r3, [r7, #2]
 80032cc:	0a1b      	lsrs	r3, r3, #8
 80032ce:	b29b      	uxth	r3, r3
 80032d0:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 80032d2:	2201      	movs	r2, #1
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	fa02 f303 	lsl.w	r3, r2, r3
 80032da:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	881b      	ldrh	r3, [r3, #0]
 80032e0:	b29b      	uxth	r3, r3
 80032e2:	461a      	mov	r2, r3
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	4013      	ands	r3, r2
 80032e8:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d005      	beq.n	80032fc <USART_GetITStatus+0xa4>
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d002      	beq.n	80032fc <USART_GetITStatus+0xa4>
  {
    bitstatus = SET;
 80032f6:	2301      	movs	r3, #1
 80032f8:	74fb      	strb	r3, [r7, #19]
 80032fa:	e001      	b.n	8003300 <USART_GetITStatus+0xa8>
  }
  else
  {
    bitstatus = RESET;
 80032fc:	2300      	movs	r3, #0
 80032fe:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8003300:	7cfb      	ldrb	r3, [r7, #19]
}
 8003302:	4618      	mov	r0, r3
 8003304:	371c      	adds	r7, #28
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr
	...

08003310 <STM_EVAL_LEDInit>:
  *     @arg LED5
  *     @arg LED6
  * @retval None
  */
void STM_EVAL_LEDInit(Led_TypeDef Led)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b084      	sub	sp, #16
 8003314:	af00      	add	r7, sp, #0
 8003316:	4603      	mov	r3, r0
 8003318:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStructure;
  
  /* Enable the GPIO_LED Clock */
  RCC_AHB1PeriphClockCmd(GPIO_CLK[Led], ENABLE);
 800331a:	79fb      	ldrb	r3, [r7, #7]
 800331c:	4a10      	ldr	r2, [pc, #64]	; (8003360 <STM_EVAL_LEDInit+0x50>)
 800331e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003322:	2101      	movs	r1, #1
 8003324:	4618      	mov	r0, r3
 8003326:	f7ff fd97 	bl	8002e58 <RCC_AHB1PeriphClockCmd>

  /* Configure the GPIO_LED pin */
  GPIO_InitStructure.GPIO_Pin = GPIO_PIN[Led];
 800332a:	79fb      	ldrb	r3, [r7, #7]
 800332c:	4a0d      	ldr	r2, [pc, #52]	; (8003364 <STM_EVAL_LEDInit+0x54>)
 800332e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003332:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8003334:	2301      	movs	r3, #1
 8003336:	733b      	strb	r3, [r7, #12]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8003338:	2300      	movs	r3, #0
 800333a:	73bb      	strb	r3, [r7, #14]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 800333c:	2301      	movs	r3, #1
 800333e:	73fb      	strb	r3, [r7, #15]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8003340:	2302      	movs	r3, #2
 8003342:	737b      	strb	r3, [r7, #13]
  GPIO_Init(GPIO_PORT[Led], &GPIO_InitStructure);
 8003344:	79fb      	ldrb	r3, [r7, #7]
 8003346:	4a08      	ldr	r2, [pc, #32]	; (8003368 <STM_EVAL_LEDInit+0x58>)
 8003348:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800334c:	f107 0208 	add.w	r2, r7, #8
 8003350:	4611      	mov	r1, r2
 8003352:	4618      	mov	r0, r3
 8003354:	f7ff fbe2 	bl	8002b1c <GPIO_Init>
}
 8003358:	bf00      	nop
 800335a:	3710      	adds	r7, #16
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}
 8003360:	08003d20 	.word	0x08003d20
 8003364:	08003d18 	.word	0x08003d18
 8003368:	20000014 	.word	0x20000014

0800336c <STM_EVAL_LEDOn>:
  *     @arg LED5
  *     @arg LED6  
  * @retval None
  */
void STM_EVAL_LEDOn(Led_TypeDef Led)
{
 800336c:	b480      	push	{r7}
 800336e:	b083      	sub	sp, #12
 8003370:	af00      	add	r7, sp, #0
 8003372:	4603      	mov	r3, r0
 8003374:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->BSRRL = GPIO_PIN[Led];
 8003376:	79fb      	ldrb	r3, [r7, #7]
 8003378:	4a06      	ldr	r2, [pc, #24]	; (8003394 <STM_EVAL_LEDOn+0x28>)
 800337a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800337e:	79fa      	ldrb	r2, [r7, #7]
 8003380:	4905      	ldr	r1, [pc, #20]	; (8003398 <STM_EVAL_LEDOn+0x2c>)
 8003382:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8003386:	831a      	strh	r2, [r3, #24]
}
 8003388:	bf00      	nop
 800338a:	370c      	adds	r7, #12
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr
 8003394:	20000014 	.word	0x20000014
 8003398:	08003d18 	.word	0x08003d18

0800339c <STM_EVAL_LEDOff>:
  *     @arg LED5
  *     @arg LED6 
  * @retval None
  */
void STM_EVAL_LEDOff(Led_TypeDef Led)
{
 800339c:	b480      	push	{r7}
 800339e:	b083      	sub	sp, #12
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	4603      	mov	r3, r0
 80033a4:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->BSRRH = GPIO_PIN[Led];  
 80033a6:	79fb      	ldrb	r3, [r7, #7]
 80033a8:	4a06      	ldr	r2, [pc, #24]	; (80033c4 <STM_EVAL_LEDOff+0x28>)
 80033aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033ae:	79fa      	ldrb	r2, [r7, #7]
 80033b0:	4905      	ldr	r1, [pc, #20]	; (80033c8 <STM_EVAL_LEDOff+0x2c>)
 80033b2:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80033b6:	835a      	strh	r2, [r3, #26]
}
 80033b8:	bf00      	nop
 80033ba:	370c      	adds	r7, #12
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr
 80033c4:	20000014 	.word	0x20000014
 80033c8:	08003d18 	.word	0x08003d18

080033cc <STM_EVAL_PBInit>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void STM_EVAL_PBInit(Button_TypeDef Button, ButtonMode_TypeDef Button_Mode)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b088      	sub	sp, #32
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	4603      	mov	r3, r0
 80033d4:	460a      	mov	r2, r1
 80033d6:	71fb      	strb	r3, [r7, #7]
 80033d8:	4613      	mov	r3, r2
 80033da:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef GPIO_InitStructure;
  EXTI_InitTypeDef EXTI_InitStructure;
  NVIC_InitTypeDef NVIC_InitStructure;

  /* Enable the BUTTON Clock */
  RCC_AHB1PeriphClockCmd(BUTTON_CLK[Button], ENABLE);
 80033dc:	2301      	movs	r3, #1
 80033de:	2101      	movs	r1, #1
 80033e0:	4618      	mov	r0, r3
 80033e2:	f7ff fd39 	bl	8002e58 <RCC_AHB1PeriphClockCmd>
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 80033e6:	2101      	movs	r1, #1
 80033e8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80033ec:	f7ff fd74 	bl	8002ed8 <RCC_APB2PeriphClockCmd>

  /* Configure Button pin as input */
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 80033f0:	2300      	movs	r3, #0
 80033f2:	773b      	strb	r3, [r7, #28]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80033f4:	2300      	movs	r3, #0
 80033f6:	77fb      	strb	r3, [r7, #31]
  GPIO_InitStructure.GPIO_Pin = BUTTON_PIN[Button];
 80033f8:	2301      	movs	r3, #1
 80033fa:	61bb      	str	r3, [r7, #24]
  GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStructure);
 80033fc:	79fb      	ldrb	r3, [r7, #7]
 80033fe:	4a18      	ldr	r2, [pc, #96]	; (8003460 <STM_EVAL_PBInit+0x94>)
 8003400:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003404:	f107 0218 	add.w	r2, r7, #24
 8003408:	4611      	mov	r1, r2
 800340a:	4618      	mov	r0, r3
 800340c:	f7ff fb86 	bl	8002b1c <GPIO_Init>

  if (Button_Mode == BUTTON_MODE_EXTI)
 8003410:	79bb      	ldrb	r3, [r7, #6]
 8003412:	2b01      	cmp	r3, #1
 8003414:	d11f      	bne.n	8003456 <STM_EVAL_PBInit+0x8a>
  {
    /* Connect Button EXTI Line to Button GPIO Pin */
    SYSCFG_EXTILineConfig(BUTTON_PORT_SOURCE[Button], BUTTON_PIN_SOURCE[Button]);
 8003416:	2300      	movs	r3, #0
 8003418:	2200      	movs	r2, #0
 800341a:	4611      	mov	r1, r2
 800341c:	4618      	mov	r0, r3
 800341e:	f7ff fda7 	bl	8002f70 <SYSCFG_EXTILineConfig>

    /* Configure Button EXTI line */
    EXTI_InitStructure.EXTI_Line = BUTTON_EXTI_LINE[Button];
 8003422:	2301      	movs	r3, #1
 8003424:	613b      	str	r3, [r7, #16]
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 8003426:	2300      	movs	r3, #0
 8003428:	753b      	strb	r3, [r7, #20]
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;  
 800342a:	2308      	movs	r3, #8
 800342c:	757b      	strb	r3, [r7, #21]
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 800342e:	2301      	movs	r3, #1
 8003430:	75bb      	strb	r3, [r7, #22]
    EXTI_Init(&EXTI_InitStructure);
 8003432:	f107 0310 	add.w	r3, r7, #16
 8003436:	4618      	mov	r0, r3
 8003438:	f7ff fafe 	bl	8002a38 <EXTI_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    NVIC_InitStructure.NVIC_IRQChannel = BUTTON_IRQn[Button];
 800343c:	2306      	movs	r3, #6
 800343e:	733b      	strb	r3, [r7, #12]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
 8003440:	230f      	movs	r3, #15
 8003442:	737b      	strb	r3, [r7, #13]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0F;
 8003444:	230f      	movs	r3, #15
 8003446:	73bb      	strb	r3, [r7, #14]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8003448:	2301      	movs	r3, #1
 800344a:	73fb      	strb	r3, [r7, #15]

    NVIC_Init(&NVIC_InitStructure); 
 800344c:	f107 030c 	add.w	r3, r7, #12
 8003450:	4618      	mov	r0, r3
 8003452:	f7ff f97d 	bl	8002750 <NVIC_Init>
  }
}
 8003456:	bf00      	nop
 8003458:	3720      	adds	r7, #32
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}
 800345e:	bf00      	nop
 8003460:	20000024 	.word	0x20000024

08003464 <Audio_MAL_IRQHandler>:
  * @brief  This function handles main Media layer interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
static void Audio_MAL_IRQHandler(void)
{    
 8003464:	b580      	push	{r7, lr}
 8003466:	af00      	add	r7, sp, #0
  uint32_t Size = AudioRemSize;
#endif /* AUDIO_MAL_MODE_NORMAL */
  
#ifdef AUDIO_MAL_DMA_IT_TC_EN
  /* Transfer complete interrupt */
  if (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC) != RESET)
 8003468:	4b38      	ldr	r3, [pc, #224]	; (800354c <Audio_MAL_IRQHandler+0xe8>)
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	4b38      	ldr	r3, [pc, #224]	; (8003550 <Audio_MAL_IRQHandler+0xec>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4619      	mov	r1, r3
 8003472:	4610      	mov	r0, r2
 8003474:	f7ff fa76 	bl	8002964 <DMA_GetFlagStatus>
 8003478:	4603      	mov	r3, r0
 800347a:	2b00      	cmp	r3, #0
 800347c:	d064      	beq.n	8003548 <Audio_MAL_IRQHandler+0xe4>
  {         
 #ifdef AUDIO_MAL_MODE_NORMAL
    /* Check if the end of file has been reached */
    if (AudioRemSize > 0)
 800347e:	4b35      	ldr	r3, [pc, #212]	; (8003554 <Audio_MAL_IRQHandler+0xf0>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d04c      	beq.n	8003520 <Audio_MAL_IRQHandler+0xbc>
    {      
      /* Wait the DMA Stream to be effectively disabled */
      while (DMA_GetCmdStatus(AUDIO_MAL_DMA_STREAM) != DISABLE)
 8003486:	bf00      	nop
 8003488:	4b30      	ldr	r3, [pc, #192]	; (800354c <Audio_MAL_IRQHandler+0xe8>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4618      	mov	r0, r3
 800348e:	f7ff fa51 	bl	8002934 <DMA_GetCmdStatus>
 8003492:	4603      	mov	r3, r0
 8003494:	2b00      	cmp	r3, #0
 8003496:	d1f7      	bne.n	8003488 <Audio_MAL_IRQHandler+0x24>
      {}
      
      /* Clear the Interrupt flag */
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC); 
 8003498:	4b2c      	ldr	r3, [pc, #176]	; (800354c <Audio_MAL_IRQHandler+0xe8>)
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	4b2c      	ldr	r3, [pc, #176]	; (8003550 <Audio_MAL_IRQHandler+0xec>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4619      	mov	r1, r3
 80034a2:	4610      	mov	r0, r2
 80034a4:	f7ff fa9a 	bl	80029dc <DMA_ClearFlag>
           
      /* Re-Configure the buffer address and size */
      DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t) CurrentPos;
 80034a8:	4b2b      	ldr	r3, [pc, #172]	; (8003558 <Audio_MAL_IRQHandler+0xf4>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	461a      	mov	r2, r3
 80034ae:	4b2b      	ldr	r3, [pc, #172]	; (800355c <Audio_MAL_IRQHandler+0xf8>)
 80034b0:	609a      	str	r2, [r3, #8]
      DMA_InitStructure.DMA_BufferSize = (uint32_t) (DMA_MAX(AudioRemSize));
 80034b2:	4b28      	ldr	r3, [pc, #160]	; (8003554 <Audio_MAL_IRQHandler+0xf0>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80034ba:	4293      	cmp	r3, r2
 80034bc:	bf28      	it	cs
 80034be:	4613      	movcs	r3, r2
 80034c0:	4a26      	ldr	r2, [pc, #152]	; (800355c <Audio_MAL_IRQHandler+0xf8>)
 80034c2:	6113      	str	r3, [r2, #16]
            
      /* Configure the DMA Stream with the new parameters */
      DMA_Init(AUDIO_MAL_DMA_STREAM, &DMA_InitStructure);
 80034c4:	4b21      	ldr	r3, [pc, #132]	; (800354c <Audio_MAL_IRQHandler+0xe8>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4924      	ldr	r1, [pc, #144]	; (800355c <Audio_MAL_IRQHandler+0xf8>)
 80034ca:	4618      	mov	r0, r3
 80034cc:	f7ff f9be 	bl	800284c <DMA_Init>
      
      /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE);    
 80034d0:	4b1e      	ldr	r3, [pc, #120]	; (800354c <Audio_MAL_IRQHandler+0xe8>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	2101      	movs	r1, #1
 80034d6:	4618      	mov	r0, r3
 80034d8:	f7ff fa10 	bl	80028fc <DMA_Cmd>
      
      /* Update the current pointer position */
      CurrentPos += DMA_MAX(AudioRemSize);        
 80034dc:	4b1e      	ldr	r3, [pc, #120]	; (8003558 <Audio_MAL_IRQHandler+0xf4>)
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	4b1c      	ldr	r3, [pc, #112]	; (8003554 <Audio_MAL_IRQHandler+0xf0>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034e8:	d203      	bcs.n	80034f2 <Audio_MAL_IRQHandler+0x8e>
 80034ea:	4b1a      	ldr	r3, [pc, #104]	; (8003554 <Audio_MAL_IRQHandler+0xf0>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	005b      	lsls	r3, r3, #1
 80034f0:	e000      	b.n	80034f4 <Audio_MAL_IRQHandler+0x90>
 80034f2:	4b1b      	ldr	r3, [pc, #108]	; (8003560 <Audio_MAL_IRQHandler+0xfc>)
 80034f4:	4413      	add	r3, r2
 80034f6:	4a18      	ldr	r2, [pc, #96]	; (8003558 <Audio_MAL_IRQHandler+0xf4>)
 80034f8:	6013      	str	r3, [r2, #0]
      
      /* Update the remaining number of data to be played */
      AudioRemSize -= DMA_MAX(AudioRemSize);   
 80034fa:	4b16      	ldr	r3, [pc, #88]	; (8003554 <Audio_MAL_IRQHandler+0xf0>)
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	4b15      	ldr	r3, [pc, #84]	; (8003554 <Audio_MAL_IRQHandler+0xf0>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003506:	428b      	cmp	r3, r1
 8003508:	bf28      	it	cs
 800350a:	460b      	movcs	r3, r1
 800350c:	1ad3      	subs	r3, r2, r3
 800350e:	4a11      	ldr	r2, [pc, #68]	; (8003554 <Audio_MAL_IRQHandler+0xf0>)
 8003510:	6013      	str	r3, [r2, #0]
        /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE); 
 8003512:	4b0e      	ldr	r3, [pc, #56]	; (800354c <Audio_MAL_IRQHandler+0xe8>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	2101      	movs	r1, #1
 8003518:	4618      	mov	r0, r3
 800351a:	f7ff f9ef 	bl	80028fc <DMA_Cmd>
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE | AUDIO_MAL_DMA_FLAG_FE | \
                                        AUDIO_MAL_DMA_FLAG_DME);
  }  
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
}
 800351e:	e013      	b.n	8003548 <Audio_MAL_IRQHandler+0xe4>
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, DISABLE);   
 8003520:	4b0a      	ldr	r3, [pc, #40]	; (800354c <Audio_MAL_IRQHandler+0xe8>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	2100      	movs	r1, #0
 8003526:	4618      	mov	r0, r3
 8003528:	f7ff f9e8 	bl	80028fc <DMA_Cmd>
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC);       
 800352c:	4b07      	ldr	r3, [pc, #28]	; (800354c <Audio_MAL_IRQHandler+0xe8>)
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	4b07      	ldr	r3, [pc, #28]	; (8003550 <Audio_MAL_IRQHandler+0xec>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4619      	mov	r1, r3
 8003536:	4610      	mov	r0, r2
 8003538:	f7ff fa50 	bl	80029dc <DMA_ClearFlag>
      EVAL_AUDIO_TransferComplete_CallBack((uint32_t)CurrentPos, 0);       
 800353c:	4b06      	ldr	r3, [pc, #24]	; (8003558 <Audio_MAL_IRQHandler+0xf4>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	2100      	movs	r1, #0
 8003542:	4618      	mov	r0, r3
 8003544:	f000 f99c 	bl	8003880 <EVAL_AUDIO_TransferComplete_CallBack>
}
 8003548:	bf00      	nop
 800354a:	bd80      	pop	{r7, pc}
 800354c:	20000030 	.word	0x20000030
 8003550:	20000034 	.word	0x20000034
 8003554:	20000028 	.word	0x20000028
 8003558:	20001df8 	.word	0x20001df8
 800355c:	20001e38 	.word	0x20001e38
 8003560:	0001fffe 	.word	0x0001fffe

08003564 <DMA1_Stream7_IRQHandler>:
  * @brief  This function handles main I2S interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_I2S_IRQHandler(void)
{ 
 8003564:	b580      	push	{r7, lr}
 8003566:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8003568:	f7ff ff7c 	bl	8003464 <Audio_MAL_IRQHandler>
}
 800356c:	bf00      	nop
 800356e:	bd80      	pop	{r7, pc}

08003570 <DMA1_Stream0_IRQHandler>:
  * @brief  This function handles main DAC interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_DAC_IRQHandler(void)
{ 
 8003570:	b580      	push	{r7, lr}
 8003572:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8003574:	f7ff ff76 	bl	8003464 <Audio_MAL_IRQHandler>
}
 8003578:	bf00      	nop
 800357a:	bd80      	pop	{r7, pc}

0800357c <SPI3_IRQHandler>:
  * @brief  I2S interrupt management
  * @param  None
  * @retval None
  */
void Audio_I2S_IRQHandler(void)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	af00      	add	r7, sp, #0
  /* Check on the I2S TXE flag */  
  if (SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_TXE) != RESET)
 8003580:	2102      	movs	r1, #2
 8003582:	480d      	ldr	r0, [pc, #52]	; (80035b8 <SPI3_IRQHandler+0x3c>)
 8003584:	f7ff fcd7 	bl	8002f36 <SPI_I2S_GetFlagStatus>
 8003588:	4603      	mov	r3, r0
 800358a:	2b00      	cmp	r3, #0
 800358c:	d011      	beq.n	80035b2 <SPI3_IRQHandler+0x36>
  { 
    if (CurrAudioInterface == AUDIO_INTERFACE_DAC)
 800358e:	4b0b      	ldr	r3, [pc, #44]	; (80035bc <SPI3_IRQHandler+0x40>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	2b02      	cmp	r3, #2
 8003594:	d106      	bne.n	80035a4 <SPI3_IRQHandler+0x28>
    {
      /* Wirte data to the DAC interface */
      DAC_SetChannel1Data(DAC_Align_12b_L, EVAL_AUDIO_GetSampleCallBack()); 
 8003596:	f000 f97e 	bl	8003896 <EVAL_AUDIO_GetSampleCallBack>
 800359a:	4603      	mov	r3, r0
 800359c:	4619      	mov	r1, r3
 800359e:	2004      	movs	r0, #4
 80035a0:	f7ff f938 	bl	8002814 <DAC_SetChannel1Data>
    }
    
    /* Send dummy data on I2S to avoid the underrun condition */
    SPI_I2S_SendData(CODEC_I2S, EVAL_AUDIO_GetSampleCallBack()); 
 80035a4:	f000 f977 	bl	8003896 <EVAL_AUDIO_GetSampleCallBack>
 80035a8:	4603      	mov	r3, r0
 80035aa:	4619      	mov	r1, r3
 80035ac:	4802      	ldr	r0, [pc, #8]	; (80035b8 <SPI3_IRQHandler+0x3c>)
 80035ae:	f7ff fcb3 	bl	8002f18 <SPI_I2S_SendData>
  }
}
 80035b2:	bf00      	nop
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	bf00      	nop
 80035b8:	40003c00 	.word	0x40003c00
 80035bc:	2000002c 	.word	0x2000002c

080035c0 <bluetooth_init>:

u8 USART2_RX_BUF[USART2_REC_LEN];

u16 USART2_RX_STA=0;

void bluetooth_init(u32 bound){
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b08a      	sub	sp, #40	; 0x28
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStructure;
    USART_InitTypeDef USART_InitStructure;
    NVIC_InitTypeDef NVIC_InitStructure;
  //  SystemInit();

    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA,ENABLE);
 80035c8:	2101      	movs	r1, #1
 80035ca:	2001      	movs	r0, #1
 80035cc:	f7ff fc44 	bl	8002e58 <RCC_AHB1PeriphClockCmd>
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2,ENABLE);
 80035d0:	2101      	movs	r1, #1
 80035d2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80035d6:	f7ff fc5f 	bl	8002e98 <RCC_APB1PeriphClockCmd>

    GPIO_PinAFConfig(GPIOA,GPIO_PinSource2,GPIO_AF_USART2);
 80035da:	2207      	movs	r2, #7
 80035dc:	2102      	movs	r1, #2
 80035de:	4824      	ldr	r0, [pc, #144]	; (8003670 <bluetooth_init+0xb0>)
 80035e0:	f7ff fb48 	bl	8002c74 <GPIO_PinAFConfig>
    GPIO_PinAFConfig(GPIOA,GPIO_PinSource3,GPIO_AF_USART2);
 80035e4:	2207      	movs	r2, #7
 80035e6:	2103      	movs	r1, #3
 80035e8:	4821      	ldr	r0, [pc, #132]	; (8003670 <bluetooth_init+0xb0>)
 80035ea:	f7ff fb43 	bl	8002c74 <GPIO_PinAFConfig>

    //GPIOA2,3->USART2RxTx
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2 | GPIO_Pin_3;
 80035ee:	230c      	movs	r3, #12
 80035f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 80035f2:	2302      	movs	r3, #2
 80035f4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80035f8:	2302      	movs	r3, #2
 80035fa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80035fe:	2300      	movs	r3, #0
 8003600:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8003604:	2301      	movs	r3, #1
 8003606:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    GPIO_Init(GPIOA,&GPIO_InitStructure);
 800360a:	f107 0320 	add.w	r3, r7, #32
 800360e:	4619      	mov	r1, r3
 8003610:	4817      	ldr	r0, [pc, #92]	; (8003670 <bluetooth_init+0xb0>)
 8003612:	f7ff fa83 	bl	8002b1c <GPIO_Init>

    //USART2 init
    USART_InitStructure.USART_BaudRate = bound;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	613b      	str	r3, [r7, #16]
    USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 800361a:	2300      	movs	r3, #0
 800361c:	82bb      	strh	r3, [r7, #20]
    USART_InitStructure.USART_StopBits = USART_StopBits_1;
 800361e:	2300      	movs	r3, #0
 8003620:	82fb      	strh	r3, [r7, #22]
    USART_InitStructure.USART_Parity = USART_Parity_No;
 8003622:	2300      	movs	r3, #0
 8003624:	833b      	strh	r3, [r7, #24]
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8003626:	2300      	movs	r3, #0
 8003628:	83bb      	strh	r3, [r7, #28]
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 800362a:	230c      	movs	r3, #12
 800362c:	837b      	strh	r3, [r7, #26]
    USART_Init(USART2, &USART_InitStructure);
 800362e:	f107 0310 	add.w	r3, r7, #16
 8003632:	4619      	mov	r1, r3
 8003634:	480f      	ldr	r0, [pc, #60]	; (8003674 <bluetooth_init+0xb4>)
 8003636:	f7ff fcdd 	bl	8002ff4 <USART_Init>

    USART_Cmd(USART2, ENABLE);
 800363a:	2101      	movs	r1, #1
 800363c:	480d      	ldr	r0, [pc, #52]	; (8003674 <bluetooth_init+0xb4>)
 800363e:	f7ff fd93 	bl	8003168 <USART_Cmd>

    //USART2_ClearFlag(USART2, USART2_FLAG_TC);

#if EN_USART2_RX
    USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);//interrupt
 8003642:	2201      	movs	r2, #1
 8003644:	f240 5125 	movw	r1, #1317	; 0x525
 8003648:	480a      	ldr	r0, [pc, #40]	; (8003674 <bluetooth_init+0xb4>)
 800364a:	f7ff fdbd 	bl	80031c8 <USART_ITConfig>

    //USART2 NVIC
    NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;//USART2 interrupt channel
 800364e:	2326      	movs	r3, #38	; 0x26
 8003650:	733b      	strb	r3, [r7, #12]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority=3;
 8003652:	2303      	movs	r3, #3
 8003654:	737b      	strb	r3, [r7, #13]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority =3;
 8003656:	2303      	movs	r3, #3
 8003658:	73bb      	strb	r3, [r7, #14]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE; //IQR enable
 800365a:	2301      	movs	r3, #1
 800365c:	73fb      	strb	r3, [r7, #15]
    NVIC_Init(&NVIC_InitStructure);
 800365e:	f107 030c 	add.w	r3, r7, #12
 8003662:	4618      	mov	r0, r3
 8003664:	f7ff f874 	bl	8002750 <NVIC_Init>

#endif
}
 8003668:	bf00      	nop
 800366a:	3728      	adds	r7, #40	; 0x28
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}
 8003670:	40020000 	.word	0x40020000
 8003674:	40004400 	.word	0x40004400

08003678 <USART2_IRQHandler>:


void USART2_IRQHandler(void)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b082      	sub	sp, #8
 800367c:	af00      	add	r7, sp, #0
    u8 Res;
#if SYSTEM_SUPPORT_OS
    OSIntEnter();
#endif
    if(USART_GetITStatus(USART2, USART_IT_RXNE) != RESET)
 800367e:	f240 5125 	movw	r1, #1317	; 0x525
 8003682:	4827      	ldr	r0, [pc, #156]	; (8003720 <USART2_IRQHandler+0xa8>)
 8003684:	f7ff fde8 	bl	8003258 <USART_GetITStatus>
 8003688:	4603      	mov	r3, r0
 800368a:	2b00      	cmp	r3, #0
 800368c:	d043      	beq.n	8003716 <USART2_IRQHandler+0x9e>
    {
        Res = USART_ReceiveData(USART2);//(USART2->DR)
 800368e:	4824      	ldr	r0, [pc, #144]	; (8003720 <USART2_IRQHandler+0xa8>)
 8003690:	f7ff fd8a 	bl	80031a8 <USART_ReceiveData>
 8003694:	4603      	mov	r3, r0
 8003696:	71fb      	strb	r3, [r7, #7]
//      USART_SendData(USART2,Res);
        if(Res == 0x01)
 8003698:	79fb      	ldrb	r3, [r7, #7]
 800369a:	2b01      	cmp	r3, #1
 800369c:	d107      	bne.n	80036ae <USART2_IRQHandler+0x36>
        {
            LEDOn(LED3);
 800369e:	2001      	movs	r0, #1
 80036a0:	f000 f860 	bl	8003764 <LEDOn>
            Motor_1_PRun();
 80036a4:	f000 f8a6 	bl	80037f4 <Motor_1_PRun>
            Motor_2_STOP();
 80036a8:	f000 f8c0 	bl	800382c <Motor_2_STOP>
        }
  }
#if SYSTEM_SUPPORT_OS
    OSIntExit();
#endif
}
 80036ac:	e033      	b.n	8003716 <USART2_IRQHandler+0x9e>
        else if(Res == 0x02)
 80036ae:	79fb      	ldrb	r3, [r7, #7]
 80036b0:	2b02      	cmp	r3, #2
 80036b2:	d107      	bne.n	80036c4 <USART2_IRQHandler+0x4c>
        	LEDOn(LED4);
 80036b4:	2000      	movs	r0, #0
 80036b6:	f000 f855 	bl	8003764 <LEDOn>
        	Motor_1_NRun();
 80036ba:	f000 f8a9 	bl	8003810 <Motor_1_NRun>
        	Motor_2_STOP();
 80036be:	f000 f8b5 	bl	800382c <Motor_2_STOP>
}
 80036c2:	e028      	b.n	8003716 <USART2_IRQHandler+0x9e>
        else if(Res == 0x03)
 80036c4:	79fb      	ldrb	r3, [r7, #7]
 80036c6:	2b03      	cmp	r3, #3
 80036c8:	d107      	bne.n	80036da <USART2_IRQHandler+0x62>
        	LEDOn(LED5);
 80036ca:	2002      	movs	r0, #2
 80036cc:	f000 f84a 	bl	8003764 <LEDOn>
        	Motor_1_PRun();
 80036d0:	f000 f890 	bl	80037f4 <Motor_1_PRun>
        	Motor_2_PRun();
 80036d4:	f000 f8b8 	bl	8003848 <Motor_2_PRun>
}
 80036d8:	e01d      	b.n	8003716 <USART2_IRQHandler+0x9e>
        else if(Res == 0x04)
 80036da:	79fb      	ldrb	r3, [r7, #7]
 80036dc:	2b04      	cmp	r3, #4
 80036de:	d107      	bne.n	80036f0 <USART2_IRQHandler+0x78>
        	LEDOn(LED6);
 80036e0:	2003      	movs	r0, #3
 80036e2:	f000 f83f 	bl	8003764 <LEDOn>
        	Motor_1_PRun();
 80036e6:	f000 f885 	bl	80037f4 <Motor_1_PRun>
        	Motor_2_NRun();
 80036ea:	f000 f8bb 	bl	8003864 <Motor_2_NRun>
}
 80036ee:	e012      	b.n	8003716 <USART2_IRQHandler+0x9e>
        else if(Res == 0x05)
 80036f0:	79fb      	ldrb	r3, [r7, #7]
 80036f2:	2b05      	cmp	r3, #5
 80036f4:	d10f      	bne.n	8003716 <USART2_IRQHandler+0x9e>
        	LEDOff(LED3);
 80036f6:	2001      	movs	r0, #1
 80036f8:	f000 f841 	bl	800377e <LEDOff>
        	LEDOff(LED4);
 80036fc:	2000      	movs	r0, #0
 80036fe:	f000 f83e 	bl	800377e <LEDOff>
        	LEDOff(LED5);
 8003702:	2002      	movs	r0, #2
 8003704:	f000 f83b 	bl	800377e <LEDOff>
        	LEDOff(LED6);
 8003708:	2003      	movs	r0, #3
 800370a:	f000 f838 	bl	800377e <LEDOff>
        	Motor_1_STOP();
 800370e:	f000 f863 	bl	80037d8 <Motor_1_STOP>
        	Motor_2_STOP();
 8003712:	f000 f88b 	bl	800382c <Motor_2_STOP>
}
 8003716:	bf00      	nop
 8003718:	3708      	adds	r7, #8
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}
 800371e:	bf00      	nop
 8003720:	40004400 	.word	0x40004400

08003724 <LEDInit>:
 *      Author: Kai Zhao
 */
#include <LEDTest.h>

void LEDInit()
{
 8003724:	b580      	push	{r7, lr}
 8003726:	af00      	add	r7, sp, #0
	STM_EVAL_PBInit(BUTTON_USER, BUTTON_MODE_EXTI);
 8003728:	2101      	movs	r1, #1
 800372a:	2000      	movs	r0, #0
 800372c:	f7ff fe4e 	bl	80033cc <STM_EVAL_PBInit>

	STM_EVAL_LEDInit(LED3);
 8003730:	2001      	movs	r0, #1
 8003732:	f7ff fded 	bl	8003310 <STM_EVAL_LEDInit>
	STM_EVAL_LEDInit(LED4);
 8003736:	2000      	movs	r0, #0
 8003738:	f7ff fdea 	bl	8003310 <STM_EVAL_LEDInit>
	STM_EVAL_LEDInit(LED5);
 800373c:	2002      	movs	r0, #2
 800373e:	f7ff fde7 	bl	8003310 <STM_EVAL_LEDInit>
	STM_EVAL_LEDInit(LED6);
 8003742:	2003      	movs	r0, #3
 8003744:	f7ff fde4 	bl	8003310 <STM_EVAL_LEDInit>

	STM_EVAL_LEDOff(LED3);
 8003748:	2001      	movs	r0, #1
 800374a:	f7ff fe27 	bl	800339c <STM_EVAL_LEDOff>
	STM_EVAL_LEDOff(LED4);
 800374e:	2000      	movs	r0, #0
 8003750:	f7ff fe24 	bl	800339c <STM_EVAL_LEDOff>
	STM_EVAL_LEDOff(LED5);
 8003754:	2002      	movs	r0, #2
 8003756:	f7ff fe21 	bl	800339c <STM_EVAL_LEDOff>
	STM_EVAL_LEDOff(LED6);
 800375a:	2003      	movs	r0, #3
 800375c:	f7ff fe1e 	bl	800339c <STM_EVAL_LEDOff>
}
 8003760:	bf00      	nop
 8003762:	bd80      	pop	{r7, pc}

08003764 <LEDOn>:

void LEDOn(int led)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b082      	sub	sp, #8
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
	STM_EVAL_LEDOn(led);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	b2db      	uxtb	r3, r3
 8003770:	4618      	mov	r0, r3
 8003772:	f7ff fdfb 	bl	800336c <STM_EVAL_LEDOn>
}
 8003776:	bf00      	nop
 8003778:	3708      	adds	r7, #8
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}

0800377e <LEDOff>:

void LEDOff(int led)
{
 800377e:	b580      	push	{r7, lr}
 8003780:	b082      	sub	sp, #8
 8003782:	af00      	add	r7, sp, #0
 8003784:	6078      	str	r0, [r7, #4]
	STM_EVAL_LEDOff(led);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	b2db      	uxtb	r3, r3
 800378a:	4618      	mov	r0, r3
 800378c:	f7ff fe06 	bl	800339c <STM_EVAL_LEDOff>
}
 8003790:	bf00      	nop
 8003792:	3708      	adds	r7, #8
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}

08003798 <Motor_12_Config>:
#include "stm32f4xx_conf.h"

//#include "delay_other.h"

void Motor_12_Config(void)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b082      	sub	sp, #8
 800379c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;
    RCC_AHB1PeriphClockCmd( RCC_AHB1Periph_GPIOA, ENABLE);
 800379e:	2101      	movs	r1, #1
 80037a0:	2001      	movs	r0, #1
 80037a2:	f7ff fb59 	bl	8002e58 <RCC_AHB1PeriphClockCmd>

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6|GPIO_Pin_7|GPIO_Pin_4|GPIO_Pin_5;
 80037a6:	23f0      	movs	r3, #240	; 0xf0
 80037a8:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 80037aa:	2301      	movs	r3, #1
 80037ac:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80037ae:	2300      	movs	r3, #0
 80037b0:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80037b2:	2302      	movs	r3, #2
 80037b4:	717b      	strb	r3, [r7, #5]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 80037b6:	2301      	movs	r3, #1
 80037b8:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 80037ba:	463b      	mov	r3, r7
 80037bc:	4619      	mov	r1, r3
 80037be:	4805      	ldr	r0, [pc, #20]	; (80037d4 <Motor_12_Config+0x3c>)
 80037c0:	f7ff f9ac 	bl	8002b1c <GPIO_Init>

	GPIO_ResetBits(GPIOA,GPIO_Pin_6|GPIO_Pin_7|GPIO_Pin_4|GPIO_Pin_5);
 80037c4:	21f0      	movs	r1, #240	; 0xf0
 80037c6:	4803      	ldr	r0, [pc, #12]	; (80037d4 <Motor_12_Config+0x3c>)
 80037c8:	f7ff fa45 	bl	8002c56 <GPIO_ResetBits>
}
 80037cc:	bf00      	nop
 80037ce:	3708      	adds	r7, #8
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}
 80037d4:	40020000 	.word	0x40020000

080037d8 <Motor_1_STOP>:

void Motor_1_STOP(void)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	af00      	add	r7, sp, #0
	IN1(High);
 80037dc:	2140      	movs	r1, #64	; 0x40
 80037de:	4804      	ldr	r0, [pc, #16]	; (80037f0 <Motor_1_STOP+0x18>)
 80037e0:	f7ff fa2a 	bl	8002c38 <GPIO_SetBits>
	IN2(High);
 80037e4:	2180      	movs	r1, #128	; 0x80
 80037e6:	4802      	ldr	r0, [pc, #8]	; (80037f0 <Motor_1_STOP+0x18>)
 80037e8:	f7ff fa26 	bl	8002c38 <GPIO_SetBits>
}
 80037ec:	bf00      	nop
 80037ee:	bd80      	pop	{r7, pc}
 80037f0:	40020000 	.word	0x40020000

080037f4 <Motor_1_PRun>:

void Motor_1_PRun(void)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	af00      	add	r7, sp, #0
	IN1(Low);
 80037f8:	2140      	movs	r1, #64	; 0x40
 80037fa:	4804      	ldr	r0, [pc, #16]	; (800380c <Motor_1_PRun+0x18>)
 80037fc:	f7ff fa2b 	bl	8002c56 <GPIO_ResetBits>
	IN2(High);
 8003800:	2180      	movs	r1, #128	; 0x80
 8003802:	4802      	ldr	r0, [pc, #8]	; (800380c <Motor_1_PRun+0x18>)
 8003804:	f7ff fa18 	bl	8002c38 <GPIO_SetBits>
}
 8003808:	bf00      	nop
 800380a:	bd80      	pop	{r7, pc}
 800380c:	40020000 	.word	0x40020000

08003810 <Motor_1_NRun>:

void Motor_1_NRun(void)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	af00      	add	r7, sp, #0
	IN1(High);
 8003814:	2140      	movs	r1, #64	; 0x40
 8003816:	4804      	ldr	r0, [pc, #16]	; (8003828 <Motor_1_NRun+0x18>)
 8003818:	f7ff fa0e 	bl	8002c38 <GPIO_SetBits>
	IN2(Low);
 800381c:	2180      	movs	r1, #128	; 0x80
 800381e:	4802      	ldr	r0, [pc, #8]	; (8003828 <Motor_1_NRun+0x18>)
 8003820:	f7ff fa19 	bl	8002c56 <GPIO_ResetBits>
}
 8003824:	bf00      	nop
 8003826:	bd80      	pop	{r7, pc}
 8003828:	40020000 	.word	0x40020000

0800382c <Motor_2_STOP>:

void Motor_2_STOP(void)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	af00      	add	r7, sp, #0
	IN3(High);
 8003830:	2110      	movs	r1, #16
 8003832:	4804      	ldr	r0, [pc, #16]	; (8003844 <Motor_2_STOP+0x18>)
 8003834:	f7ff fa00 	bl	8002c38 <GPIO_SetBits>
	IN4(High);
 8003838:	2120      	movs	r1, #32
 800383a:	4802      	ldr	r0, [pc, #8]	; (8003844 <Motor_2_STOP+0x18>)
 800383c:	f7ff f9fc 	bl	8002c38 <GPIO_SetBits>
}
 8003840:	bf00      	nop
 8003842:	bd80      	pop	{r7, pc}
 8003844:	40020000 	.word	0x40020000

08003848 <Motor_2_PRun>:

void Motor_2_PRun(void)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	af00      	add	r7, sp, #0
	IN3(Low);
 800384c:	2110      	movs	r1, #16
 800384e:	4804      	ldr	r0, [pc, #16]	; (8003860 <Motor_2_PRun+0x18>)
 8003850:	f7ff fa01 	bl	8002c56 <GPIO_ResetBits>
	IN4(High);
 8003854:	2120      	movs	r1, #32
 8003856:	4802      	ldr	r0, [pc, #8]	; (8003860 <Motor_2_PRun+0x18>)
 8003858:	f7ff f9ee 	bl	8002c38 <GPIO_SetBits>
}
 800385c:	bf00      	nop
 800385e:	bd80      	pop	{r7, pc}
 8003860:	40020000 	.word	0x40020000

08003864 <Motor_2_NRun>:

void Motor_2_NRun(void)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	af00      	add	r7, sp, #0
	IN3(High);
 8003868:	2110      	movs	r1, #16
 800386a:	4804      	ldr	r0, [pc, #16]	; (800387c <Motor_2_NRun+0x18>)
 800386c:	f7ff f9e4 	bl	8002c38 <GPIO_SetBits>
	IN4(Low);
 8003870:	2120      	movs	r1, #32
 8003872:	4802      	ldr	r0, [pc, #8]	; (800387c <Motor_2_NRun+0x18>)
 8003874:	f7ff f9ef 	bl	8002c56 <GPIO_ResetBits>
}
 8003878:	bf00      	nop
 800387a:	bd80      	pop	{r7, pc}
 800387c:	40020000 	.word	0x40020000

08003880 <EVAL_AUDIO_TransferComplete_CallBack>:
/*
 * Callback used by stm32f4_discovery_audio_codec.c.
 * Refer to stm32f4_discovery_audio_codec.h for more info.
 */
__attribute__((weak)) void EVAL_AUDIO_TransferComplete_CallBack(uint32_t pBuffer, uint32_t Size)
{
 8003880:	b480      	push	{r7}
 8003882:	b083      	sub	sp, #12
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
 8003888:	6039      	str	r1, [r7, #0]
  /* TODO, implement your code here */
  return;
 800388a:	bf00      	nop
}
 800388c:	370c      	adds	r7, #12
 800388e:	46bd      	mov	sp, r7
 8003890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003894:	4770      	bx	lr

08003896 <EVAL_AUDIO_GetSampleCallBack>:
/*
 * Callback used by stm32f4_discovery_audio_codec.c.
 * Refer to stm32f4_discovery_audio_codec.h for more info.
 */
__attribute__((weak)) uint16_t EVAL_AUDIO_GetSampleCallBack(void)
{
 8003896:	b480      	push	{r7}
 8003898:	af00      	add	r7, sp, #0
  /* TODO, implement your code here */
  return 0;
 800389a:	2300      	movs	r3, #0
}
 800389c:	4618      	mov	r0, r3
 800389e:	46bd      	mov	sp, r7
 80038a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a4:	4770      	bx	lr
	...

080038a8 <NVIC_SetPriorityGrouping>:
  priority bits (__NVIC_PRIO_BITS) the smallest possible priority group is set.

    \param [in]      PriorityGroup  Priority grouping field
 */
static __INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b085      	sub	sp, #20
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	f003 0307 	and.w	r3, r3, #7
 80038b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80038b8:	4b0c      	ldr	r3, [pc, #48]	; (80038ec <NVIC_SetPriorityGrouping+0x44>)
 80038ba:	68db      	ldr	r3, [r3, #12]
 80038bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
 80038be:	68ba      	ldr	r2, [r7, #8]
 80038c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80038c4:	4013      	ands	r3, r2
 80038c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                 |
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                 |
 80038d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80038d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80038da:	4a04      	ldr	r2, [pc, #16]	; (80038ec <NVIC_SetPriorityGrouping+0x44>)
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	60d3      	str	r3, [r2, #12]
}
 80038e0:	bf00      	nop
 80038e2:	3714      	adds	r7, #20
 80038e4:	46bd      	mov	sp, r7
 80038e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ea:	4770      	bx	lr
 80038ec:	e000ed00 	.word	0xe000ed00

080038f0 <main>:
static volatile uint32_t ulCountOfReceivedSemaphores = 0;

/*-----------------------------------------------------------*/

int main(void)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b084      	sub	sp, #16
 80038f4:	af02      	add	r7, sp, #8
xTimerHandle xExampleSoftwareTimer = NULL;
 80038f6:	2300      	movs	r3, #0
 80038f8:	607b      	str	r3, [r7, #4]

	prvSetupHardware();
 80038fa:	f000 f8b5 	bl	8003a68 <prvSetupHardware>
    LEDInit();
 80038fe:	f7ff ff11 	bl	8003724 <LEDInit>
	//LEDOn(LED6);
	bluetooth_init(9600);
 8003902:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 8003906:	f7ff fe5b 	bl	80035c0 <bluetooth_init>
	STM_EVAL_LEDOff(LED3);
	STM_EVAL_LEDOff(LED4);
	STM_EVAL_LEDOff(LED5);
	STM_EVAL_LEDOff(LED6);*/

	xQueue = xQueueCreate( 	mainQUEUE_LENGTH,		/* The number of items the queue can hold. */
 800390a:	2200      	movs	r2, #0
 800390c:	2104      	movs	r1, #4
 800390e:	2001      	movs	r0, #1
 8003910:	f7fc fffe 	bl	8000910 <xQueueGenericCreate>
 8003914:	4602      	mov	r2, r0
 8003916:	4b23      	ldr	r3, [pc, #140]	; (80039a4 <main+0xb4>)
 8003918:	601a      	str	r2, [r3, #0]
							sizeof( uint32_t ) );	/* The size of each item the queue holds. */
	/* Add to the registry, for the benefit of kernel aware debugging. */
	vQueueAddToRegistry( xQueue, "MainQueue" );
 800391a:	4b22      	ldr	r3, [pc, #136]	; (80039a4 <main+0xb4>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4922      	ldr	r1, [pc, #136]	; (80039a8 <main+0xb8>)
 8003920:	4618      	mov	r0, r3
 8003922:	f7fd fc87 	bl	8001234 <vQueueAddToRegistry>

	vSemaphoreCreateBinary( xEventSemaphore );
 8003926:	2203      	movs	r2, #3
 8003928:	2100      	movs	r1, #0
 800392a:	2001      	movs	r0, #1
 800392c:	f7fc fff0 	bl	8000910 <xQueueGenericCreate>
 8003930:	4602      	mov	r2, r0
 8003932:	4b1e      	ldr	r3, [pc, #120]	; (80039ac <main+0xbc>)
 8003934:	601a      	str	r2, [r3, #0]
 8003936:	4b1d      	ldr	r3, [pc, #116]	; (80039ac <main+0xbc>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d006      	beq.n	800394c <main+0x5c>
 800393e:	4b1b      	ldr	r3, [pc, #108]	; (80039ac <main+0xbc>)
 8003940:	6818      	ldr	r0, [r3, #0]
 8003942:	2300      	movs	r3, #0
 8003944:	2200      	movs	r2, #0
 8003946:	2100      	movs	r1, #0
 8003948:	f7fd f83a 	bl	80009c0 <xQueueGenericSend>
	/* Add to the registry, for the benefit of kernel aware debugging. */
	vQueueAddToRegistry( xEventSemaphore, "xEventSemaphore" );
 800394c:	4b17      	ldr	r3, [pc, #92]	; (80039ac <main+0xbc>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4917      	ldr	r1, [pc, #92]	; (80039b0 <main+0xc0>)
 8003952:	4618      	mov	r0, r3
 8003954:	f7fd fc6e 	bl	8001234 <vQueueAddToRegistry>
				 "Motor",
				 configMINIMAL_STACK_SIZE,
				 NULL,
				 Motor_TASK_PRIORITY,
				 NULL);*/
	xTaskCreate( BluetoothTask,
 8003958:	2300      	movs	r3, #0
 800395a:	9301      	str	r3, [sp, #4]
 800395c:	2302      	movs	r3, #2
 800395e:	9300      	str	r3, [sp, #0]
 8003960:	2300      	movs	r3, #0
 8003962:	2282      	movs	r2, #130	; 0x82
 8003964:	4913      	ldr	r1, [pc, #76]	; (80039b4 <main+0xc4>)
 8003966:	4814      	ldr	r0, [pc, #80]	; (80039b8 <main+0xc8>)
 8003968:	f7fd fcc0 	bl	80012ec <xTaskCreate>
				NULL,
				Bluetooth_TASK_PRIORITY,
				NULL);


	xExampleSoftwareTimer = xTimerCreate("LEDTimer", /* A text name, purely to help debugging. */
 800396c:	4b13      	ldr	r3, [pc, #76]	; (80039bc <main+0xcc>)
 800396e:	9300      	str	r3, [sp, #0]
 8003970:	2300      	movs	r3, #0
 8003972:	2201      	movs	r2, #1
 8003974:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003978:	4811      	ldr	r0, [pc, #68]	; (80039c0 <main+0xd0>)
 800397a:	f7fe fc01 	bl	8002180 <xTimerCreate>
 800397e:	6078      	str	r0, [r7, #4]
								pdTRUE,								/* This is a periodic timer, so xAutoReload is set to pdTRUE. */
								( void * ) 0,						/* The ID is not used, so can be set to anything. */
								vExampleTimerCallback				/* The callback function that switches the LED off. */
							);

	xTimerStart( xExampleSoftwareTimer, 0 );
 8003980:	f7fd fedc 	bl	800173c <xTaskGetTickCount>
 8003984:	4602      	mov	r2, r0
 8003986:	2300      	movs	r3, #0
 8003988:	9300      	str	r3, [sp, #0]
 800398a:	2300      	movs	r3, #0
 800398c:	2101      	movs	r1, #1
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f7fe fc44 	bl	800221c <xTimerGenericCommand>
	vTaskStartScheduler();
 8003994:	f7fd fddc 	bl	8001550 <vTaskStartScheduler>
 8003998:	2300      	movs	r3, #0
	//for( ;; );
}
 800399a:	4618      	mov	r0, r3
 800399c:	3708      	adds	r7, #8
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	bf00      	nop
 80039a4:	20001da8 	.word	0x20001da8
 80039a8:	08003ce4 	.word	0x08003ce4
 80039ac:	20001dac 	.word	0x20001dac
 80039b0:	08003cf0 	.word	0x08003cf0
 80039b4:	08003d00 	.word	0x08003d00
 80039b8:	080039e9 	.word	0x080039e9
 80039bc:	080039c5 	.word	0x080039c5
 80039c0:	08003d0c 	.word	0x08003d0c

080039c4 <vExampleTimerCallback>:
/*-----------------------------------------------------------*/

static void vExampleTimerCallback( xTimerHandle xTimer )
{
 80039c4:	b480      	push	{r7}
 80039c6:	b083      	sub	sp, #12
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
	ulCountOfTimerCallbackExecutions++;
 80039cc:	4b05      	ldr	r3, [pc, #20]	; (80039e4 <vExampleTimerCallback+0x20>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	3301      	adds	r3, #1
 80039d2:	4a04      	ldr	r2, [pc, #16]	; (80039e4 <vExampleTimerCallback+0x20>)
 80039d4:	6013      	str	r3, [r2, #0]
}
 80039d6:	bf00      	nop
 80039d8:	370c      	adds	r7, #12
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr
 80039e2:	bf00      	nop
 80039e4:	20001db0 	.word	0x20001db0

080039e8 <BluetoothTask>:
		}

}*/

static void BluetoothTask(void *paParameters)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b082      	sub	sp, #8
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
	Motor_12_Config();
 80039f0:	f7ff fed2 	bl	8003798 <Motor_12_Config>
	for(;;)
	{

		USART2_IRQHandler();
 80039f4:	f7ff fe40 	bl	8003678 <USART2_IRQHandler>
 80039f8:	e7fc      	b.n	80039f4 <BluetoothTask+0xc>
	...

080039fc <vApplicationTickHook>:

}
/*-----------------------------------------------------------*/

void vApplicationTickHook( void )
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b082      	sub	sp, #8
 8003a00:	af00      	add	r7, sp, #0
portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 8003a02:	2300      	movs	r3, #0
 8003a04:	607b      	str	r3, [r7, #4]
static uint32_t ulCount = 0;

	ulCount++;
 8003a06:	4b0c      	ldr	r3, [pc, #48]	; (8003a38 <vApplicationTickHook+0x3c>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	3301      	adds	r3, #1
 8003a0c:	4a0a      	ldr	r2, [pc, #40]	; (8003a38 <vApplicationTickHook+0x3c>)
 8003a0e:	6013      	str	r3, [r2, #0]
	if( ulCount >= 500UL )
 8003a10:	4b09      	ldr	r3, [pc, #36]	; (8003a38 <vApplicationTickHook+0x3c>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003a18:	d309      	bcc.n	8003a2e <vApplicationTickHook+0x32>
	{

		xSemaphoreGiveFromISR( xEventSemaphore, &xHigherPriorityTaskWoken );
 8003a1a:	4b08      	ldr	r3, [pc, #32]	; (8003a3c <vApplicationTickHook+0x40>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	1d3a      	adds	r2, r7, #4
 8003a20:	4611      	mov	r1, r2
 8003a22:	4618      	mov	r0, r3
 8003a24:	f7fd f95a 	bl	8000cdc <xQueueGiveFromISR>
		ulCount = 0UL;
 8003a28:	4b03      	ldr	r3, [pc, #12]	; (8003a38 <vApplicationTickHook+0x3c>)
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	601a      	str	r2, [r3, #0]
	}

}
 8003a2e:	bf00      	nop
 8003a30:	3708      	adds	r7, #8
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	bf00      	nop
 8003a38:	20001db4 	.word	0x20001db4
 8003a3c:	20001dac 	.word	0x20001dac

08003a40 <vApplicationMallocFailedHook>:
/*-----------------------------------------------------------*/

void vApplicationMallocFailedHook( void )
{
 8003a40:	b480      	push	{r7}
 8003a42:	af00      	add	r7, sp, #0
	for( ;; );
 8003a44:	e7fe      	b.n	8003a44 <vApplicationMallocFailedHook+0x4>

08003a46 <vApplicationStackOverflowHook>:
}
/*-----------------------------------------------------------*/

void vApplicationStackOverflowHook( xTaskHandle pxTask, signed char *pcTaskName )
{
 8003a46:	b480      	push	{r7}
 8003a48:	b083      	sub	sp, #12
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	6078      	str	r0, [r7, #4]
 8003a4e:	6039      	str	r1, [r7, #0]
	( void ) pcTaskName;
	( void ) pxTask;
	for( ;; );
 8003a50:	e7fe      	b.n	8003a50 <vApplicationStackOverflowHook+0xa>

08003a52 <vApplicationIdleHook>:
}
/*-----------------------------------------------------------*/

void vApplicationIdleHook( void )
{
 8003a52:	b580      	push	{r7, lr}
 8003a54:	b082      	sub	sp, #8
 8003a56:	af00      	add	r7, sp, #0
volatile size_t xFreeStackSpace;
	xFreeStackSpace = xPortGetFreeHeapSize();
 8003a58:	f7fc fee4 	bl	8000824 <xPortGetFreeHeapSize>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	607b      	str	r3, [r7, #4]
}
 8003a60:	bf00      	nop
 8003a62:	3708      	adds	r7, #8
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}

08003a68 <prvSetupHardware>:
/*-----------------------------------------------------------*/

static void prvSetupHardware( void )
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	af00      	add	r7, sp, #0
	NVIC_SetPriorityGrouping( 0 );
 8003a6c:	2000      	movs	r0, #0
 8003a6e:	f7ff ff1b 	bl	80038a8 <NVIC_SetPriorityGrouping>
}
 8003a72:	bf00      	nop
 8003a74:	bd80      	pop	{r7, pc}
	...

08003a78 <Reset_Handler>:
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003a78:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003a7a:	e003      	b.n	8003a84 <LoopCopyDataInit>

08003a7c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003a7c:	4b0b      	ldr	r3, [pc, #44]	; (8003aac <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8003a7e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003a80:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003a82:	3104      	adds	r1, #4

08003a84 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003a84:	480a      	ldr	r0, [pc, #40]	; (8003ab0 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8003a86:	4b0b      	ldr	r3, [pc, #44]	; (8003ab4 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8003a88:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003a8a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003a8c:	d3f6      	bcc.n	8003a7c <CopyDataInit>
  ldr  r2, =_sbss
 8003a8e:	4a0a      	ldr	r2, [pc, #40]	; (8003ab8 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8003a90:	e002      	b.n	8003a98 <LoopFillZerobss>

08003a92 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003a92:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003a94:	f842 3b04 	str.w	r3, [r2], #4

08003a98 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003a98:	4b08      	ldr	r3, [pc, #32]	; (8003abc <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8003a9a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003a9c:	d3f9      	bcc.n	8003a92 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003a9e:	f000 f82b 	bl	8003af8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003aa2:	f000 f8db 	bl	8003c5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003aa6:	f7ff ff23 	bl	80038f0 <main>
  bx  lr    
 8003aaa:	4770      	bx	lr
  ldr  r3, =_sidata
 8003aac:	08003d50 	.word	0x08003d50
  ldr  r0, =_sdata
 8003ab0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003ab4:	2000003c 	.word	0x2000003c
  ldr  r2, =_sbss
 8003ab8:	2000003c 	.word	0x2000003c
  ldr  r3, = _ebss
 8003abc:	20001e74 	.word	0x20001e74

08003ac0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003ac0:	e7fe      	b.n	8003ac0 <ADC_IRQHandler>

08003ac2 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8003ac2:	b480      	push	{r7}
 8003ac4:	af00      	add	r7, sp, #0
}
 8003ac6:	bf00      	nop
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ace:	4770      	bx	lr

08003ad0 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8003ad4:	e7fe      	b.n	8003ad4 <HardFault_Handler+0x4>

08003ad6 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8003ad6:	b480      	push	{r7}
 8003ad8:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8003ada:	e7fe      	b.n	8003ada <MemManage_Handler+0x4>

08003adc <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8003adc:	b480      	push	{r7}
 8003ade:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8003ae0:	e7fe      	b.n	8003ae0 <BusFault_Handler+0x4>

08003ae2 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8003ae2:	b480      	push	{r7}
 8003ae4:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8003ae6:	e7fe      	b.n	8003ae6 <UsageFault_Handler+0x4>

08003ae8 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	af00      	add	r7, sp, #0
}
 8003aec:	bf00      	nop
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr
	...

08003af8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003afc:	4a16      	ldr	r2, [pc, #88]	; (8003b58 <SystemInit+0x60>)
 8003afe:	4b16      	ldr	r3, [pc, #88]	; (8003b58 <SystemInit+0x60>)
 8003b00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003b08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003b0c:	4a13      	ldr	r2, [pc, #76]	; (8003b5c <SystemInit+0x64>)
 8003b0e:	4b13      	ldr	r3, [pc, #76]	; (8003b5c <SystemInit+0x64>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f043 0301 	orr.w	r3, r3, #1
 8003b16:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003b18:	4b10      	ldr	r3, [pc, #64]	; (8003b5c <SystemInit+0x64>)
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003b1e:	4a0f      	ldr	r2, [pc, #60]	; (8003b5c <SystemInit+0x64>)
 8003b20:	4b0e      	ldr	r3, [pc, #56]	; (8003b5c <SystemInit+0x64>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003b28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b2c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003b2e:	4b0b      	ldr	r3, [pc, #44]	; (8003b5c <SystemInit+0x64>)
 8003b30:	4a0b      	ldr	r2, [pc, #44]	; (8003b60 <SystemInit+0x68>)
 8003b32:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003b34:	4a09      	ldr	r2, [pc, #36]	; (8003b5c <SystemInit+0x64>)
 8003b36:	4b09      	ldr	r3, [pc, #36]	; (8003b5c <SystemInit+0x64>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b3e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003b40:	4b06      	ldr	r3, [pc, #24]	; (8003b5c <SystemInit+0x64>)
 8003b42:	2200      	movs	r2, #0
 8003b44:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8003b46:	f000 f80d 	bl	8003b64 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003b4a:	4b03      	ldr	r3, [pc, #12]	; (8003b58 <SystemInit+0x60>)
 8003b4c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003b50:	609a      	str	r2, [r3, #8]
#endif
}
 8003b52:	bf00      	nop
 8003b54:	bd80      	pop	{r7, pc}
 8003b56:	bf00      	nop
 8003b58:	e000ed00 	.word	0xe000ed00
 8003b5c:	40023800 	.word	0x40023800
 8003b60:	24003010 	.word	0x24003010

08003b64 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b083      	sub	sp, #12
 8003b68:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	607b      	str	r3, [r7, #4]
 8003b6e:	2300      	movs	r3, #0
 8003b70:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8003b72:	4a36      	ldr	r2, [pc, #216]	; (8003c4c <SetSysClock+0xe8>)
 8003b74:	4b35      	ldr	r3, [pc, #212]	; (8003c4c <SetSysClock+0xe8>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b7c:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8003b7e:	4b33      	ldr	r3, [pc, #204]	; (8003c4c <SetSysClock+0xe8>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b86:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	3301      	adds	r3, #1
 8003b8c:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d103      	bne.n	8003b9c <SetSysClock+0x38>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8003b9a:	d1f0      	bne.n	8003b7e <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8003b9c:	4b2b      	ldr	r3, [pc, #172]	; (8003c4c <SetSysClock+0xe8>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d002      	beq.n	8003bae <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	603b      	str	r3, [r7, #0]
 8003bac:	e001      	b.n	8003bb2 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d142      	bne.n	8003c3e <SetSysClock+0xda>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8003bb8:	4a24      	ldr	r2, [pc, #144]	; (8003c4c <SetSysClock+0xe8>)
 8003bba:	4b24      	ldr	r3, [pc, #144]	; (8003c4c <SetSysClock+0xe8>)
 8003bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bc2:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 8003bc4:	4a22      	ldr	r2, [pc, #136]	; (8003c50 <SetSysClock+0xec>)
 8003bc6:	4b22      	ldr	r3, [pc, #136]	; (8003c50 <SetSysClock+0xec>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003bce:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8003bd0:	4a1e      	ldr	r2, [pc, #120]	; (8003c4c <SetSysClock+0xe8>)
 8003bd2:	4b1e      	ldr	r3, [pc, #120]	; (8003c4c <SetSysClock+0xe8>)
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8003bd8:	4a1c      	ldr	r2, [pc, #112]	; (8003c4c <SetSysClock+0xe8>)
 8003bda:	4b1c      	ldr	r3, [pc, #112]	; (8003c4c <SetSysClock+0xe8>)
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003be2:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8003be4:	4a19      	ldr	r2, [pc, #100]	; (8003c4c <SetSysClock+0xe8>)
 8003be6:	4b19      	ldr	r3, [pc, #100]	; (8003c4c <SetSysClock+0xe8>)
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8003bee:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8003bf0:	4b16      	ldr	r3, [pc, #88]	; (8003c4c <SetSysClock+0xe8>)
 8003bf2:	4a18      	ldr	r2, [pc, #96]	; (8003c54 <SetSysClock+0xf0>)
 8003bf4:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8003bf6:	4a15      	ldr	r2, [pc, #84]	; (8003c4c <SetSysClock+0xe8>)
 8003bf8:	4b14      	ldr	r3, [pc, #80]	; (8003c4c <SetSysClock+0xe8>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c00:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8003c02:	bf00      	nop
 8003c04:	4b11      	ldr	r3, [pc, #68]	; (8003c4c <SetSysClock+0xe8>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d0f9      	beq.n	8003c04 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8003c10:	4b11      	ldr	r3, [pc, #68]	; (8003c58 <SetSysClock+0xf4>)
 8003c12:	f240 6205 	movw	r2, #1541	; 0x605
 8003c16:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8003c18:	4a0c      	ldr	r2, [pc, #48]	; (8003c4c <SetSysClock+0xe8>)
 8003c1a:	4b0c      	ldr	r3, [pc, #48]	; (8003c4c <SetSysClock+0xe8>)
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	f023 0303 	bic.w	r3, r3, #3
 8003c22:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8003c24:	4a09      	ldr	r2, [pc, #36]	; (8003c4c <SetSysClock+0xe8>)
 8003c26:	4b09      	ldr	r3, [pc, #36]	; (8003c4c <SetSysClock+0xe8>)
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	f043 0302 	orr.w	r3, r3, #2
 8003c2e:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL)
 8003c30:	bf00      	nop
 8003c32:	4b06      	ldr	r3, [pc, #24]	; (8003c4c <SetSysClock+0xe8>)
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	f003 030c 	and.w	r3, r3, #12
 8003c3a:	2b08      	cmp	r3, #8
 8003c3c:	d1f9      	bne.n	8003c32 <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8003c3e:	bf00      	nop
 8003c40:	370c      	adds	r7, #12
 8003c42:	46bd      	mov	sp, r7
 8003c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c48:	4770      	bx	lr
 8003c4a:	bf00      	nop
 8003c4c:	40023800 	.word	0x40023800
 8003c50:	40007000 	.word	0x40007000
 8003c54:	07405408 	.word	0x07405408
 8003c58:	40023c00 	.word	0x40023c00

08003c5c <__libc_init_array>:
 8003c5c:	b570      	push	{r4, r5, r6, lr}
 8003c5e:	4e0d      	ldr	r6, [pc, #52]	; (8003c94 <__libc_init_array+0x38>)
 8003c60:	4c0d      	ldr	r4, [pc, #52]	; (8003c98 <__libc_init_array+0x3c>)
 8003c62:	1ba4      	subs	r4, r4, r6
 8003c64:	10a4      	asrs	r4, r4, #2
 8003c66:	2500      	movs	r5, #0
 8003c68:	42a5      	cmp	r5, r4
 8003c6a:	d109      	bne.n	8003c80 <__libc_init_array+0x24>
 8003c6c:	4e0b      	ldr	r6, [pc, #44]	; (8003c9c <__libc_init_array+0x40>)
 8003c6e:	4c0c      	ldr	r4, [pc, #48]	; (8003ca0 <__libc_init_array+0x44>)
 8003c70:	f000 f85e 	bl	8003d30 <_init>
 8003c74:	1ba4      	subs	r4, r4, r6
 8003c76:	10a4      	asrs	r4, r4, #2
 8003c78:	2500      	movs	r5, #0
 8003c7a:	42a5      	cmp	r5, r4
 8003c7c:	d105      	bne.n	8003c8a <__libc_init_array+0x2e>
 8003c7e:	bd70      	pop	{r4, r5, r6, pc}
 8003c80:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003c84:	4798      	blx	r3
 8003c86:	3501      	adds	r5, #1
 8003c88:	e7ee      	b.n	8003c68 <__libc_init_array+0xc>
 8003c8a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003c8e:	4798      	blx	r3
 8003c90:	3501      	adds	r5, #1
 8003c92:	e7f2      	b.n	8003c7a <__libc_init_array+0x1e>
 8003c94:	08003d48 	.word	0x08003d48
 8003c98:	08003d48 	.word	0x08003d48
 8003c9c:	08003d48 	.word	0x08003d48
 8003ca0:	08003d4c 	.word	0x08003d4c

08003ca4 <memcpy>:
 8003ca4:	b510      	push	{r4, lr}
 8003ca6:	1e43      	subs	r3, r0, #1
 8003ca8:	440a      	add	r2, r1
 8003caa:	4291      	cmp	r1, r2
 8003cac:	d100      	bne.n	8003cb0 <memcpy+0xc>
 8003cae:	bd10      	pop	{r4, pc}
 8003cb0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003cb4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003cb8:	e7f7      	b.n	8003caa <memcpy+0x6>

08003cba <memset>:
 8003cba:	4402      	add	r2, r0
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d100      	bne.n	8003cc4 <memset+0xa>
 8003cc2:	4770      	bx	lr
 8003cc4:	f803 1b01 	strb.w	r1, [r3], #1
 8003cc8:	e7f9      	b.n	8003cbe <memset+0x4>
 8003cca:	0000      	movs	r0, r0
 8003ccc:	454c4449 	.word	0x454c4449
 8003cd0:	00000000 	.word	0x00000000
 8003cd4:	20726d54 	.word	0x20726d54
 8003cd8:	00637653 	.word	0x00637653
 8003cdc:	51726d54 	.word	0x51726d54
 8003ce0:	00000000 	.word	0x00000000
 8003ce4:	6e69614d 	.word	0x6e69614d
 8003ce8:	75657551 	.word	0x75657551
 8003cec:	00000065 	.word	0x00000065
 8003cf0:	65764578 	.word	0x65764578
 8003cf4:	6553746e 	.word	0x6553746e
 8003cf8:	6870616d 	.word	0x6870616d
 8003cfc:	0065726f 	.word	0x0065726f
 8003d00:	65756c42 	.word	0x65756c42
 8003d04:	746f6f74 	.word	0x746f6f74
 8003d08:	00000068 	.word	0x00000068
 8003d0c:	5444454c 	.word	0x5444454c
 8003d10:	72656d69 	.word	0x72656d69
 8003d14:	00000000 	.word	0x00000000

08003d18 <GPIO_PIN>:
 8003d18:	20001000 80004000                       ... .@..

08003d20 <GPIO_CLK>:
 8003d20:	00000008 00000008 00000008 00000008     ................

08003d30 <_init>:
 8003d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d32:	bf00      	nop
 8003d34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d36:	bc08      	pop	{r3}
 8003d38:	469e      	mov	lr, r3
 8003d3a:	4770      	bx	lr

08003d3c <_fini>:
 8003d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d3e:	bf00      	nop
 8003d40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d42:	bc08      	pop	{r3}
 8003d44:	469e      	mov	lr, r3
 8003d46:	4770      	bx	lr
